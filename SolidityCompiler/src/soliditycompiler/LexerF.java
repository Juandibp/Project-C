/* The following code was generated by JFlex 1.4.3 on 7/25/20 11:21 PM */

package soliditycompiler;
import static soliditycompiler.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/25/20 11:21 PM from the specification file
 * <tt>D:/GitHub/Project-C/SolidityCompiler/src/soliditycompiler/ScannerF.flex</tt>
 */
class LexerF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\50\2\0\1\3\22\0\1\51\1\54\1\100\2\4"+
    "\1\64\1\55\1\100\1\66\1\67\1\47\1\65\1\77\1\53\1\52"+
    "\1\46\1\2\1\14\1\11\1\16\1\12\1\17\1\15\1\2\1\13"+
    "\1\2\1\75\1\76\1\61\1\57\1\62\1\74\1\0\1\101\1\101"+
    "\1\101\1\101\1\101\1\101\7\1\1\103\1\1\1\40\12\1\1\70"+
    "\1\102\1\71\1\56\1\5\1\0\1\24\1\27\1\33\1\25\1\21"+
    "\1\20\1\37\1\42\1\6\1\1\1\31\1\22\1\35\1\7\1\30"+
    "\1\36\1\1\1\26\1\23\1\10\1\34\1\41\1\44\1\43\1\32"+
    "\1\45\1\72\1\60\1\73\1\63\42\0\1\4\35\0\1\4\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\1"+
    "\1\2\1\0\1\2\2\35\1\36\1\2\1\37\17\2"+
    "\1\40\3\2\1\41\27\2\1\4\1\0\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\35\1\57\2\0\1\35\1\60"+
    "\2\0\1\61\7\2\1\62\36\2\1\63\2\2\1\64"+
    "\2\2\1\1\1\0\1\56\2\0\1\60\1\65\1\66"+
    "\1\67\6\2\1\70\1\71\2\2\1\72\1\2\1\73"+
    "\1\2\1\74\2\2\1\75\6\2\1\76\3\2\1\77"+
    "\1\100\1\2\1\101\2\2\1\102\10\2\1\103\1\0"+
    "\3\2\3\0\1\104\1\0\2\2\1\105\1\106\1\107"+
    "\4\2\1\110\1\2\1\111\4\2\1\112\5\2\1\113"+
    "\1\114\1\115\1\116\3\2\1\117\1\120\4\2\1\121"+
    "\1\122\1\123\13\2\1\0\1\124\1\125\1\126\1\0"+
    "\1\127\1\0\1\1\1\104\1\130\1\131\1\2\1\132"+
    "\1\2\1\133\1\2\1\134\1\135\3\2\1\136\1\2"+
    "\1\137\3\2\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\11\2\1\146\1\147\1\150\1\151\5\2\1\152\1\153"+
    "\1\154\1\0\1\127\3\2\1\155\1\2\1\156\1\2"+
    "\1\157\1\160\1\161\1\162\2\2\1\163\1\164\1\165"+
    "\4\2\1\166\1\167\1\170\1\171\1\2\1\172\1\173"+
    "\1\0\1\1\1\174\1\175\1\176\1\177\1\2\1\200"+
    "\1\201\1\202\1\203\1\204\4\2\1\205\2\2\1\206"+
    "\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\104\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\104\0\104\0\u08c4\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\u0908"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\210\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\210\0\u0f68\0\u0fac\0\u0ff0\0\210\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\u16d8\0\104\0\u171c\0\u1760\0\u09d4"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\210\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2244\0\210\0\u2288\0\u22cc\0\210\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u23dc\0\u2420\0\u2464\0\u17e8\0\u24a8\0\u0990"+
    "\0\u0990\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\210"+
    "\0\210\0\u2684\0\u26c8\0\210\0\u270c\0\210\0\u2750\0\210"+
    "\0\u2794\0\u27d8\0\210\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c"+
    "\0\u2970\0\210\0\u29b4\0\u29f8\0\u2a3c\0\210\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\210\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\104\0\u3014\0\u3058\0\u309c"+
    "\0\u0990\0\u0990\0\u0990\0\u30e0\0\u3124\0\u3168\0\u31ac\0\210"+
    "\0\u31f0\0\210\0\u3234\0\u3278\0\u32bc\0\u3300\0\210\0\u3344"+
    "\0\u3388\0\u33cc\0\u3410\0\u3454\0\210\0\u3498\0\u0990\0\u0990"+
    "\0\u34dc\0\u3520\0\u3564\0\u35a8\0\210\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u0990\0\u0990\0\u3740\0\u3784\0\u37c8\0\u380c"+
    "\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c"+
    "\0\210\0\210\0\210\0\u3a70\0\u2f48\0\u3ab4\0\u3af8\0\u23dc"+
    "\0\u0990\0\u0990\0\u3b3c\0\210\0\u3b80\0\210\0\u3bc4\0\210"+
    "\0\210\0\u3c08\0\u3c4c\0\u3c90\0\210\0\u3cd4\0\u3d18\0\u3d5c"+
    "\0\u3da0\0\u3de4\0\u0990\0\u0990\0\u0990\0\u3e28\0\u0990\0\u0990"+
    "\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048"+
    "\0\u408c\0\u0990\0\u0990\0\u0990\0\210\0\u40d0\0\u4114\0\u4158"+
    "\0\u419c\0\u41e0\0\210\0\210\0\u4224\0\u4268\0\u2398\0\u42ac"+
    "\0\u42f0\0\u4334\0\210\0\u4378\0\210\0\u43bc\0\210\0\210"+
    "\0\u0990\0\u0990\0\u4400\0\u4444\0\u0990\0\u0990\0\u0990\0\u4488"+
    "\0\u44cc\0\u4510\0\u4554\0\u0990\0\u0990\0\210\0\210\0\u4598"+
    "\0\210\0\210\0\u45dc\0\u3ab4\0\210\0\210\0\210\0\210"+
    "\0\u4620\0\u0990\0\u0990\0\210\0\210\0\210\0\u4664\0\u46a8"+
    "\0\u46ec\0\u4730\0\210\0\u4774\0\u47b8\0\210\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\3\1\6\1\3"+
    "\1\7\7\4\1\10\1\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\2\3\1\17\1\20\1\21\1\22\1\23"+
    "\1\3\1\24\1\25\1\26\1\3\1\27\1\3\1\30"+
    "\1\31\2\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\3\1\61\1\3\105\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\26\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\65\1\4\2\0"+
    "\4\65\7\4\1\65\1\66\24\65\4\0\1\67\26\0"+
    "\1\65\1\0\1\65\3\0\1\5\44\0\2\5\33\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\3\1\70\1\3"+
    "\7\62\1\71\14\3\1\72\10\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\6\3\1\73\13\3\1\74"+
    "\3\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\1\75\2\3"+
    "\7\62\4\3\1\76\1\3\1\77\1\3\1\100\3\3"+
    "\1\101\11\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\1\3"+
    "\1\102\1\103\7\62\2\3\1\104\23\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\2\3\1\105\7\62\1\3\1\106"+
    "\6\3\1\107\14\3\1\110\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\3\3\1\111\1\3\1\112\20\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\1\3"+
    "\1\113\2\3\1\114\3\3\1\115\15\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\1\3\1\116\24\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\4\3"+
    "\1\117\1\3\1\120\1\3\1\121\1\3\1\122\13\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\1\3"+
    "\1\123\24\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\4\3\1\124\3\3\1\125\15\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\1\126\2\3\7\62\1\127\25\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\130\2\3\7\62"+
    "\4\3\1\131\3\3\1\132\15\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\4\3\1\133\1\3\1\134"+
    "\5\3\1\135\11\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\6\3\1\136\17\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\1\137\2\3\7\62\4\3\1\140\21\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\1\3"+
    "\1\141\6\3\1\142\15\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\1\3\1\143\20\3\1\144\3\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\46\0"+
    "\1\145\1\146\7\0\1\147\73\0\1\36\7\0\1\150"+
    "\26\0\1\67\6\0\7\67\143\0\1\151\103\0\1\152"+
    "\101\0\1\153\105\0\1\154\104\0\1\155\102\0\1\156"+
    "\1\0\1\157\101\0\1\160\2\0\1\161\100\0\1\162"+
    "\25\0\2\60\1\0\43\60\2\0\1\60\1\0\2\60"+
    "\2\0\2\60\3\0\1\60\7\0\1\60\1\0\2\60"+
    "\1\163\1\60\1\164\1\60\7\0\1\165\24\0\1\166"+
    "\6\0\1\167\41\0\2\62\2\0\41\62\33\0\1\62"+
    "\1\0\1\62\1\0\1\170\2\0\5\170\7\0\27\170"+
    "\4\0\2\170\2\0\2\170\3\0\1\170\7\0\1\170"+
    "\1\0\2\170\1\0\3\170\1\0\1\64\1\62\1\0"+
    "\1\170\4\64\7\62\26\64\1\170\4\0\2\170\2\0"+
    "\2\170\3\0\1\170\7\0\1\170\1\0\2\170\1\0"+
    "\1\64\1\170\1\64\1\0\2\65\2\0\41\65\33\0"+
    "\1\65\1\0\1\65\1\0\1\65\1\171\2\0\4\65"+
    "\7\171\26\65\5\0\1\172\25\0\1\65\1\0\1\65"+
    "\2\0\1\67\6\0\7\67\1\0\1\173\63\0\1\3"+
    "\1\62\1\0\1\63\1\64\2\3\1\174\7\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\16\3"+
    "\1\175\7\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\4\3\1\176\7\3\1\177\11\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\1\200\2\3\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\1\3\1\201\1\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\2\3\1\202\23\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\10\3\1\203\15\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\6\3\1\204\17\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\1\3\1\205\1\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\14\3\1\206\11\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\22\3\1\207\3\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\3\3\1\210\22\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\6\3\1\211"+
    "\17\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\1\3\1\212"+
    "\1\3\7\62\13\3\1\213\12\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\2\3\1\214\23\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\4\3\1\215"+
    "\21\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\5\3\1\216\20\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\2\3\1\217\23\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\12\3\1\220\13\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\2\3\1\221\7\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\2\3"+
    "\1\222\23\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\1\3\1\223\24\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\10\3\1\224\15\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\2\3\1\225\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\4\3\1\226"+
    "\21\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\2\3\1\227\23\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\1\3\1\230\1\3\7\62\26\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\1\3\1\231\1\3\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\1\232\2\3\7\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\3\1\233\1\3"+
    "\7\62\26\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\16\3\1\234\7\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\5\3\1\235\20\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\12\3\1\236\13\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\237\2\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\7\3\1\240\16\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\4\3\1\241\21\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\1\3\1\242\24\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\6\3\1\243"+
    "\17\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\23\3\1\244\2\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\14\3\1\245\11\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\1\246\2\3\7\62\1\3\1\247\24\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\250\2\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\50\145\1\0\33\145\47\0\1\251\34\0\1\252\2\60"+
    "\1\252\43\60\1\252\1\0\1\60\1\252\2\60\2\252"+
    "\2\60\3\252\1\60\7\252\1\60\1\252\2\60\1\253"+
    "\1\60\1\164\1\60\103\0\1\254\103\0\1\255\1\0"+
    "\1\65\1\171\2\0\4\65\7\171\26\65\33\0\1\65"+
    "\1\0\1\65\2\0\1\256\6\0\7\256\66\0\1\256"+
    "\6\0\7\256\33\0\1\172\31\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\1\257\1\260\1\261\1\262\1\263"+
    "\1\264\1\62\1\3\1\265\24\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\10\3\1\266\15\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\1\3\1\267\1\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\1\3\1\270\24\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\3\3\1\271\22\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\1\3\1\272\1\3\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\3\3\1\273"+
    "\22\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\15\3\1\274\10\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\13\3\1\275\12\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\15\3\1\276\10\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\1\3\1\277"+
    "\24\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\1\3\1\300\24\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\1\301\2\3\7\62\14\3\1\302\11\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\5\3\1\303\20\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\10\3"+
    "\1\304\15\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\1\305"+
    "\2\3\7\62\26\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\7\3\1\306\16\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\6\3\1\307\17\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\1\3\1\310"+
    "\15\3\1\311\6\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\3\3\1\312\22\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\14\3\1\313\11\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\4\3\1\314"+
    "\21\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\4\3\1\315\21\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\2\3\1\316\23\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\1\3\1\317\24\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\6\3\1\320"+
    "\17\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\2\3\1\321\23\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\2\3\1\322\7\62\3\3\1\323\22\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\2\3\1\324\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\23\3\1\325"+
    "\2\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\14\3\1\326\11\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\16\3\1\327\7\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\5\3\1\330\20\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\4\3\1\331"+
    "\21\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\21\3\1\332\4\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\2\3\1\333\23\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\17\3\1\334\6\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\24\3\1\335"+
    "\1\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\336\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\6\3\1\337\17\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\11\3\1\340\14\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\2\3\1\341\23\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\342\2\251"+
    "\1\342\43\251\1\343\1\344\1\251\1\342\2\251\2\342"+
    "\2\251\3\342\1\251\7\342\1\251\1\342\2\251\1\342"+
    "\3\251\1\0\2\252\1\0\43\252\2\0\1\252\1\0"+
    "\2\252\2\0\2\252\3\0\1\252\7\0\1\252\1\0"+
    "\2\252\1\345\1\252\1\346\1\252\103\0\1\167\103\0"+
    "\1\165\1\0\2\62\2\0\12\62\1\347\26\62\33\0"+
    "\1\62\1\0\1\62\1\0\2\62\2\0\4\62\1\350"+
    "\3\62\1\351\30\62\33\0\1\62\1\0\1\62\1\0"+
    "\2\62\2\0\5\62\1\352\33\62\33\0\1\62\1\0"+
    "\1\62\1\0\2\62\2\0\4\62\1\353\34\62\33\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\6\3\1\354\17\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\6\3\1\355\17\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\3\3"+
    "\1\356\22\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\1\3\1\357\24\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\1\3\1\360\24\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\2\3\1\361\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\6\3\1\362"+
    "\17\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\1\3\1\363"+
    "\1\3\7\62\26\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\13\3\1\364\12\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\1\3\1\365\1\3\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\5\3\1\366"+
    "\20\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\10\3\1\367\15\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\1\3\1\370\24\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\2\3\1\371\7\62\26\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\4\3\1\372\21\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\6\3"+
    "\1\373\17\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\1\3"+
    "\1\374\1\3\7\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\11\3\1\375\14\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\1\376\1\377\1\u0100\1\u0101"+
    "\1\u0102\1\u0103\1\62\3\3\1\u0104\22\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\3\3\1\u0105\22\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\13\3"+
    "\1\u0106\12\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\1\u0107"+
    "\2\3\7\62\6\3\1\u0108\17\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\2\3\1\u0109\7\62\26\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\1\u010a\1\u010b\1\u010c\1\u010d"+
    "\1\u010e\1\u010f\1\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\1\3\1\u0110\24\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\2\3\1\u0111\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\1\u0112\2\3\7\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\u0113\2\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\7\3\1\u0114\16\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\4\3\1\u0115\21\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\1\u0116\2\3\7\62\26\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\15\3\1\u0117\10\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\2\0"+
    "\1\u0118\6\0\7\u0118\61\0\1\u0118\3\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\3\3\1\u0119\22\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\3\3"+
    "\1\u011a\22\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\1\3\1\u011b\24\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\47\342\1\343\1\u011c\101\342\1\u011d"+
    "\1\343\1\u011c\33\342\47\u011e\1\u011f\34\u011e\50\252\1\0"+
    "\27\252\1\u0120\1\252\1\346\1\252\1\0\2\62\2\0"+
    "\10\62\1\u0121\30\62\33\0\1\62\1\0\1\62\1\0"+
    "\2\62\2\0\6\62\1\u0122\32\62\33\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\0\1\63\1\64\1\3"+
    "\1\u0123\1\3\7\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\2\3\1\u0124\7\62\26\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\1\u0125\25\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\12\3\1\u0126\13\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\u0127\2\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\17\3\1\u0128\6\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\2\3\1\u0129\7\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\5\3\1\u012a\20\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\1\u012b\2\3\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\3\3\1\u012c"+
    "\22\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\1\3\1\u012d\24\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\2\3\1\u012e\7\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\1\3\1\u012f\1\3\7\62\26\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\13\3\1\u0130\12\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\2\62\2\0\12\62\1\u0131\26\62\33\0\1\62\1\0"+
    "\1\62\1\0\2\62\2\0\4\62\1\u0132\3\62\1\u0133"+
    "\30\62\33\0\1\62\1\0\1\62\1\0\2\62\2\0"+
    "\5\62\1\u0134\33\62\33\0\1\62\1\0\1\62\1\0"+
    "\2\62\2\0\4\62\1\u0135\34\62\33\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\1\u0136\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b\1\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\10\3"+
    "\1\u013c\15\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\1\3"+
    "\1\u013d\1\3\7\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\4\3\1\u013e\21\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\6\3\1\u013f\17\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\2\62\2\0\12\62\1\u0140\26\62\33\0\1\62\1\0"+
    "\1\62\1\0\2\62\2\0\4\62\1\u0141\3\62\1\u0142"+
    "\30\62\33\0\1\62\1\0\1\62\1\0\2\62\2\0"+
    "\5\62\1\u0143\33\62\33\0\1\62\1\0\1\62\1\0"+
    "\2\62\2\0\4\62\1\u0144\34\62\33\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\5\3\1\u0145\20\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\1\3\1\u0146\24\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\1\3\1\u0147\1\3\7\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\1\u0148"+
    "\25\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\2\3\1\u0149\23\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\2\3\1\u014a\7\62\26\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\13\3\1\u014b\12\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\4\3\1\u014c\21\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\2\0"+
    "\1\u0118\6\0\7\u0118\60\0\1\u014d\1\u0118\2\0\47\u011e"+
    "\1\343\103\u011e\1\u014e\34\u011e\1\342\2\251\1\342\42\251"+
    "\1\u014f\1\343\1\344\1\251\1\342\2\251\2\342\2\251"+
    "\3\342\1\251\7\342\1\251\1\342\2\251\1\342\3\251"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\4\3\1\u0150\21\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\1\3\1\u0151\24\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\10\3\1\u0152\15\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\3\3\1\u0153"+
    "\22\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\2\3\1\u0154"+
    "\7\62\26\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\3\3\1\u0155\22\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\1\3\1\u0156\24\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\3\3\1\u0157\22\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\1\3"+
    "\1\u0158\24\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\2\62\2\0\10\62\1\u0159\30\62\33\0"+
    "\1\62\1\0\1\62\1\0\2\62\2\0\6\62\1\u015a"+
    "\32\62\33\0\1\62\1\0\1\62\1\0\2\62\2\0"+
    "\12\62\1\u015b\26\62\33\0\1\62\1\0\1\62\1\0"+
    "\2\62\2\0\4\62\1\u015c\3\62\1\u015d\30\62\33\0"+
    "\1\62\1\0\1\62\1\0\2\62\2\0\5\62\1\u015e"+
    "\33\62\33\0\1\62\1\0\1\62\1\0\2\62\2\0"+
    "\4\62\1\u015f\34\62\33\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\5\3"+
    "\1\u0160\20\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\14\3\1\u0161\11\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\13\3\1\u0162\12\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\14\3\1\u0163\11\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\2\62\2\0\10\62\1\u0164\30\62\33\0\1\62\1\0"+
    "\1\62\1\0\2\62\2\0\6\62\1\u0165\32\62\33\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\3\3\1\u0166\22\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\17\3\1\u0167\6\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\u0168\2\3\7\62"+
    "\26\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\1\3\1\u0169\24\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\1\0\1\3\1\62\1\0\1\63\1\64"+
    "\3\3\7\62\1\3\1\u016a\24\3\1\63\4\0\2\63"+
    "\2\0\2\63\3\0\1\63\7\0\1\63\1\0\2\63"+
    "\1\0\1\3\1\63\1\3\102\0\1\u016b\1\0\46\u011e"+
    "\1\u016c\1\u014e\34\u011e\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\2\3\1\u016d\23\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\6\3\1\u016e\17\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\1\3\1\u016f\1\3"+
    "\7\62\26\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\12\3\1\u0170\13\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\13\3\1\u0171\12\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\2\62\2\0"+
    "\10\62\1\u0172\30\62\33\0\1\62\1\0\1\62\1\0"+
    "\2\62\2\0\6\62\1\u0173\32\62\33\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\1\3\1\u0174\24\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\1\3\1\u0175\24\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\2\3\1\u0176\7\62\26\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\3\3\7\62\13\3\1\u0177"+
    "\12\3\1\63\4\0\2\63\2\0\2\63\3\0\1\63"+
    "\7\0\1\63\1\0\2\63\1\0\1\3\1\63\1\3"+
    "\1\0\1\3\1\62\1\0\1\63\1\64\3\3\7\62"+
    "\1\3\1\u0178\24\3\1\63\4\0\2\63\2\0\2\63"+
    "\3\0\1\63\7\0\1\63\1\0\2\63\1\0\1\3"+
    "\1\63\1\3\7\0\1\u014d\75\0\1\3\1\62\1\0"+
    "\1\63\1\64\3\3\7\62\4\3\1\u0179\21\3\1\63"+
    "\4\0\2\63\2\0\2\63\3\0\1\63\7\0\1\63"+
    "\1\0\2\63\1\0\1\3\1\63\1\3\1\0\1\3"+
    "\1\62\1\0\1\63\1\64\2\3\1\u017a\7\62\26\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\6\3"+
    "\1\u017b\17\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3\1\0\1\3\1\62\1\0\1\63\1\64\3\3"+
    "\7\62\2\3\1\u017c\23\3\1\63\4\0\2\63\2\0"+
    "\2\63\3\0\1\63\7\0\1\63\1\0\2\63\1\0"+
    "\1\3\1\63\1\3\1\0\1\3\1\62\1\0\1\63"+
    "\1\64\3\3\7\62\10\3\1\u017d\15\3\1\63\4\0"+
    "\2\63\2\0\2\63\3\0\1\63\7\0\1\63\1\0"+
    "\2\63\1\0\1\3\1\63\1\3\1\0\1\3\1\62"+
    "\1\0\1\63\1\64\3\3\7\62\2\3\1\u017e\23\3"+
    "\1\63\4\0\2\63\2\0\2\63\3\0\1\63\7\0"+
    "\1\63\1\0\2\63\1\0\1\3\1\63\1\3\1\0"+
    "\1\3\1\62\1\0\1\63\1\64\3\3\7\62\6\3"+
    "\1\u017f\17\3\1\63\4\0\2\63\2\0\2\63\3\0"+
    "\1\63\7\0\1\63\1\0\2\63\1\0\1\3\1\63"+
    "\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\1\11\4\1\2\11\1\1\12\11"+
    "\3\1\1\0\62\1\1\0\15\11\1\1\1\11\2\0"+
    "\2\1\2\0\56\1\1\0\1\1\2\0\60\1\1\0"+
    "\3\1\3\0\1\11\1\0\61\1\1\0\3\1\1\0"+
    "\1\1\1\0\57\1\1\0\34\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Szabo;
          }
        case 136: break;
        case 46: 
          { line = yyline; column = yycolumn; lexeme = yytext();return Cadena;
          }
        case 137: break;
        case 22: 
          { line = yyline; column = yycolumn; return CierraCorchete;
          }
        case 138: break;
        case 44: 
          { line = yyline; column = yycolumn; return CorrerALaDerecha;
          }
        case 139: break;
        case 64: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte;
          }
        case 140: break;
        case 76: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte2;
          }
        case 141: break;
        case 78: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte8;
          }
        case 142: break;
        case 23: 
          { line = yyline; column = yycolumn; return AbreLlave;
          }
        case 143: break;
        case 107: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Pragma;
          }
        case 144: break;
        case 82: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint4;
          }
        case 145: break;
        case 9: 
          { line = yyline; column = yycolumn; return NotLogico;
          }
        case 146: break;
        case 16: 
          { line = yyline; column = yycolumn; return NotBits;
          }
        case 147: break;
        case 97: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte64;
          }
        case 148: break;
        case 37: 
          { line = yyline; column = yycolumn; return Diferencia;
          }
        case 149: break;
        case 24: 
          { line = yyline; column = yycolumn; return CierraLlave;
          }
        case 150: break;
        case 104: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint32;
          }
        case 151: break;
        case 105: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Ufixed;
          }
        case 152: break;
        case 52: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Wei;
          }
        case 153: break;
        case 7: 
          { line = yyline; column = yycolumn; return Punto;
          }
        case 154: break;
        case 15: 
          { line = yyline; column = yycolumn; return MayorQue;
          }
        case 155: break;
        case 60: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Else;
          }
        case 156: break;
        case 130: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Callcode;
          }
        case 157: break;
        case 135: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Constructor;
          }
        case 158: break;
        case 28: 
          { line = yyline; column = yycolumn; return Coma;
          }
        case 159: break;
        case 91: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Finney;
          }
        case 160: break;
        case 4: 
          { /*Ignore*/
          }
        case 161: break;
        case 100: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes4;
          }
        case 162: break;
        case 69: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int16;
          }
        case 163: break;
        case 41: 
          { line = yyline; column = yycolumn; return MenorOIgualQue;
          }
        case 164: break;
        case 31: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_If;
          }
        case 165: break;
        case 122: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Payable;
          }
        case 166: break;
        case 89: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int128;
          }
        case 167: break;
        case 36: 
          { line = yyline; column = yycolumn; return Reste;
          }
        case 168: break;
        case 134: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Delgatecall;
          }
        case 169: break;
        case 48: 
          { line = yyline; column = yycolumn; lexeme = yytext(); return Cientifico;
          }
        case 170: break;
        case 25: 
          { line = yyline; column = yycolumn; return Interrogacion;
          }
        case 171: break;
        case 6: 
          { line = yyline; column = yycolumn; return Multiplicacion;
          }
        case 172: break;
        case 61: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Send;
          }
        case 173: break;
        case 72: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_False;
          }
        case 174: break;
        case 62: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Days;
          }
        case 175: break;
        case 57: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_This;
          }
        case 176: break;
        case 20: 
          { line = yyline; column = yycolumn; return CierraParentesis;
          }
        case 177: break;
        case 29: 
          { line = yyline; column = yycolumn;  return Error;
          }
        case 178: break;
        case 38: 
          { line = yyline; column = yycolumn; return AndLogico;
          }
        case 179: break;
        case 93: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Struct;
          }
        case 180: break;
        case 49: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int;
          }
        case 181: break;
        case 106: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Public;
          }
        case 182: break;
        case 95: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Return;
          }
        case 183: break;
        case 94: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Delete;
          }
        case 184: break;
        case 18: 
          { line = yyline; column = yycolumn; return Suma;
          }
        case 185: break;
        case 121: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Mapping;
          }
        case 186: break;
        case 117: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes32;
          }
        case 187: break;
        case 87: 
          { line = yyline; column = yycolumn; return ComentarioBloque;
          }
        case 188: break;
        case 112: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Balance;
          }
        case 189: break;
        case 124: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Internal;
          }
        case 190: break;
        case 32: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_As;
          }
        case 191: break;
        case 70: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int64;
          }
        case 192: break;
        case 127: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Solidity;
          }
        case 193: break;
        case 51: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Var;
          }
        case 194: break;
        case 54: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int4;
          }
        case 195: break;
        case 67: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_View;
          }
        case 196: break;
        case 81: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint2;
          }
        case 197: break;
        case 5: 
          { line = yyline; column = yycolumn; return Division;
          }
        case 198: break;
        case 109: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Seconds;
          }
        case 199: break;
        case 56: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_True;
          }
        case 200: break;
        case 129: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes128;
          }
        case 201: break;
        case 83: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint8;
          }
        case 202: break;
        case 123: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Private;
          }
        case 203: break;
        case 26: 
          { line = yyline; column = yycolumn; return DosPuntos;
          }
        case 204: break;
        case 88: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int256;
          }
        case 205: break;
        case 79: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes;
          }
        case 206: break;
        case 73: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Ether;
          }
        case 207: break;
        case 17: 
          { line = yyline; column = yycolumn; return Porcentaje;
          }
        case 208: break;
        case 50: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_For;
          }
        case 209: break;
        case 99: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes2;
          }
        case 210: break;
        case 43: 
          { line = yyline; column = yycolumn; return MayorOIgualQue;
          }
        case 211: break;
        case 98: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte32;
          }
        case 212: break;
        case 102: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint16;
          }
        case 213: break;
        case 101: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes8;
          }
        case 214: break;
        case 40: 
          { line = yyline; column = yycolumn;return OrLogico;
          }
        case 215: break;
        case 30: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Flotante;
          }
        case 216: break;
        case 12: 
          { line = yyline; column = yycolumn; return Asignacion;
          }
        case 217: break;
        case 80: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Years;
          }
        case 218: break;
        case 47: 
          { line = yyline; column = yycolumn; return Escape;
          }
        case 219: break;
        case 119: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint128;
          }
        case 220: break;
        case 120: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Minutes;
          }
        case 221: break;
        case 85: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Weeks;
          }
        case 222: break;
        case 68: 
          { line = yyline; column = yycolumn; lexeme = yytext(); return Error;
          }
        case 223: break;
        case 11: 
          { line = yyline; column = yycolumn; return Potencia;
          }
        case 224: break;
        case 114: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte128;
          }
        case 225: break;
        case 84: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Hours;
          }
        case 226: break;
        case 45: 
          { line = yyline; column = yycolumn; return Sume;
          }
        case 227: break;
        case 39: 
          { line = yyline; column = yycolumn; return Comparacion;
          }
        case 228: break;
        case 131: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Continue;
          }
        case 229: break;
        case 133: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Moddifier;
          }
        case 230: break;
        case 128: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes256;
          }
        case 231: break;
        case 13: 
          { line = yyline; column = yycolumn; return OrBits;
          }
        case 232: break;
        case 10: 
          { line = yyline; column = yycolumn; return AndBits;
          }
        case 233: break;
        case 108: 
          { line = yyline; column = yycolumn; lexeme = yytext(); return Hexadecimal;
          }
        case 234: break;
        case 53: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int2;
          }
        case 235: break;
        case 90: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Import;
          }
        case 236: break;
        case 103: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint64;
          }
        case 237: break;
        case 77: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte4;
          }
        case 238: break;
        case 55: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int8;
          }
        case 239: break;
        case 92: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_String;
          }
        case 240: break;
        case 115: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes16;
          }
        case 241: break;
        case 86: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_While;
          }
        case 242: break;
        case 1: 
          { line = yyline; column = yycolumn; return Error;
          }
        case 243: break;
        case 132: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Contract;
          }
        case 244: break;
        case 126: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Function;
          }
        case 245: break;
        case 110: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Address;
          }
        case 246: break;
        case 66: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint;
          }
        case 247: break;
        case 71: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int32;
          }
        case 248: break;
        case 63: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bool;
          }
        case 249: break;
        case 19: 
          { line = yyline; column = yycolumn; return AbreParentesis;
          }
        case 250: break;
        case 34: 
          { line = yyline; column = yycolumn; return Divida;
          }
        case 251: break;
        case 75: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Break;
          }
        case 252: break;
        case 59: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Enum;
          }
        case 253: break;
        case 118: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint256;
          }
        case 254: break;
        case 2: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Identificador;
          }
        case 255: break;
        case 8: 
          { line = yyline; column = yycolumn; return Resta;
          }
        case 256: break;
        case 111: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Returns;
          }
        case 257: break;
        case 27: 
          { line = yyline; column = yycolumn; return PuntoYComa;
          }
        case 258: break;
        case 21: 
          { line = yyline; column = yycolumn; return AbreCorchete;
          }
        case 259: break;
        case 42: 
          { line = yyline; column = yycolumn; return CorrerALaIzquierda;
          }
        case 260: break;
        case 3: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Numero;
          }
        case 261: break;
        case 33: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Do;
          }
        case 262: break;
        case 116: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes64;
          }
        case 263: break;
        case 113: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte256;
          }
        case 264: break;
        case 65: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Call;
          }
        case 265: break;
        case 96: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte16;
          }
        case 266: break;
        case 125: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Transfer;
          }
        case 267: break;
        case 35: 
          { line = yyline; column = yycolumn; return Multiplique;
          }
        case 268: break;
        case 58: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_From;
          }
        case 269: break;
        case 14: 
          { line = yyline; column = yycolumn; return MenorQue;
          }
        case 270: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
