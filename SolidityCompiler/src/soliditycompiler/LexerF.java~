/* The following code was generated by JFlex 1.4.3 on 16/7/20 16:02 */

package soliditycompiler;
import static soliditycompiler.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/7/20 16:02 from the specification file
 * <tt>C:/Users/adria/Documents/OneDrive - Estudiantes ITCR/I SEMESTRE 2020/COMPI/Proyecto/Project-C/SolidityCompiler/src/soliditycompiler/ScannerF.flex</tt>
 */
class LexerF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\50\2\0\1\3\22\0\1\51\1\54\1\77\2\4"+
    "\1\64\1\55\1\77\1\66\1\67\1\47\1\65\1\5\1\53\1\52"+
    "\1\46\1\2\1\14\1\11\1\16\1\12\1\17\1\15\1\2\1\13"+
    "\1\2\1\75\1\76\1\61\1\57\1\62\1\74\1\0\1\100\1\100"+
    "\1\100\1\100\1\100\1\100\7\1\1\102\1\1\1\40\12\1\1\70"+
    "\1\101\1\71\1\56\1\1\1\0\1\24\1\27\1\33\1\25\1\21"+
    "\1\20\1\37\1\42\1\6\1\1\1\31\1\22\1\35\1\7\1\30"+
    "\1\36\1\1\1\26\1\23\1\10\1\34\1\41\1\44\1\43\1\32"+
    "\1\45\1\72\1\60\1\73\1\63\42\0\1\4\35\0\1\4\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\1\1\2"+
    "\3\34\1\35\1\2\1\36\17\2\1\37\3\2\1\40"+
    "\27\2\1\4\1\0\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\34\1\56\2\0\1\57\2\0\1\60\7\2\1\61"+
    "\36\2\1\62\2\2\1\63\2\2\1\1\1\0\1\55"+
    "\2\0\1\57\1\64\1\65\1\66\6\2\1\67\1\70"+
    "\2\2\1\71\1\2\1\72\1\2\1\73\2\2\1\74"+
    "\6\2\1\75\3\2\1\76\1\77\1\2\1\100\2\2"+
    "\1\101\10\2\1\102\1\0\3\2\3\0\1\103\1\0"+
    "\2\2\1\104\1\105\1\106\4\2\1\107\1\2\1\110"+
    "\4\2\1\111\5\2\1\112\1\113\1\114\1\115\3\2"+
    "\1\116\1\117\4\2\1\120\1\121\1\122\13\2\1\0"+
    "\1\123\1\124\1\125\1\0\1\126\1\0\1\1\1\103"+
    "\1\127\1\130\1\2\1\131\1\2\1\132\1\2\1\133"+
    "\1\134\3\2\1\135\1\2\1\136\3\2\1\137\1\140"+
    "\1\141\1\142\1\143\1\144\11\2\1\145\1\146\1\147"+
    "\1\150\5\2\1\151\1\152\1\153\1\0\1\126\3\2"+
    "\1\154\1\2\1\155\1\2\1\156\1\157\1\160\1\161"+
    "\2\2\1\162\1\163\1\164\4\2\1\165\1\166\1\167"+
    "\1\170\1\2\1\171\1\172\1\0\1\1\1\173\1\174"+
    "\1\175\1\176\1\2\1\177\1\200\1\201\1\202\1\203"+
    "\4\2\1\204\2\2\1\205\1\206";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\103\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\103\0\103\0\u08a3\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\206\0\u0afe"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\206\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\206\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\u163f\0\103\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\206\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\206"+
    "\0\u21c3\0\u2206\0\206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2312"+
    "\0\u2355\0\u2398\0\u174b\0\u23db\0\u096c\0\u096c\0\u241e\0\u2461"+
    "\0\u24a4\0\u24e7\0\u252a\0\u256d\0\206\0\206\0\u25b0\0\u25f3"+
    "\0\206\0\u2636\0\206\0\u2679\0\206\0\u26bc\0\u26ff\0\206"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\206\0\u28d4"+
    "\0\u2917\0\u295a\0\206\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\206\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96"+
    "\0\u2ed9\0\103\0\u2f1c\0\u2f5f\0\u2fa2\0\u096c\0\u096c\0\u096c"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\206\0\u30f1\0\206\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\206\0\u3240\0\u3283\0\u32c6\0\u3309"+
    "\0\u334c\0\206\0\u338f\0\u096c\0\u096c\0\u33d2\0\u3415\0\u3458"+
    "\0\u349b\0\206\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u096c"+
    "\0\u096c\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\206\0\206\0\206"+
    "\0\u3951\0\u2e53\0\u3994\0\u39d7\0\u2312\0\u096c\0\u096c\0\u3a1a"+
    "\0\206\0\u3a5d\0\206\0\u3aa0\0\206\0\206\0\u3ae3\0\u3b26"+
    "\0\u3b69\0\206\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u096c"+
    "\0\u096c\0\u096c\0\u3cfb\0\u096c\0\u096c\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u096c\0\u096c"+
    "\0\u096c\0\206\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\206"+
    "\0\206\0\u40e8\0\u412b\0\u22cf\0\u416e\0\u41b1\0\u41f4\0\206"+
    "\0\u4237\0\206\0\u427a\0\206\0\206\0\u096c\0\u096c\0\u42bd"+
    "\0\u4300\0\u096c\0\u096c\0\u096c\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u096c\0\u096c\0\206\0\206\0\u444f\0\206\0\206\0\u4492"+
    "\0\u3994\0\206\0\206\0\206\0\206\0\u44d5\0\u096c\0\u096c"+
    "\0\206\0\206\0\206\0\u4518\0\u455b\0\u459e\0\u45e1\0\206"+
    "\0\u4624\0\u4667\0\206\0\206";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\5\1\6\1\3"+
    "\1\7\7\4\1\10\1\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\2\3\1\17\1\20\1\21\1\22\1\23"+
    "\1\3\1\24\1\25\1\26\1\3\1\27\1\3\1\30"+
    "\1\31\2\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\3\1\60\1\3\104\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\63\1\4\3\0\3\63\7\4"+
    "\1\63\1\64\24\63\4\0\1\65\25\0\1\63\1\0"+
    "\1\63\3\0\1\5\1\0\1\5\42\0\2\5\32\0"+
    "\1\3\1\61\1\0\2\62\1\3\1\66\1\3\7\61"+
    "\1\67\14\3\1\70\10\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\6\3\1\71\13\3\1\72\3\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\1\73\2\3\7\61\4\3\1\74"+
    "\1\3\1\75\1\3\1\76\3\3\1\77\11\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\1\3\1\100\1\101\7\61\2\3"+
    "\1\102\23\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\2\3\1\103"+
    "\7\61\1\3\1\104\6\3\1\105\14\3\1\106\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\3\3\1\107\1\3"+
    "\1\110\20\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\3\1\111\2\3\1\112\3\3\1\113\15\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\1\3\1\114\24\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\4\3\1\115"+
    "\1\3\1\116\1\3\1\117\1\3\1\120\13\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\1\3\1\121\24\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\4\3\1\122"+
    "\3\3\1\123\15\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\1\124"+
    "\2\3\7\61\1\125\25\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\1\126\2\3\7\61\4\3\1\127\3\3\1\130\15\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\4\3\1\131"+
    "\1\3\1\132\5\3\1\133\11\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\6\3\1\134\17\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\1\135\2\3\7\61\4\3\1\136\21\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\1\3\1\137"+
    "\6\3\1\140\15\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\141\20\3\1\142\3\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\46\0\1\143\1\144"+
    "\7\0\1\145\72\0\1\36\7\0\1\146\25\0\1\65"+
    "\6\0\7\65\142\0\1\147\102\0\1\150\100\0\1\151"+
    "\104\0\1\152\103\0\1\153\101\0\1\154\1\0\1\155"+
    "\100\0\1\156\2\0\1\157\77\0\1\160\24\0\2\57"+
    "\1\0\43\57\2\0\1\57\1\0\2\57\2\0\2\57"+
    "\3\0\1\57\7\0\1\57\1\0\1\57\1\161\1\57"+
    "\1\162\1\57\7\0\1\163\24\0\1\164\6\0\1\165"+
    "\40\0\2\61\3\0\40\61\32\0\1\61\1\0\1\61"+
    "\1\0\1\62\2\0\5\62\7\0\27\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\2\63\3\0\40\63\32\0\1\63"+
    "\1\0\1\63\1\0\1\63\1\166\3\0\3\63\7\166"+
    "\26\63\5\0\1\167\24\0\1\63\1\0\1\63\2\0"+
    "\1\65\6\0\7\65\1\0\1\170\62\0\1\3\1\61"+
    "\1\0\2\62\2\3\1\171\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\16\3\1\172\7\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\4\3\1\173\7\3"+
    "\1\174\11\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\175\2\3"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\3\1\176"+
    "\1\3\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\2\3\1\177\23\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\10\3\1\200\15\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\6\3\1\201\17\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\1\3\1\202\1\3\7\61\26\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\14\3\1\203\11\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\22\3\1\204"+
    "\3\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\3\3"+
    "\1\205\22\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\6\3\1\206\17\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\1\3"+
    "\1\207\1\3\7\61\13\3\1\210\12\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\2\3\1\211\23\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\4\3\1\212\21\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\5\3\1\213"+
    "\20\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\2\3"+
    "\1\214\23\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\12\3\1\215\13\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\2\3"+
    "\1\216\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\2\3\1\217\23\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\1\3\1\220\24\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\10\3\1\221\15\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\2\3\1\222\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\4\3\1\223\21\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\2\3\1\224\23\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\1\3\1\225\1\3\7\61"+
    "\26\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\1\3\1\226\1\3"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\227\2\3"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\3\1\230"+
    "\1\3\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\16\3\1\231\7\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\5\3\1\232\20\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\12\3\1\233\13\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\1\234\2\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\7\3\1\235\16\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\4\3\1\236\21\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\1\3\1\237"+
    "\24\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\6\3"+
    "\1\240\17\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\23\3\1\241\2\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\14\3\1\242\11\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\1\243\2\3\7\61\1\3\1\244\24\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\1\245\2\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\50\143\1\0\32\143"+
    "\47\0\1\246\33\0\1\247\2\57\1\247\43\57\1\247"+
    "\1\0\1\57\1\247\2\57\2\247\2\57\3\247\1\57"+
    "\7\247\1\57\1\247\1\57\1\250\1\57\1\162\1\57"+
    "\102\0\1\251\102\0\1\252\1\0\1\63\1\166\3\0"+
    "\3\63\7\166\26\63\32\0\1\63\1\0\1\63\2\0"+
    "\1\253\6\0\7\253\65\0\1\253\6\0\7\253\33\0"+
    "\1\167\30\0\1\3\1\61\1\0\2\62\3\3\1\254"+
    "\1\255\1\256\1\257\1\260\1\261\1\61\1\3\1\262"+
    "\24\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\10\3"+
    "\1\263\15\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\3\1\264"+
    "\1\3\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\265\24\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\3\3\1\266\22\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\1\3\1\267\1\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\3\3\1\270\22\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\15\3\1\271\10\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\13\3\1\272"+
    "\12\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\15\3"+
    "\1\273\10\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\3\1\274\24\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\275\24\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\1\276\2\3\7\61\14\3\1\277\11\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\5\3\1\300\20\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\10\3\1\301\15\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\1\302\2\3\7\61\26\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\7\3\1\303"+
    "\16\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\6\3"+
    "\1\304\17\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\3\1\305\15\3\1\306\6\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\3\3\1\307\22\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\14\3\1\310\11\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\4\3\1\311\21\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\4\3\1\312"+
    "\21\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\2\3"+
    "\1\313\23\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\3\1\314\24\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\6\3\1\315\17\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\2\3\1\316\23\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\2\3\1\317\7\61\3\3\1\320\22\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\2\3\1\321\7\61\26\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\23\3\1\322\2\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\14\3\1\323"+
    "\11\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\16\3"+
    "\1\324\7\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\5\3\1\325\20\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\4\3\1\326\21\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\21\3\1\327\4\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\2\3\1\330\23\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\17\3\1\331\6\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\24\3\1\332\1\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\26\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\333\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\6\3\1\334\17\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\11\3\1\335"+
    "\14\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\2\3"+
    "\1\336\23\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\337\2\246\1\337\43\246\1\340\1\341\1\246"+
    "\1\337\2\246\2\337\2\246\3\337\1\246\7\337\1\246"+
    "\1\337\1\246\1\337\3\246\1\0\2\247\1\0\43\247"+
    "\2\0\1\247\1\0\2\247\2\0\2\247\3\0\1\247"+
    "\7\0\1\247\1\0\1\247\1\342\1\247\1\343\1\247"+
    "\102\0\1\165\102\0\1\163\1\0\2\61\3\0\11\61"+
    "\1\344\26\61\32\0\1\61\1\0\1\61\1\0\2\61"+
    "\3\0\3\61\1\345\3\61\1\346\30\61\32\0\1\61"+
    "\1\0\1\61\1\0\2\61\3\0\4\61\1\347\33\61"+
    "\32\0\1\61\1\0\1\61\1\0\2\61\3\0\3\61"+
    "\1\350\34\61\32\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\6\3\1\351\17\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\6\3\1\352"+
    "\17\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\3\3"+
    "\1\353\22\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\3\1\354\24\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\355\24\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\2\3\1\356\7\61\26\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\6\3\1\357\17\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\1\3\1\360\1\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\13\3\1\361\12\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\1\3\1\362\1\3\7\61\26\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\5\3\1\363"+
    "\20\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\10\3"+
    "\1\364\15\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\3\1\365\24\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\2\3"+
    "\1\366\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\4\3\1\367\21\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\6\3\1\370\17\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\1\3\1\371\1\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\11\3\1\372\14\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\1\373\1\374\1\375\1\376"+
    "\1\377\1\u0100\1\61\3\3\1\u0101\22\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\3\3\1\u0102\22\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\13\3\1\u0103\12\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\1\u0104\2\3\7\61\6\3"+
    "\1\u0105\17\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\2\3\1\u0106"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\1\u0107"+
    "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\61\26\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\1\3\1\u010d\24\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\2\3\1\u010e\7\61\26\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\1\u010f\2\3\7\61\26\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\1\u0110\2\3\7\61\26\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\7\3\1\u0111"+
    "\16\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\4\3"+
    "\1\u0112\21\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\u0113\2\3"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\15\3\1\u0114\10\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\2\0\1\u0115\6\0\7\u0115\60\0\1\u0115"+
    "\3\0\1\3\1\61\1\0\2\62\3\3\7\61\3\3"+
    "\1\u0116\22\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\3\3\1\u0117\22\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\u0118\24\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\47\337\1\340\1\u0119\100\337\1\u011a"+
    "\1\340\1\u0119\32\337\47\u011b\1\u011c\33\u011b\50\247\1\0"+
    "\26\247\1\u011d\1\247\1\343\1\247\1\0\2\61\3\0"+
    "\7\61\1\u011e\30\61\32\0\1\61\1\0\1\61\1\0"+
    "\2\61\3\0\5\61\1\u011f\32\61\32\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\0\2\62\1\3\1\u0120"+
    "\1\3\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\2\3"+
    "\1\u0121\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\u0122\25\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\12\3\1\u0123\13\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\1\u0124\2\3\7\61\26\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\17\3\1\u0125\6\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\2\3\1\u0126\7\61\26\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\5\3\1\u0127\20\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\1\u0128\2\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\3\3\1\u0129\22\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\1\3\1\u012a\24\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\2\3\1\u012b\7\61\26\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\1\3\1\u012c\1\3\7\61"+
    "\26\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\13\3"+
    "\1\u012d\12\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\2\61\3\0\11\61\1\u012e\26\61\32\0"+
    "\1\61\1\0\1\61\1\0\2\61\3\0\3\61\1\u012f"+
    "\3\61\1\u0130\30\61\32\0\1\61\1\0\1\61\1\0"+
    "\2\61\3\0\4\61\1\u0131\33\61\32\0\1\61\1\0"+
    "\1\61\1\0\2\61\3\0\3\61\1\u0132\34\61\32\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\1\u0133\1\u0134\1\u0135\1\u0136\1\u0137\1\u0138\1\61"+
    "\26\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\10\3"+
    "\1\u0139\15\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\1\3\1\u013a"+
    "\1\3\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\4\3\1\u013b\21\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\6\3\1\u013c\17\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\2\61\3\0\11\61"+
    "\1\u013d\26\61\32\0\1\61\1\0\1\61\1\0\2\61"+
    "\3\0\3\61\1\u013e\3\61\1\u013f\30\61\32\0\1\61"+
    "\1\0\1\61\1\0\2\61\3\0\4\61\1\u0140\33\61"+
    "\32\0\1\61\1\0\1\61\1\0\2\61\3\0\3\61"+
    "\1\u0141\34\61\32\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\5\3\1\u0142\20\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\1\3\1\u0143"+
    "\24\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\1\3\1\u0144\1\3"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\1\u0145\25\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\2\3\1\u0146\23\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\2\3"+
    "\1\u0147\7\61\26\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\13\3\1\u0148\12\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\4\3\1\u0149\21\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\2\0\1\u0115\6\0\7\u0115"+
    "\57\0\1\u014a\1\u0115\2\0\47\u011b\1\340\102\u011b\1\u014b"+
    "\33\u011b\1\337\2\246\1\337\42\246\1\u014c\1\340\1\341"+
    "\1\246\1\337\2\246\2\337\2\246\3\337\1\246\7\337"+
    "\1\246\1\337\1\246\1\337\3\246\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\4\3\1\u014d\21\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\1\3\1\u014e\24\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\10\3\1\u014f"+
    "\15\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\3\3"+
    "\1\u0150\22\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\2\3\1\u0151"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\3\3\1\u0152\22\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\u0153\24\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\3\3\1\u0154\22\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\1\3\1\u0155\24\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\2\61\3\0"+
    "\7\61\1\u0156\30\61\32\0\1\61\1\0\1\61\1\0"+
    "\2\61\3\0\5\61\1\u0157\32\61\32\0\1\61\1\0"+
    "\1\61\1\0\2\61\3\0\11\61\1\u0158\26\61\32\0"+
    "\1\61\1\0\1\61\1\0\2\61\3\0\3\61\1\u0159"+
    "\3\61\1\u015a\30\61\32\0\1\61\1\0\1\61\1\0"+
    "\2\61\3\0\4\61\1\u015b\33\61\32\0\1\61\1\0"+
    "\1\61\1\0\2\61\3\0\3\61\1\u015c\34\61\32\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\5\3\1\u015d\20\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\14\3\1\u015e\11\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\13\3\1\u015f\12\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\14\3\1\u0160\11\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\2\61\3\0\7\61\1\u0161\30\61\32\0\1\61\1\0"+
    "\1\61\1\0\2\61\3\0\5\61\1\u0162\32\61\32\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\0\2\62"+
    "\3\3\7\61\3\3\1\u0163\22\3\1\62\4\0\2\62"+
    "\2\0\2\62\3\0\1\62\7\0\1\62\1\0\1\62"+
    "\1\0\1\3\1\62\1\3\1\0\1\3\1\61\1\0"+
    "\2\62\3\3\7\61\17\3\1\u0164\6\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\1\u0165\2\3\7\61\26\3\1\62\4\0"+
    "\2\62\2\0\2\62\3\0\1\62\7\0\1\62\1\0"+
    "\1\62\1\0\1\3\1\62\1\3\1\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\1\3\1\u0166\24\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\1\3\1\u0167\24\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\101\0"+
    "\1\u0168\1\0\46\u011b\1\u0169\1\u014b\33\u011b\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\2\3\1\u016a\23\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\6\3\1\u016b"+
    "\17\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\1\3\1\u016c\1\3"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\12\3\1\u016d\13\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\13\3\1\u016e\12\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\1\0\2\61\3\0\7\61\1\u016f"+
    "\30\61\32\0\1\61\1\0\1\61\1\0\2\61\3\0"+
    "\5\61\1\u0170\32\61\32\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\1\3\1\u0171"+
    "\24\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\1\3"+
    "\1\u0172\24\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\2\3\1\u0173"+
    "\7\61\26\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\13\3\1\u0174\12\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\1\3\1\u0175\24\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3\7\0\1\u014a\74\0\1\3\1\61"+
    "\1\0\2\62\3\3\7\61\4\3\1\u0176\21\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\2\3\1\u0177\7\61\26\3\1\62"+
    "\4\0\2\62\2\0\2\62\3\0\1\62\7\0\1\62"+
    "\1\0\1\62\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\61\1\0\2\62\3\3\7\61\6\3\1\u0178\17\3"+
    "\1\62\4\0\2\62\2\0\2\62\3\0\1\62\7\0"+
    "\1\62\1\0\1\62\1\0\1\3\1\62\1\3\1\0"+
    "\1\3\1\61\1\0\2\62\3\3\7\61\2\3\1\u0179"+
    "\23\3\1\62\4\0\2\62\2\0\2\62\3\0\1\62"+
    "\7\0\1\62\1\0\1\62\1\0\1\3\1\62\1\3"+
    "\1\0\1\3\1\61\1\0\2\62\3\3\7\61\10\3"+
    "\1\u017a\15\3\1\62\4\0\2\62\2\0\2\62\3\0"+
    "\1\62\7\0\1\62\1\0\1\62\1\0\1\3\1\62"+
    "\1\3\1\0\1\3\1\61\1\0\2\62\3\3\7\61"+
    "\2\3\1\u017b\23\3\1\62\4\0\2\62\2\0\2\62"+
    "\3\0\1\62\7\0\1\62\1\0\1\62\1\0\1\3"+
    "\1\62\1\3\1\0\1\3\1\61\1\0\2\62\3\3"+
    "\7\61\6\3\1\u017c\17\3\1\62\4\0\2\62\2\0"+
    "\2\62\3\0\1\62\7\0\1\62\1\0\1\62\1\0"+
    "\1\3\1\62\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18090];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\1\11\4\1\2\11\1\1\11\11"+
    "\65\1\1\0\15\11\1\1\1\11\2\0\1\1\2\0"+
    "\56\1\1\0\1\1\2\0\60\1\1\0\3\1\3\0"+
    "\1\11\1\0\61\1\1\0\3\1\1\0\1\1\1\0"+
    "\57\1\1\0\34\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Szabo;
          }
        case 135: break;
        case 45: 
          { line = yyline; column = yycolumn; lexeme = yytext();return Cadena;
          }
        case 136: break;
        case 22: 
          { line = yyline; column = yycolumn; return CierraCorchete;
          }
        case 137: break;
        case 43: 
          { line = yyline; column = yycolumn; return CorrerALaDerecha;
          }
        case 138: break;
        case 63: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte;
          }
        case 139: break;
        case 75: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte2;
          }
        case 140: break;
        case 77: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte8;
          }
        case 141: break;
        case 23: 
          { line = yyline; column = yycolumn; return AbreLlave;
          }
        case 142: break;
        case 106: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Pragma;
          }
        case 143: break;
        case 81: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint4;
          }
        case 144: break;
        case 9: 
          { line = yyline; column = yycolumn; return NotLogico;
          }
        case 145: break;
        case 16: 
          { line = yyline; column = yycolumn; return NotBits;
          }
        case 146: break;
        case 96: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte64;
          }
        case 147: break;
        case 36: 
          { line = yyline; column = yycolumn; return Diferencia;
          }
        case 148: break;
        case 24: 
          { line = yyline; column = yycolumn; return CierraLlave;
          }
        case 149: break;
        case 103: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint32;
          }
        case 150: break;
        case 104: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Ufixed;
          }
        case 151: break;
        case 51: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Wei;
          }
        case 152: break;
        case 7: 
          { line = yyline; column = yycolumn; return Punto;
          }
        case 153: break;
        case 15: 
          { line = yyline; column = yycolumn; return MayorQue;
          }
        case 154: break;
        case 59: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Else;
          }
        case 155: break;
        case 129: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Callcode;
          }
        case 156: break;
        case 134: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Constructor;
          }
        case 157: break;
        case 90: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Finney;
          }
        case 158: break;
        case 4: 
          { /*Ignore*/
          }
        case 159: break;
        case 99: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes4;
          }
        case 160: break;
        case 68: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int16;
          }
        case 161: break;
        case 40: 
          { line = yyline; column = yycolumn; return MenorOIgualQue;
          }
        case 162: break;
        case 30: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_If;
          }
        case 163: break;
        case 121: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Payable;
          }
        case 164: break;
        case 88: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int128;
          }
        case 165: break;
        case 35: 
          { line = yyline; column = yycolumn; return Reste;
          }
        case 166: break;
        case 133: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Delgatecall;
          }
        case 167: break;
        case 47: 
          { line = yyline; column = yycolumn; lexeme = yytext(); return Cientifico;
          }
        case 168: break;
        case 25: 
          { line = yyline; column = yycolumn; return Interrogacion;
          }
        case 169: break;
        case 6: 
          { line = yyline; column = yycolumn; return Multiplicacion;
          }
        case 170: break;
        case 60: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Send;
          }
        case 171: break;
        case 71: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_False;
          }
        case 172: break;
        case 61: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Days;
          }
        case 173: break;
        case 56: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_This;
          }
        case 174: break;
        case 20: 
          { line = yyline; column = yycolumn; return CierraParentesis;
          }
        case 175: break;
        case 28: 
          { line = yyline; column = yycolumn;  return Error;
          }
        case 176: break;
        case 37: 
          { line = yyline; column = yycolumn; return AndLogico;
          }
        case 177: break;
        case 92: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Struct;
          }
        case 178: break;
        case 48: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int;
          }
        case 179: break;
        case 105: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Public;
          }
        case 180: break;
        case 94: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Return;
          }
        case 181: break;
        case 93: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Delete;
          }
        case 182: break;
        case 18: 
          { line = yyline; column = yycolumn; return Suma;
          }
        case 183: break;
        case 120: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Mapping;
          }
        case 184: break;
        case 116: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes32;
          }
        case 185: break;
        case 86: 
          { line = yyline; column = yycolumn; return ComentarioBloque;
          }
        case 186: break;
        case 111: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Balance;
          }
        case 187: break;
        case 123: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Internal;
          }
        case 188: break;
        case 31: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_As;
          }
        case 189: break;
        case 69: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int64;
          }
        case 190: break;
        case 126: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Solidity;
          }
        case 191: break;
        case 50: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Var;
          }
        case 192: break;
        case 53: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int4;
          }
        case 193: break;
        case 66: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_View;
          }
        case 194: break;
        case 80: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint2;
          }
        case 195: break;
        case 5: 
          { line = yyline; column = yycolumn; return Division;
          }
        case 196: break;
        case 108: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Seconds;
          }
        case 197: break;
        case 55: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_True;
          }
        case 198: break;
        case 128: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes128;
          }
        case 199: break;
        case 82: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint8;
          }
        case 200: break;
        case 122: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Private;
          }
        case 201: break;
        case 26: 
          { line = yyline; column = yycolumn; return DosPuntos;
          }
        case 202: break;
        case 87: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int256;
          }
        case 203: break;
        case 78: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes;
          }
        case 204: break;
        case 72: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Ether;
          }
        case 205: break;
        case 17: 
          { line = yyline; column = yycolumn; return Porcentaje;
          }
        case 206: break;
        case 49: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_For;
          }
        case 207: break;
        case 98: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes2;
          }
        case 208: break;
        case 42: 
          { line = yyline; column = yycolumn; return MayorOIgualQue;
          }
        case 209: break;
        case 97: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte32;
          }
        case 210: break;
        case 101: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint16;
          }
        case 211: break;
        case 100: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes8;
          }
        case 212: break;
        case 39: 
          { line = yyline; column = yycolumn;return OrLogico;
          }
        case 213: break;
        case 29: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Flotante;
          }
        case 214: break;
        case 12: 
          { line = yyline; column = yycolumn; return Asignacion;
          }
        case 215: break;
        case 79: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Years;
          }
        case 216: break;
        case 46: 
          { line = yyline; column = yycolumn; return Escape;
          }
        case 217: break;
        case 118: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint128;
          }
        case 218: break;
        case 119: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Minutes;
          }
        case 219: break;
        case 84: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Weeks;
          }
        case 220: break;
        case 67: 
          { line = yyline; column = yycolumn; lexeme = yytext(); return Error;
          }
        case 221: break;
        case 11: 
          { line = yyline; column = yycolumn; return Potencia;
          }
        case 222: break;
        case 113: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte128;
          }
        case 223: break;
        case 83: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Unit_Hours;
          }
        case 224: break;
        case 44: 
          { line = yyline; column = yycolumn; return Sume;
          }
        case 225: break;
        case 38: 
          { line = yyline; column = yycolumn; return Comparacion;
          }
        case 226: break;
        case 130: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Continue;
          }
        case 227: break;
        case 132: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Moddifier;
          }
        case 228: break;
        case 127: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes256;
          }
        case 229: break;
        case 13: 
          { line = yyline; column = yycolumn; return OrBits;
          }
        case 230: break;
        case 10: 
          { line = yyline; column = yycolumn; return AndBits;
          }
        case 231: break;
        case 107: 
          { line = yyline; column = yycolumn; lexeme = yytext(); return Hexadecimal;
          }
        case 232: break;
        case 52: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int2;
          }
        case 233: break;
        case 89: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Import;
          }
        case 234: break;
        case 102: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint64;
          }
        case 235: break;
        case 76: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte4;
          }
        case 236: break;
        case 54: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int8;
          }
        case 237: break;
        case 91: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_String;
          }
        case 238: break;
        case 114: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes16;
          }
        case 239: break;
        case 85: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_While;
          }
        case 240: break;
        case 1: 
          { line = yyline; column = yycolumn; return Error;
          }
        case 241: break;
        case 131: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Contract;
          }
        case 242: break;
        case 125: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Function;
          }
        case 243: break;
        case 109: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Address;
          }
        case 244: break;
        case 65: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint;
          }
        case 245: break;
        case 70: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Int32;
          }
        case 246: break;
        case 62: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bool;
          }
        case 247: break;
        case 19: 
          { line = yyline; column = yycolumn; return AbreParentesis;
          }
        case 248: break;
        case 33: 
          { line = yyline; column = yycolumn; return Divida;
          }
        case 249: break;
        case 74: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Break;
          }
        case 250: break;
        case 58: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Enum;
          }
        case 251: break;
        case 117: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Uint256;
          }
        case 252: break;
        case 2: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Identificador;
          }
        case 253: break;
        case 8: 
          { line = yyline; column = yycolumn; return Resta;
          }
        case 254: break;
        case 110: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Returns;
          }
        case 255: break;
        case 27: 
          { line = yyline; column = yycolumn; return PuntoYComa;
          }
        case 256: break;
        case 21: 
          { line = yyline; column = yycolumn; return AbreCorchete;
          }
        case 257: break;
        case 41: 
          { line = yyline; column = yycolumn; return CorrerALaIzquierda;
          }
        case 258: break;
        case 3: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Numero;
          }
        case 259: break;
        case 32: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Do;
          }
        case 260: break;
        case 115: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Bytes64;
          }
        case 261: break;
        case 112: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte256;
          }
        case 262: break;
        case 64: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Call;
          }
        case 263: break;
        case 95: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_Byte16;
          }
        case 264: break;
        case 124: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Trans_Transfer;
          }
        case 265: break;
        case 34: 
          { line = yyline; column = yycolumn; return Multiplique;
          }
        case 266: break;
        case 57: 
          { line = yyline; column = yycolumn; lexeme=yytext(); return Res_From;
          }
        case 267: break;
        case 14: 
          { line = yyline; column = yycolumn; return MenorQue;
          }
        case 268: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
