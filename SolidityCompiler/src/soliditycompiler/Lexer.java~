/* The following code was generated by JFlex 1.4.3 on 27/5/20 19:20 */

package soliditycompiler;
import static soliditycompiler.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/5/20 19:20 from the specification file
 * <tt>C:/Users/adria/Documents/OneDrive - Estudiantes ITCR/I SEMESTRE 2020/COMPI/Proyecto/Project-C/SolidityCompiler/src/soliditycompiler/scanner.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\51\2\0\1\3\22\0\1\3\1\52\3\0\1\62"+
    "\1\53\1\0\1\44\1\47\1\63\1\64\1\3\1\45\1\46\1\50"+
    "\1\2\1\12\1\7\1\14\1\10\1\15\1\13\1\2\1\11\1\2"+
    "\1\70\1\71\1\57\1\55\1\60\1\67\1\0\17\1\1\40\12\1"+
    "\1\65\1\0\1\66\1\54\1\1\1\0\1\22\1\25\1\31\1\23"+
    "\1\17\1\16\1\37\1\34\1\4\1\1\1\27\1\20\1\33\1\5"+
    "\1\26\1\36\1\1\1\24\1\21\1\6\1\32\1\41\1\42\1\35"+
    "\1\30\1\43\1\0\1\56\1\0\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\11\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\2\1\31\50\2\1\0"+
    "\1\32\1\4\1\33\1\34\1\12\1\35\1\15\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\31\42\2\1\44"+
    "\2\2\2\0\1\31\13\2\1\45\11\2\1\31\1\45"+
    "\2\2\1\31\10\2\1\0\1\3\27\2\1\30\5\2"+
    "\1\31\20\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\72\0\u05e4\0\u061e\0\u0658\0\72\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\72\0\72\0\u077a\0\u07b4\0\72"+
    "\0\72\0\72\0\72\0\72\0\u05aa\0\u07ee\0\164\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\72\0\u1172\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\164\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\164\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\72\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562"+
    "\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732"+
    "\0\u276c\0\72\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u1294"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\7\4"+
    "\1\10\1\11\1\3\1\12\1\13\1\14\1\15\1\16"+
    "\2\3\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\3\1\25\1\26\1\27\1\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\73\0\2\3\1\0\40\3\30\0"+
    "\1\4\4\0\7\4\30\0\1\55\26\0\1\5\45\0"+
    "\1\5\21\0\2\3\1\0\1\3\1\56\10\3\1\57"+
    "\14\3\1\60\10\3\27\0\2\3\1\0\20\3\1\61"+
    "\7\3\1\62\7\3\27\0\2\3\1\0\1\63\15\3"+
    "\1\64\1\3\1\65\1\3\1\66\3\3\1\67\11\3"+
    "\27\0\2\3\1\0\1\3\1\70\1\71\11\3\1\72"+
    "\23\3\27\0\2\3\1\0\2\3\1\73\10\3\1\74"+
    "\6\3\1\75\14\3\1\76\27\0\2\3\1\0\15\3"+
    "\1\57\1\3\1\77\20\3\27\0\2\3\1\0\13\3"+
    "\1\100\2\3\1\101\3\3\1\57\15\3\27\0\2\3"+
    "\1\0\13\3\1\102\24\3\27\0\2\3\1\0\16\3"+
    "\1\103\1\3\1\104\1\3\1\105\1\3\1\106\13\3"+
    "\27\0\2\3\1\0\13\3\1\107\24\3\27\0\2\3"+
    "\1\0\16\3\1\110\3\3\1\111\15\3\27\0\2\3"+
    "\1\0\1\112\11\3\1\113\25\3\27\0\2\3\1\0"+
    "\1\114\15\3\1\115\3\3\1\116\15\3\27\0\2\3"+
    "\1\0\13\3\1\117\6\3\1\120\15\3\27\0\2\3"+
    "\1\0\16\3\1\121\1\3\1\122\5\3\1\123\11\3"+
    "\27\0\2\3\1\0\20\3\1\124\17\3\27\0\2\3"+
    "\1\0\1\125\15\3\1\66\21\3\27\0\2\3\1\0"+
    "\13\3\1\126\14\3\1\127\7\3\73\0\1\130\101\0"+
    "\1\131\16\0\1\55\4\0\7\55\124\0\1\132\4\0"+
    "\1\133\71\0\1\134\67\0\1\135\73\0\1\136\72\0"+
    "\1\137\70\0\1\140\1\0\1\141\67\0\1\142\2\0"+
    "\1\143\66\0\1\144\5\0\1\37\63\0\1\145\15\0"+
    "\2\3\1\0\2\3\1\146\35\3\27\0\2\3\1\0"+
    "\32\3\1\147\5\3\27\0\2\3\1\0\16\3\1\150"+
    "\7\3\1\151\11\3\27\0\2\3\1\0\1\152\37\3"+
    "\27\0\2\3\1\0\1\3\1\153\36\3\27\0\2\3"+
    "\1\0\14\3\1\72\23\3\27\0\2\3\1\0\22\3"+
    "\1\154\15\3\27\0\2\3\1\0\20\3\1\57\17\3"+
    "\27\0\2\3\1\0\1\3\1\155\36\3\27\0\2\3"+
    "\1\0\26\3\1\154\11\3\27\0\2\3\1\0\30\3"+
    "\1\156\7\3\27\0\2\3\1\0\15\3\1\151\22\3"+
    "\27\0\2\3\1\0\20\3\1\157\17\3\27\0\2\3"+
    "\1\0\1\3\1\160\23\3\1\161\12\3\27\0\2\3"+
    "\1\0\14\3\1\162\23\3\27\0\2\3\1\0\16\3"+
    "\1\163\21\3\27\0\2\3\1\0\17\3\1\164\20\3"+
    "\27\0\2\3\1\0\14\3\1\165\23\3\27\0\2\3"+
    "\1\0\24\3\1\166\13\3\27\0\2\3\1\0\2\3"+
    "\1\167\35\3\27\0\2\3\1\0\14\3\1\170\23\3"+
    "\27\0\2\3\1\0\13\3\1\171\24\3\27\0\2\3"+
    "\1\0\22\3\1\172\15\3\27\0\2\3\1\0\2\3"+
    "\1\173\35\3\27\0\2\3\1\0\16\3\1\174\21\3"+
    "\27\0\2\3\1\0\14\3\1\175\23\3\27\0\2\3"+
    "\1\0\1\3\1\176\36\3\27\0\2\3\1\0\1\3"+
    "\1\177\36\3\27\0\2\3\1\0\1\200\37\3\27\0"+
    "\2\3\1\0\1\3\1\201\36\3\27\0\2\3\1\0"+
    "\32\3\1\202\5\3\27\0\2\3\1\0\17\3\1\203"+
    "\20\3\27\0\2\3\1\0\31\3\1\57\6\3\27\0"+
    "\2\3\1\0\26\3\1\174\11\3\27\0\2\3\1\0"+
    "\24\3\1\204\13\3\27\0\2\3\1\0\1\205\37\3"+
    "\27\0\2\3\1\0\21\3\1\206\16\3\27\0\2\3"+
    "\1\0\16\3\1\207\21\3\27\0\2\3\1\0\13\3"+
    "\1\210\24\3\27\0\2\3\1\0\1\211\12\3\1\212"+
    "\24\3\27\0\2\3\1\0\1\213\37\3\30\0\1\214"+
    "\4\0\7\214\30\0\1\215\23\0\51\132\1\0\20\132"+
    "\1\0\2\3\1\0\3\3\1\216\2\57\1\217\1\220"+
    "\1\221\2\3\1\222\24\3\27\0\2\3\1\0\22\3"+
    "\1\223\15\3\27\0\2\3\1\0\1\3\1\224\36\3"+
    "\27\0\2\3\1\0\13\3\1\57\24\3\27\0\2\3"+
    "\1\0\15\3\1\57\22\3\27\0\2\3\1\0\1\3"+
    "\1\225\36\3\27\0\2\3\1\0\27\3\1\57\10\3"+
    "\27\0\2\3\1\0\25\3\1\226\12\3\27\0\2\3"+
    "\1\0\13\3\1\227\24\3\27\0\2\3\1\0\1\230"+
    "\25\3\1\231\11\3\27\0\2\3\1\0\17\3\1\232"+
    "\20\3\27\0\2\3\1\0\22\3\1\233\15\3\27\0"+
    "\2\3\1\0\1\234\37\3\27\0\2\3\1\0\21\3"+
    "\1\235\16\3\27\0\2\3\1\0\20\3\1\236\17\3"+
    "\27\0\2\3\1\0\13\3\1\237\17\3\1\240\4\3"+
    "\27\0\2\3\1\0\15\3\1\211\22\3\27\0\2\3"+
    "\1\0\26\3\1\241\11\3\27\0\2\3\1\0\16\3"+
    "\1\242\21\3\27\0\2\3\1\0\16\3\1\243\21\3"+
    "\27\0\2\3\1\0\14\3\1\57\23\3\27\0\2\3"+
    "\1\0\13\3\1\244\24\3\27\0\2\3\1\0\20\3"+
    "\1\166\17\3\27\0\2\3\1\0\14\3\1\245\23\3"+
    "\27\0\2\3\1\0\2\3\1\246\12\3\1\247\22\3"+
    "\27\0\2\3\1\0\2\3\1\250\35\3\27\0\2\3"+
    "\1\0\31\3\1\251\6\3\27\0\2\3\1\0\26\3"+
    "\1\252\11\3\27\0\2\3\1\0\32\3\1\253\5\3"+
    "\27\0\2\3\1\0\17\3\1\254\20\3\27\0\2\3"+
    "\1\0\16\3\1\255\21\3\27\0\2\3\1\0\35\3"+
    "\1\256\2\3\27\0\2\3\1\0\14\3\1\257\23\3"+
    "\27\0\2\3\1\0\33\3\1\260\4\3\27\0\2\3"+
    "\1\0\36\3\1\57\1\3\27\0\2\3\1\0\23\3"+
    "\1\166\14\3\27\0\2\3\1\0\14\3\1\151\23\3"+
    "\30\0\1\214\4\0\7\214\30\0\1\261\1\262\24\0"+
    "\1\261\4\0\7\261\55\0\2\3\1\0\11\3\1\263"+
    "\26\3\27\0\2\3\1\0\3\3\1\264\3\3\1\57"+
    "\30\3\27\0\2\3\1\0\4\3\1\57\33\3\27\0"+
    "\2\3\1\0\3\3\1\57\34\3\27\0\2\3\1\0"+
    "\20\3\1\265\17\3\27\0\2\3\1\0\20\3\1\266"+
    "\17\3\27\0\2\3\1\0\15\3\1\267\22\3\27\0"+
    "\2\3\1\0\13\3\1\270\24\3\27\0\2\3\1\0"+
    "\2\3\1\271\35\3\27\0\2\3\1\0\20\3\1\211"+
    "\17\3\27\0\2\3\1\0\1\3\1\272\36\3\27\0"+
    "\2\3\1\0\25\3\1\266\12\3\27\0\2\3\1\0"+
    "\1\3\1\273\36\3\27\0\2\3\1\0\17\3\1\274"+
    "\20\3\27\0\2\3\1\0\22\3\1\211\15\3\27\0"+
    "\2\3\1\0\13\3\1\275\24\3\27\0\2\3\1\0"+
    "\2\3\1\151\35\3\27\0\2\3\1\0\16\3\1\276"+
    "\21\3\27\0\2\3\1\0\20\3\1\277\17\3\27\0"+
    "\2\3\1\0\1\3\1\300\36\3\27\0\2\3\1\0"+
    "\23\3\1\57\14\3\27\0\2\3\1\0\3\3\1\216"+
    "\2\57\1\217\1\220\1\221\4\3\1\250\22\3\27\0"+
    "\2\3\1\0\25\3\1\301\12\3\27\0\2\3\1\0"+
    "\1\302\17\3\1\303\17\3\27\0\2\3\1\0\2\3"+
    "\1\304\35\3\27\0\2\3\1\0\3\3\1\216\2\57"+
    "\1\217\1\220\1\221\27\3\27\0\2\3\1\0\13\3"+
    "\1\305\24\3\27\0\2\3\1\0\2\3\1\306\35\3"+
    "\27\0\2\3\1\0\1\230\37\3\27\0\2\3\1\0"+
    "\1\307\37\3\27\0\2\3\1\0\21\3\1\213\16\3"+
    "\27\0\2\3\1\0\16\3\1\237\21\3\27\0\2\3"+
    "\1\0\1\310\37\3\27\0\2\3\1\0\27\3\1\311"+
    "\10\3\30\0\1\261\4\0\7\261\31\0\1\312\23\0"+
    "\2\3\1\0\7\3\1\57\30\3\27\0\2\3\1\0"+
    "\5\3\1\57\32\3\27\0\2\3\1\0\1\3\1\313"+
    "\36\3\27\0\2\3\1\0\2\3\1\57\35\3\27\0"+
    "\2\3\1\0\12\3\1\314\25\3\27\0\2\3\1\0"+
    "\24\3\1\211\13\3\27\0\2\3\1\0\1\315\37\3"+
    "\27\0\2\3\1\0\33\3\1\57\4\3\27\0\2\3"+
    "\1\0\17\3\1\166\20\3\27\0\2\3\1\0\1\316"+
    "\37\3\27\0\2\3\1\0\15\3\1\152\22\3\27\0"+
    "\2\3\1\0\2\3\1\317\35\3\27\0\2\3\1\0"+
    "\1\3\1\320\36\3\27\0\2\3\1\0\25\3\1\321"+
    "\12\3\27\0\2\3\1\0\22\3\1\322\15\3\27\0"+
    "\2\3\1\0\1\3\1\323\36\3\27\0\2\3\1\0"+
    "\16\3\1\231\21\3\27\0\2\3\1\0\20\3\1\324"+
    "\17\3\27\0\2\3\1\0\17\3\1\57\20\3\27\0"+
    "\2\3\1\0\13\3\1\166\24\3\27\0\2\3\1\0"+
    "\12\3\1\325\25\3\27\0\2\3\1\0\25\3\1\57"+
    "\12\3\27\0\2\3\1\0\16\3\1\57\21\3\27\0"+
    "\2\3\1\0\16\3\1\172\21\3\27\0\2\3\1\0"+
    "\13\3\1\326\24\3\27\0\2\3\1\0\22\3\1\327"+
    "\15\3\27\0\2\3\1\0\2\3\1\330\35\3\27\0"+
    "\2\3\1\0\13\3\1\331\24\3\27\0\2\3\1\0"+
    "\13\3\1\232\24\3\27\0\2\3\1\0\17\3\1\321"+
    "\20\3\27\0\2\3\1\0\26\3\1\151\11\3\27\0"+
    "\2\3\1\0\26\3\1\332\11\3\27\0\2\3\1\0"+
    "\1\333\37\3\27\0\2\3\1\0\20\3\1\232\17\3"+
    "\27\0\2\3\1\0\1\3\1\57\36\3\27\0\2\3"+
    "\1\0\24\3\1\57\13\3\27\0\2\3\1\0\25\3"+
    "\1\334\12\3\27\0\2\3\1\0\25\3\1\335\12\3"+
    "\27\0\2\3\1\0\13\3\1\66\24\3\27\0\2\3"+
    "\1\0\16\3\1\336\21\3\27\0\2\3\1\0\2\3"+
    "\1\337\35\3\27\0\2\3\1\0\14\3\1\340\23\3"+
    "\27\0\2\3\1\0\22\3\1\66\15\3\27\0\2\3"+
    "\1\0\14\3\1\232\23\3\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\3\1\1\11\4\1\2\11"+
    "\2\1\5\11\53\1\1\0\1\11\1\1\13\11\46\1"+
    "\2\0\43\1\1\0\1\11\27\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 38: break;
        case 31: 
          { return CorrerALaIzquierda;
          }
        case 39: break;
        case 12: 
          { return Asignacion;
          }
        case 40: break;
        case 33: 
          { return CorrerALaDerecha;
          }
        case 41: break;
        case 14: 
          { return MenorQue;
          }
        case 42: break;
        case 35: 
          { return Sume;
          }
        case 43: break;
        case 20: 
          { return CierraCorchete;
          }
        case 44: break;
        case 25: 
          { lexeme=yytext(); return Reservadas;
          }
        case 45: break;
        case 9: 
          { return Not;
          }
        case 46: break;
        case 11: 
          { return Potencia;
          }
        case 47: break;
        case 10: 
          { return And;
          }
        case 48: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 49: break;
        case 24: 
          { lexeme=yytext(); return Flotante;
          }
        case 50: break;
        case 26: 
          { return Reste;
          }
        case 51: break;
        case 28: 
          { return Diferencia;
          }
        case 52: break;
        case 34: 
          { return Multiplique;
          }
        case 53: break;
        case 5: 
          { return AbreParentesis;
          }
        case 54: break;
        case 19: 
          { return AbreCorchete;
          }
        case 55: break;
        case 18: 
          { return Suma;
          }
        case 56: break;
        case 16: 
          { return Porcentaje;
          }
        case 57: break;
        case 21: 
          { return Interrogacion;
          }
        case 58: break;
        case 6: 
          { return Resta;
          }
        case 59: break;
        case 32: 
          { return MayorOIgualQue;
          }
        case 60: break;
        case 37: 
          { lexeme=yytext(); return Transac;
          }
        case 61: break;
        case 36: 
          { lexeme=yytext(); return Units;
          }
        case 62: break;
        case 7: 
          { return CierraParentesis;
          }
        case 63: break;
        case 29: 
          { return Comparacion;
          }
        case 64: break;
        case 23: 
          { return PuntoYComa;
          }
        case 65: break;
        case 1: 
          { return ERROR;
          }
        case 66: break;
        case 22: 
          { return DosPuntos;
          }
        case 67: break;
        case 27: 
          { return Divida;
          }
        case 68: break;
        case 17: 
          { return Multiplicacion;
          }
        case 69: break;
        case 4: 
          { /*Ignore*/
          }
        case 70: break;
        case 30: 
          { return MenorOIgualQue;
          }
        case 71: break;
        case 15: 
          { return MayorQue;
          }
        case 72: break;
        case 13: 
          { return Or;
          }
        case 73: break;
        case 8: 
          { return Division;
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
