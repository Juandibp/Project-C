/* The following code was generated by JFlex 1.4.3 on 28/05/20 07:39 PM */

package soliditycompiler;
import static soliditycompiler.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/20 07:39 PM from the specification file
 * <tt>C:/Users/U1/Documents/GitHub/Project-C/SolidityCompiler/src/soliditycompiler/scanner.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\51\2\0\1\3\22\0\1\3\1\52\1\74\2\0"+
    "\1\62\1\53\1\75\1\44\1\46\1\63\1\64\1\3\1\45\1\47"+
    "\1\50\1\2\1\12\1\7\1\14\1\10\1\15\1\13\1\2\1\11"+
    "\1\2\1\72\1\73\1\57\1\55\1\60\1\71\1\0\1\76\1\76"+
    "\1\76\1\76\1\76\1\76\11\1\1\40\12\1\1\65\1\0\1\66"+
    "\1\54\1\1\1\0\1\22\1\25\1\31\1\23\1\17\1\16\1\37"+
    "\1\34\1\4\1\1\1\27\1\20\1\33\1\5\1\26\1\36\1\1"+
    "\1\24\1\21\1\6\1\32\1\41\1\42\1\35\1\30\1\43\1\67"+
    "\1\56\1\70\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\12\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\33\1\0\1\34"+
    "\1\2\1\35\50\2\1\0\1\36\1\4\1\37\1\40"+
    "\1\13\1\41\1\16\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\0\1\50\1\0\1\51\1\0\1\35\35\2"+
    "\1\35\5\2\1\52\2\2\2\0\1\35\13\2\1\53"+
    "\11\2\1\35\1\53\2\2\1\35\4\2\2\0\4\2"+
    "\1\3\1\0\25\2\2\0\2\2\1\34\5\2\1\35"+
    "\5\2\1\54\13\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\77\0\u0627\0\u0666\0\u06a5\0\u06e4\0\77\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\77\0\77\0\u081f\0\u085e\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\u089d\0\u08dc"+
    "\0\u091b\0\u0627\0\u095a\0\176\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e"+
    "\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\77\0\u13b0\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\u089d\0\77\0\u08dc\0\u13ef\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\176\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\176\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568"+
    "\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760"+
    "\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\77\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u152a\0\u2ec2"+
    "\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\77\0\u2ffd\0\u303c\0\u307b"+
    "\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\7\4"+
    "\1\10\1\11\1\3\1\12\1\13\1\14\1\15\1\16"+
    "\2\3\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\3\1\25\1\26\1\27\1\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\3"+
    "\100\0\2\3\1\0\40\3\32\0\1\3\2\0\1\4"+
    "\4\0\7\4\1\0\1\61\27\0\1\62\32\0\1\5"+
    "\45\0\1\5\26\0\2\3\1\0\1\3\1\63\10\3"+
    "\1\64\14\3\1\65\10\3\32\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\66\7\3\1\67\7\3\32\0\1\3"+
    "\1\0\2\3\1\0\1\70\15\3\1\71\1\3\1\72"+
    "\1\3\1\73\3\3\1\74\11\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\75\1\76\11\3\1\77\23\3"+
    "\32\0\1\3\1\0\2\3\1\0\2\3\1\100\10\3"+
    "\1\101\6\3\1\102\14\3\1\103\32\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\64\1\3\1\104\20\3\32\0"+
    "\1\3\1\0\2\3\1\0\13\3\1\105\2\3\1\106"+
    "\3\3\1\64\15\3\32\0\1\3\1\0\2\3\1\0"+
    "\13\3\1\107\24\3\32\0\1\3\1\0\2\3\1\0"+
    "\16\3\1\110\1\3\1\111\1\3\1\112\1\3\1\113"+
    "\13\3\32\0\1\3\1\0\2\3\1\0\13\3\1\114"+
    "\24\3\32\0\1\3\1\0\2\3\1\0\16\3\1\115"+
    "\3\3\1\116\15\3\32\0\1\3\1\0\2\3\1\0"+
    "\1\117\11\3\1\120\25\3\32\0\1\3\1\0\2\3"+
    "\1\0\1\121\15\3\1\122\3\3\1\123\15\3\32\0"+
    "\1\3\1\0\2\3\1\0\13\3\1\124\6\3\1\125"+
    "\15\3\32\0\1\3\1\0\2\3\1\0\16\3\1\126"+
    "\1\3\1\127\5\3\1\130\11\3\32\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\131\17\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\132\15\3\1\73\21\3\32\0\1\3"+
    "\1\0\2\3\1\0\13\3\1\133\14\3\1\134\7\3"+
    "\32\0\1\3\45\0\1\135\106\0\1\136\23\0\1\62"+
    "\4\0\7\62\131\0\1\137\4\0\1\140\76\0\1\141"+
    "\74\0\1\142\100\0\1\143\77\0\1\144\75\0\1\145"+
    "\1\0\1\146\74\0\1\147\2\0\1\150\73\0\1\151"+
    "\5\0\1\37\70\0\1\152\22\0\2\153\1\0\40\153"+
    "\30\0\1\154\1\0\1\153\1\0\2\155\1\0\40\155"+
    "\31\0\1\154\1\155\2\0\1\156\4\0\7\156\27\0"+
    "\1\157\32\0\2\3\1\0\2\3\1\160\35\3\32\0"+
    "\1\3\1\0\2\3\1\0\32\3\1\161\5\3\32\0"+
    "\1\3\1\0\2\3\1\0\16\3\1\162\7\3\1\163"+
    "\11\3\32\0\1\3\1\0\2\3\1\0\1\164\37\3"+
    "\32\0\1\3\1\0\2\3\1\0\1\3\1\165\36\3"+
    "\32\0\1\3\1\0\2\3\1\0\14\3\1\77\23\3"+
    "\32\0\1\3\1\0\2\3\1\0\22\3\1\166\15\3"+
    "\32\0\1\3\1\0\2\3\1\0\20\3\1\64\17\3"+
    "\32\0\1\3\1\0\2\3\1\0\1\3\1\167\36\3"+
    "\32\0\1\3\1\0\2\3\1\0\26\3\1\166\11\3"+
    "\32\0\1\3\1\0\2\3\1\0\30\3\1\170\7\3"+
    "\32\0\1\3\1\0\2\3\1\0\15\3\1\163\22\3"+
    "\32\0\1\3\1\0\2\3\1\0\20\3\1\171\17\3"+
    "\32\0\1\3\1\0\2\3\1\0\1\3\1\172\23\3"+
    "\1\173\12\3\32\0\1\3\1\0\2\3\1\0\14\3"+
    "\1\174\23\3\32\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\175\21\3\32\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\176\20\3\32\0\1\3\1\0\2\3\1\0\14\3"+
    "\1\177\23\3\32\0\1\3\1\0\2\3\1\0\24\3"+
    "\1\200\13\3\32\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\201\35\3\32\0\1\3\1\0\2\3\1\0\14\3"+
    "\1\202\23\3\32\0\1\3\1\0\2\3\1\0\13\3"+
    "\1\203\24\3\32\0\1\3\1\0\2\3\1\0\22\3"+
    "\1\204\15\3\32\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\205\35\3\32\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\206\21\3\32\0\1\3\1\0\2\3\1\0\14\3"+
    "\1\207\23\3\32\0\1\3\1\0\2\3\1\0\1\3"+
    "\1\210\36\3\32\0\1\3\1\0\2\3\1\0\1\3"+
    "\1\211\36\3\32\0\1\3\1\0\2\3\1\0\1\212"+
    "\37\3\32\0\1\3\1\0\2\3\1\0\1\3\1\213"+
    "\36\3\32\0\1\3\1\0\2\3\1\0\32\3\1\214"+
    "\5\3\32\0\1\3\1\0\2\3\1\0\17\3\1\215"+
    "\20\3\32\0\1\3\1\0\2\3\1\0\31\3\1\216"+
    "\6\3\32\0\1\3\1\0\2\3\1\0\26\3\1\206"+
    "\11\3\32\0\1\3\1\0\2\3\1\0\24\3\1\217"+
    "\13\3\32\0\1\3\1\0\2\3\1\0\1\220\37\3"+
    "\32\0\1\3\1\0\2\3\1\0\21\3\1\221\16\3"+
    "\32\0\1\3\1\0\2\3\1\0\16\3\1\222\21\3"+
    "\32\0\1\3\1\0\2\3\1\0\13\3\1\223\24\3"+
    "\32\0\1\3\1\0\2\3\1\0\1\224\12\3\1\225"+
    "\24\3\32\0\1\3\1\0\2\3\1\0\1\226\37\3"+
    "\32\0\1\3\2\0\1\227\4\0\7\227\31\0\1\230"+
    "\27\0\51\137\1\0\25\137\2\0\1\156\4\0\7\156"+
    "\62\0\2\3\1\0\3\3\1\231\2\64\1\232\1\233"+
    "\1\234\2\3\1\235\24\3\32\0\1\3\1\0\2\3"+
    "\1\0\22\3\1\236\15\3\32\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\237\36\3\32\0\1\3\1\0\2\3"+
    "\1\0\13\3\1\64\24\3\32\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\64\22\3\32\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\240\36\3\32\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\64\10\3\32\0\1\3\1\0\2\3"+
    "\1\0\25\3\1\241\12\3\32\0\1\3\1\0\2\3"+
    "\1\0\13\3\1\242\24\3\32\0\1\3\1\0\2\3"+
    "\1\0\1\243\25\3\1\244\11\3\32\0\1\3\1\0"+
    "\2\3\1\0\17\3\1\245\20\3\32\0\1\3\1\0"+
    "\2\3\1\0\22\3\1\246\15\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\247\37\3\32\0\1\3\1\0\2\3"+
    "\1\0\21\3\1\250\16\3\32\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\251\17\3\32\0\1\3\1\0\2\3"+
    "\1\0\13\3\1\252\17\3\1\253\4\3\32\0\1\3"+
    "\1\0\2\3\1\0\15\3\1\224\22\3\32\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\254\11\3\32\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\255\21\3\32\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\256\21\3\32\0\1\3"+
    "\1\0\2\3\1\0\14\3\1\64\23\3\32\0\1\3"+
    "\1\0\2\3\1\0\13\3\1\257\24\3\32\0\1\3"+
    "\1\0\2\3\1\0\20\3\1\200\17\3\32\0\1\3"+
    "\1\0\2\3\1\0\14\3\1\260\23\3\32\0\1\3"+
    "\1\0\2\3\1\0\2\3\1\261\12\3\1\262\22\3"+
    "\32\0\1\3\1\0\2\3\1\0\2\3\1\263\35\3"+
    "\32\0\1\3\1\0\2\3\1\0\31\3\1\264\6\3"+
    "\32\0\1\3\1\0\2\3\1\0\26\3\1\265\11\3"+
    "\32\0\1\3\1\0\2\3\1\0\32\3\1\266\5\3"+
    "\32\0\1\3\1\0\2\3\1\0\17\3\1\267\20\3"+
    "\32\0\1\3\1\0\2\3\1\0\40\3\30\0\1\270"+
    "\1\271\1\3\1\0\2\3\1\0\16\3\1\272\21\3"+
    "\32\0\1\3\1\0\2\3\1\0\35\3\1\273\2\3"+
    "\32\0\1\3\1\0\2\3\1\0\14\3\1\274\23\3"+
    "\32\0\1\3\1\0\2\3\1\0\33\3\1\275\4\3"+
    "\32\0\1\3\1\0\2\3\1\0\36\3\1\64\1\3"+
    "\32\0\1\3\1\0\2\3\1\0\23\3\1\200\14\3"+
    "\32\0\1\3\1\0\2\3\1\0\14\3\1\163\23\3"+
    "\32\0\1\3\2\0\1\227\4\0\7\227\30\0\1\276"+
    "\1\277\31\0\1\277\4\0\7\277\62\0\2\3\1\0"+
    "\11\3\1\300\26\3\32\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\301\3\3\1\64\30\3\32\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\64\33\3\32\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\64\34\3\32\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\302\17\3\32\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\303\17\3\32\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\304\22\3\32\0\1\3\1\0"+
    "\2\3\1\0\13\3\1\305\24\3\32\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\306\35\3\32\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\224\17\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\307\36\3\32\0\1\3\1\0"+
    "\2\3\1\0\25\3\1\303\12\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\310\36\3\32\0\1\3\1\0"+
    "\2\3\1\0\17\3\1\311\20\3\32\0\1\3\1\0"+
    "\2\3\1\0\22\3\1\224\15\3\32\0\1\3\1\0"+
    "\2\3\1\0\13\3\1\312\24\3\32\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\163\35\3\32\0\1\3\1\0"+
    "\2\3\1\0\16\3\1\313\21\3\32\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\314\17\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\315\36\3\32\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\64\14\3\32\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\231\2\64\1\232\1\233\1\234"+
    "\4\3\1\263\22\3\32\0\1\3\1\0\2\3\1\0"+
    "\25\3\1\316\12\3\32\0\1\3\1\0\2\3\1\0"+
    "\1\317\17\3\1\320\17\3\32\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\321\35\3\32\0\1\3\1\0\2\3"+
    "\1\0\3\3\1\231\2\64\1\232\1\233\1\234\27\3"+
    "\32\0\1\3\1\0\2\3\1\0\13\3\1\322\24\3"+
    "\32\0\1\3\1\0\2\3\1\0\2\3\1\323\35\3"+
    "\32\0\1\3\1\0\2\3\1\0\1\243\37\3\32\0"+
    "\1\3\1\0\2\3\1\0\1\324\37\3\32\0\1\3"+
    "\2\0\1\325\4\0\7\325\60\0\1\325\2\0\1\326"+
    "\4\0\7\326\60\0\1\326\1\0\2\3\1\0\21\3"+
    "\1\226\16\3\32\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\252\21\3\32\0\1\3\1\0\2\3\1\0\1\327"+
    "\37\3\32\0\1\3\1\0\2\3\1\0\27\3\1\330"+
    "\10\3\32\0\1\3\17\0\1\61\61\0\1\277\4\0"+
    "\7\277\30\0\1\331\31\0\2\3\1\0\7\3\1\64"+
    "\30\3\32\0\1\3\1\0\2\3\1\0\5\3\1\64"+
    "\32\3\32\0\1\3\1\0\2\3\1\0\1\3\1\332"+
    "\36\3\32\0\1\3\1\0\2\3\1\0\2\3\1\64"+
    "\35\3\32\0\1\3\1\0\2\3\1\0\12\3\1\333"+
    "\25\3\32\0\1\3\1\0\2\3\1\0\24\3\1\224"+
    "\13\3\32\0\1\3\1\0\2\3\1\0\1\334\37\3"+
    "\32\0\1\3\1\0\2\3\1\0\33\3\1\64\4\3"+
    "\32\0\1\3\1\0\2\3\1\0\17\3\1\200\20\3"+
    "\32\0\1\3\1\0\2\3\1\0\1\335\37\3\32\0"+
    "\1\3\1\0\2\3\1\0\15\3\1\164\22\3\32\0"+
    "\1\3\1\0\2\3\1\0\2\3\1\336\35\3\32\0"+
    "\1\3\1\0\2\3\1\0\1\3\1\337\36\3\32\0"+
    "\1\3\1\0\2\3\1\0\25\3\1\340\12\3\32\0"+
    "\1\3\1\0\2\3\1\0\22\3\1\341\15\3\32\0"+
    "\1\3\1\0\2\3\1\0\1\3\1\342\36\3\32\0"+
    "\1\3\1\0\2\3\1\0\16\3\1\244\21\3\32\0"+
    "\1\3\1\0\2\3\1\0\20\3\1\343\17\3\32\0"+
    "\1\3\1\0\2\3\1\0\17\3\1\64\20\3\32\0"+
    "\1\3\1\0\2\3\1\0\13\3\1\200\24\3\32\0"+
    "\1\3\1\0\2\3\1\0\12\3\1\344\25\3\32\0"+
    "\1\3\2\0\1\325\4\0\7\325\56\0\1\345\1\0"+
    "\1\325\2\0\1\326\4\0\7\326\57\0\1\345\1\326"+
    "\1\0\2\3\1\0\25\3\1\64\12\3\32\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\64\21\3\32\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\204\21\3\32\0\1\3"+
    "\1\0\2\3\1\0\13\3\1\346\24\3\32\0\1\3"+
    "\1\0\2\3\1\0\22\3\1\347\15\3\32\0\1\3"+
    "\1\0\2\3\1\0\2\3\1\350\35\3\32\0\1\3"+
    "\1\0\2\3\1\0\13\3\1\351\24\3\32\0\1\3"+
    "\1\0\2\3\1\0\13\3\1\245\24\3\32\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\340\20\3\32\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\163\11\3\32\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\352\11\3\32\0\1\3"+
    "\1\0\2\3\1\0\1\353\37\3\32\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\245\17\3\32\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\64\36\3\32\0\1\3\1\0"+
    "\2\3\1\0\24\3\1\64\13\3\32\0\1\3\1\0"+
    "\2\3\1\0\25\3\1\354\12\3\32\0\1\3\1\0"+
    "\2\3\1\0\25\3\1\355\12\3\32\0\1\3\1\0"+
    "\2\3\1\0\13\3\1\73\24\3\32\0\1\3\1\0"+
    "\2\3\1\0\16\3\1\356\21\3\32\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\357\35\3\32\0\1\3\1\0"+
    "\2\3\1\0\14\3\1\360\23\3\32\0\1\3\1\0"+
    "\2\3\1\0\22\3\1\73\15\3\32\0\1\3\1\0"+
    "\2\3\1\0\14\3\1\245\23\3\32\0\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12978];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\4\1\1\11\4\1\2\11"+
    "\2\1\7\11\2\1\1\0\53\1\1\0\1\11\1\1"+
    "\13\11\1\0\1\11\1\0\1\1\1\0\47\1\2\0"+
    "\37\1\2\0\5\1\1\0\25\1\2\0\2\1\1\11"+
    "\13\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return AbreLlave;
          }
        case 45: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 46: break;
        case 35: 
          { return CorrerALaIzquierda;
          }
        case 47: break;
        case 13: 
          { return Asignacion;
          }
        case 48: break;
        case 27: 
          { return Comillas;
          }
        case 49: break;
        case 41: 
          { return Cientifico;
          }
        case 50: break;
        case 37: 
          { return CorrerALaDerecha;
          }
        case 51: break;
        case 23: 
          { return CierraLlave;
          }
        case 52: break;
        case 15: 
          { return MenorQue;
          }
        case 53: break;
        case 39: 
          { return Sume;
          }
        case 54: break;
        case 21: 
          { return CierraCorchete;
          }
        case 55: break;
        case 29: 
          { lexeme=yytext(); return Reservadas;
          }
        case 56: break;
        case 10: 
          { return Not;
          }
        case 57: break;
        case 12: 
          { return Potencia;
          }
        case 58: break;
        case 11: 
          { return And;
          }
        case 59: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 60: break;
        case 28: 
          { lexeme=yytext(); return Flotante;
          }
        case 61: break;
        case 30: 
          { return Reste;
          }
        case 62: break;
        case 32: 
          { return Diferencia;
          }
        case 63: break;
        case 38: 
          { return Multiplique;
          }
        case 64: break;
        case 5: 
          { return AbreParentesis;
          }
        case 65: break;
        case 44: 
          { return Hexadecimal;
          }
        case 66: break;
        case 20: 
          { return AbreCorchete;
          }
        case 67: break;
        case 19: 
          { return Suma;
          }
        case 68: break;
        case 40: 
          { return String;
          }
        case 69: break;
        case 17: 
          { return Porcentaje;
          }
        case 70: break;
        case 8: 
          { return Punto;
          }
        case 71: break;
        case 24: 
          { return Interrogacion;
          }
        case 72: break;
        case 6: 
          { return Resta;
          }
        case 73: break;
        case 36: 
          { return MayorOIgualQue;
          }
        case 74: break;
        case 43: 
          { lexeme=yytext(); return Transac;
          }
        case 75: break;
        case 42: 
          { lexeme=yytext(); return Units;
          }
        case 76: break;
        case 7: 
          { return CierraParentesis;
          }
        case 77: break;
        case 33: 
          { return Comparacion;
          }
        case 78: break;
        case 26: 
          { return PuntoYComa;
          }
        case 79: break;
        case 1: 
          { return ERROR;
          }
        case 80: break;
        case 25: 
          { return DosPuntos;
          }
        case 81: break;
        case 31: 
          { return Divida;
          }
        case 82: break;
        case 18: 
          { return Multiplicacion;
          }
        case 83: break;
        case 4: 
          { /*Ignore*/
          }
        case 84: break;
        case 34: 
          { return MenorOIgualQue;
          }
        case 85: break;
        case 16: 
          { return MayorQue;
          }
        case 86: break;
        case 14: 
          { return Or;
          }
        case 87: break;
        case 9: 
          { return Division;
          }
        case 88: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
