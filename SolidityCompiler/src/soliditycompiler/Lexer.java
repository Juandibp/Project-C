/* The following code was generated by JFlex 1.4.3 on 27/5/20 19:30 */

package soliditycompiler;
import static soliditycompiler.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/5/20 19:30 from the specification file
 * <tt>C:/Users/adria/Documents/OneDrive - Estudiantes ITCR/I SEMESTRE 2020/COMPI/Proyecto/Project-C/SolidityCompiler/src/soliditycompiler/scanner.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\51\2\0\1\3\22\0\1\3\1\52\3\0\1\62"+
    "\1\53\1\0\1\44\1\47\1\63\1\64\1\3\1\45\1\46\1\50"+
    "\1\2\1\12\1\7\1\14\1\10\1\15\1\13\1\2\1\11\1\2"+
    "\1\72\1\73\1\57\1\55\1\60\1\71\1\0\17\1\1\40\12\1"+
    "\1\65\1\0\1\66\1\54\1\1\1\0\1\22\1\25\1\31\1\23"+
    "\1\17\1\16\1\37\1\34\1\4\1\1\1\27\1\20\1\33\1\5"+
    "\1\26\1\36\1\1\1\24\1\21\1\6\1\32\1\41\1\42\1\35"+
    "\1\30\1\43\1\67\1\56\1\70\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\12\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\2\1\34"+
    "\50\2\1\0\1\35\1\4\1\36\1\37\1\13\1\40"+
    "\1\16\1\41\1\42\1\43\1\44\1\45\1\46\1\34"+
    "\42\2\1\47\2\2\2\0\1\34\13\2\1\50\11\2"+
    "\1\34\1\50\2\2\1\34\10\2\1\0\1\3\27\2"+
    "\1\33\5\2\1\34\20\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\74\0\u0618\0\u0654\0\u0690\0\74\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\74\0\74\0\u07bc\0\u07f8\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u05dc\0\u0834"+
    "\0\170\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\74\0\u120c\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\170\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\170\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\74\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634"+
    "\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814"+
    "\0\u2850\0\u288c\0\u28c8\0\74\0\u2904\0\u2940\0\u297c\0\u29b8"+
    "\0\u29f4\0\u1338\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2db4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\7\4"+
    "\1\10\1\11\1\3\1\12\1\13\1\14\1\15\1\16"+
    "\2\3\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\3\1\25\1\26\1\27\1\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\75\0\2\3\1\0"+
    "\40\3\32\0\1\4\4\0\7\4\30\0\1\57\30\0"+
    "\1\5\45\0\1\5\23\0\2\3\1\0\1\3\1\60"+
    "\10\3\1\61\14\3\1\62\10\3\31\0\2\3\1\0"+
    "\20\3\1\63\7\3\1\64\7\3\31\0\2\3\1\0"+
    "\1\65\15\3\1\66\1\3\1\67\1\3\1\70\3\3"+
    "\1\71\11\3\31\0\2\3\1\0\1\3\1\72\1\73"+
    "\11\3\1\74\23\3\31\0\2\3\1\0\2\3\1\75"+
    "\10\3\1\76\6\3\1\77\14\3\1\100\31\0\2\3"+
    "\1\0\15\3\1\61\1\3\1\101\20\3\31\0\2\3"+
    "\1\0\13\3\1\102\2\3\1\103\3\3\1\61\15\3"+
    "\31\0\2\3\1\0\13\3\1\104\24\3\31\0\2\3"+
    "\1\0\16\3\1\105\1\3\1\106\1\3\1\107\1\3"+
    "\1\110\13\3\31\0\2\3\1\0\13\3\1\111\24\3"+
    "\31\0\2\3\1\0\16\3\1\112\3\3\1\113\15\3"+
    "\31\0\2\3\1\0\1\114\11\3\1\115\25\3\31\0"+
    "\2\3\1\0\1\116\15\3\1\117\3\3\1\120\15\3"+
    "\31\0\2\3\1\0\13\3\1\121\6\3\1\122\15\3"+
    "\31\0\2\3\1\0\16\3\1\123\1\3\1\124\5\3"+
    "\1\125\11\3\31\0\2\3\1\0\20\3\1\126\17\3"+
    "\31\0\2\3\1\0\1\127\15\3\1\70\21\3\31\0"+
    "\2\3\1\0\13\3\1\130\14\3\1\131\7\3\75\0"+
    "\1\132\103\0\1\133\20\0\1\57\4\0\7\57\126\0"+
    "\1\134\4\0\1\135\73\0\1\136\71\0\1\137\75\0"+
    "\1\140\74\0\1\141\72\0\1\142\1\0\1\143\71\0"+
    "\1\144\2\0\1\145\70\0\1\146\5\0\1\37\65\0"+
    "\1\147\17\0\2\3\1\0\2\3\1\150\35\3\31\0"+
    "\2\3\1\0\32\3\1\151\5\3\31\0\2\3\1\0"+
    "\16\3\1\152\7\3\1\153\11\3\31\0\2\3\1\0"+
    "\1\154\37\3\31\0\2\3\1\0\1\3\1\155\36\3"+
    "\31\0\2\3\1\0\14\3\1\74\23\3\31\0\2\3"+
    "\1\0\22\3\1\156\15\3\31\0\2\3\1\0\20\3"+
    "\1\61\17\3\31\0\2\3\1\0\1\3\1\157\36\3"+
    "\31\0\2\3\1\0\26\3\1\156\11\3\31\0\2\3"+
    "\1\0\30\3\1\160\7\3\31\0\2\3\1\0\15\3"+
    "\1\153\22\3\31\0\2\3\1\0\20\3\1\161\17\3"+
    "\31\0\2\3\1\0\1\3\1\162\23\3\1\163\12\3"+
    "\31\0\2\3\1\0\14\3\1\164\23\3\31\0\2\3"+
    "\1\0\16\3\1\165\21\3\31\0\2\3\1\0\17\3"+
    "\1\166\20\3\31\0\2\3\1\0\14\3\1\167\23\3"+
    "\31\0\2\3\1\0\24\3\1\170\13\3\31\0\2\3"+
    "\1\0\2\3\1\171\35\3\31\0\2\3\1\0\14\3"+
    "\1\172\23\3\31\0\2\3\1\0\13\3\1\173\24\3"+
    "\31\0\2\3\1\0\22\3\1\174\15\3\31\0\2\3"+
    "\1\0\2\3\1\175\35\3\31\0\2\3\1\0\16\3"+
    "\1\176\21\3\31\0\2\3\1\0\14\3\1\177\23\3"+
    "\31\0\2\3\1\0\1\3\1\200\36\3\31\0\2\3"+
    "\1\0\1\3\1\201\36\3\31\0\2\3\1\0\1\202"+
    "\37\3\31\0\2\3\1\0\1\3\1\203\36\3\31\0"+
    "\2\3\1\0\32\3\1\204\5\3\31\0\2\3\1\0"+
    "\17\3\1\205\20\3\31\0\2\3\1\0\31\3\1\61"+
    "\6\3\31\0\2\3\1\0\26\3\1\176\11\3\31\0"+
    "\2\3\1\0\24\3\1\206\13\3\31\0\2\3\1\0"+
    "\1\207\37\3\31\0\2\3\1\0\21\3\1\210\16\3"+
    "\31\0\2\3\1\0\16\3\1\211\21\3\31\0\2\3"+
    "\1\0\13\3\1\212\24\3\31\0\2\3\1\0\1\213"+
    "\12\3\1\214\24\3\31\0\2\3\1\0\1\215\37\3"+
    "\32\0\1\216\4\0\7\216\30\0\1\217\25\0\51\134"+
    "\1\0\22\134\1\0\2\3\1\0\3\3\1\220\2\61"+
    "\1\221\1\222\1\223\2\3\1\224\24\3\31\0\2\3"+
    "\1\0\22\3\1\225\15\3\31\0\2\3\1\0\1\3"+
    "\1\226\36\3\31\0\2\3\1\0\13\3\1\61\24\3"+
    "\31\0\2\3\1\0\15\3\1\61\22\3\31\0\2\3"+
    "\1\0\1\3\1\227\36\3\31\0\2\3\1\0\27\3"+
    "\1\61\10\3\31\0\2\3\1\0\25\3\1\230\12\3"+
    "\31\0\2\3\1\0\13\3\1\231\24\3\31\0\2\3"+
    "\1\0\1\232\25\3\1\233\11\3\31\0\2\3\1\0"+
    "\17\3\1\234\20\3\31\0\2\3\1\0\22\3\1\235"+
    "\15\3\31\0\2\3\1\0\1\236\37\3\31\0\2\3"+
    "\1\0\21\3\1\237\16\3\31\0\2\3\1\0\20\3"+
    "\1\240\17\3\31\0\2\3\1\0\13\3\1\241\17\3"+
    "\1\242\4\3\31\0\2\3\1\0\15\3\1\213\22\3"+
    "\31\0\2\3\1\0\26\3\1\243\11\3\31\0\2\3"+
    "\1\0\16\3\1\244\21\3\31\0\2\3\1\0\16\3"+
    "\1\245\21\3\31\0\2\3\1\0\14\3\1\61\23\3"+
    "\31\0\2\3\1\0\13\3\1\246\24\3\31\0\2\3"+
    "\1\0\20\3\1\170\17\3\31\0\2\3\1\0\14\3"+
    "\1\247\23\3\31\0\2\3\1\0\2\3\1\250\12\3"+
    "\1\251\22\3\31\0\2\3\1\0\2\3\1\252\35\3"+
    "\31\0\2\3\1\0\31\3\1\253\6\3\31\0\2\3"+
    "\1\0\26\3\1\254\11\3\31\0\2\3\1\0\32\3"+
    "\1\255\5\3\31\0\2\3\1\0\17\3\1\256\20\3"+
    "\31\0\2\3\1\0\16\3\1\257\21\3\31\0\2\3"+
    "\1\0\35\3\1\260\2\3\31\0\2\3\1\0\14\3"+
    "\1\261\23\3\31\0\2\3\1\0\33\3\1\262\4\3"+
    "\31\0\2\3\1\0\36\3\1\61\1\3\31\0\2\3"+
    "\1\0\23\3\1\170\14\3\31\0\2\3\1\0\14\3"+
    "\1\153\23\3\32\0\1\216\4\0\7\216\30\0\1\263"+
    "\1\264\26\0\1\263\4\0\7\263\57\0\2\3\1\0"+
    "\11\3\1\265\26\3\31\0\2\3\1\0\3\3\1\266"+
    "\3\3\1\61\30\3\31\0\2\3\1\0\4\3\1\61"+
    "\33\3\31\0\2\3\1\0\3\3\1\61\34\3\31\0"+
    "\2\3\1\0\20\3\1\267\17\3\31\0\2\3\1\0"+
    "\20\3\1\270\17\3\31\0\2\3\1\0\15\3\1\271"+
    "\22\3\31\0\2\3\1\0\13\3\1\272\24\3\31\0"+
    "\2\3\1\0\2\3\1\273\35\3\31\0\2\3\1\0"+
    "\20\3\1\213\17\3\31\0\2\3\1\0\1\3\1\274"+
    "\36\3\31\0\2\3\1\0\25\3\1\270\12\3\31\0"+
    "\2\3\1\0\1\3\1\275\36\3\31\0\2\3\1\0"+
    "\17\3\1\276\20\3\31\0\2\3\1\0\22\3\1\213"+
    "\15\3\31\0\2\3\1\0\13\3\1\277\24\3\31\0"+
    "\2\3\1\0\2\3\1\153\35\3\31\0\2\3\1\0"+
    "\16\3\1\300\21\3\31\0\2\3\1\0\20\3\1\301"+
    "\17\3\31\0\2\3\1\0\1\3\1\302\36\3\31\0"+
    "\2\3\1\0\23\3\1\61\14\3\31\0\2\3\1\0"+
    "\3\3\1\220\2\61\1\221\1\222\1\223\4\3\1\252"+
    "\22\3\31\0\2\3\1\0\25\3\1\303\12\3\31\0"+
    "\2\3\1\0\1\304\17\3\1\305\17\3\31\0\2\3"+
    "\1\0\2\3\1\306\35\3\31\0\2\3\1\0\3\3"+
    "\1\220\2\61\1\221\1\222\1\223\27\3\31\0\2\3"+
    "\1\0\13\3\1\307\24\3\31\0\2\3\1\0\2\3"+
    "\1\310\35\3\31\0\2\3\1\0\1\232\37\3\31\0"+
    "\2\3\1\0\1\311\37\3\31\0\2\3\1\0\21\3"+
    "\1\215\16\3\31\0\2\3\1\0\16\3\1\241\21\3"+
    "\31\0\2\3\1\0\1\312\37\3\31\0\2\3\1\0"+
    "\27\3\1\313\10\3\32\0\1\263\4\0\7\263\31\0"+
    "\1\314\25\0\2\3\1\0\7\3\1\61\30\3\31\0"+
    "\2\3\1\0\5\3\1\61\32\3\31\0\2\3\1\0"+
    "\1\3\1\315\36\3\31\0\2\3\1\0\2\3\1\61"+
    "\35\3\31\0\2\3\1\0\12\3\1\316\25\3\31\0"+
    "\2\3\1\0\24\3\1\213\13\3\31\0\2\3\1\0"+
    "\1\317\37\3\31\0\2\3\1\0\33\3\1\61\4\3"+
    "\31\0\2\3\1\0\17\3\1\170\20\3\31\0\2\3"+
    "\1\0\1\320\37\3\31\0\2\3\1\0\15\3\1\154"+
    "\22\3\31\0\2\3\1\0\2\3\1\321\35\3\31\0"+
    "\2\3\1\0\1\3\1\322\36\3\31\0\2\3\1\0"+
    "\25\3\1\323\12\3\31\0\2\3\1\0\22\3\1\324"+
    "\15\3\31\0\2\3\1\0\1\3\1\325\36\3\31\0"+
    "\2\3\1\0\16\3\1\233\21\3\31\0\2\3\1\0"+
    "\20\3\1\326\17\3\31\0\2\3\1\0\17\3\1\61"+
    "\20\3\31\0\2\3\1\0\13\3\1\170\24\3\31\0"+
    "\2\3\1\0\12\3\1\327\25\3\31\0\2\3\1\0"+
    "\25\3\1\61\12\3\31\0\2\3\1\0\16\3\1\61"+
    "\21\3\31\0\2\3\1\0\16\3\1\174\21\3\31\0"+
    "\2\3\1\0\13\3\1\330\24\3\31\0\2\3\1\0"+
    "\22\3\1\331\15\3\31\0\2\3\1\0\2\3\1\332"+
    "\35\3\31\0\2\3\1\0\13\3\1\333\24\3\31\0"+
    "\2\3\1\0\13\3\1\234\24\3\31\0\2\3\1\0"+
    "\17\3\1\323\20\3\31\0\2\3\1\0\26\3\1\153"+
    "\11\3\31\0\2\3\1\0\26\3\1\334\11\3\31\0"+
    "\2\3\1\0\1\335\37\3\31\0\2\3\1\0\20\3"+
    "\1\234\17\3\31\0\2\3\1\0\1\3\1\61\36\3"+
    "\31\0\2\3\1\0\24\3\1\61\13\3\31\0\2\3"+
    "\1\0\25\3\1\336\12\3\31\0\2\3\1\0\25\3"+
    "\1\337\12\3\31\0\2\3\1\0\13\3\1\70\24\3"+
    "\31\0\2\3\1\0\16\3\1\340\21\3\31\0\2\3"+
    "\1\0\2\3\1\341\35\3\31\0\2\3\1\0\14\3"+
    "\1\342\23\3\31\0\2\3\1\0\22\3\1\70\15\3"+
    "\31\0\2\3\1\0\14\3\1\234\23\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\3\1\1\11\4\1\2\11"+
    "\2\1\7\11\53\1\1\0\1\11\1\1\13\11\46\1"+
    "\2\0\43\1\1\0\1\11\27\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return AbreLlave;
          }
        case 41: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 42: break;
        case 34: 
          { return CorrerALaIzquierda;
          }
        case 43: break;
        case 13: 
          { return Asignacion;
          }
        case 44: break;
        case 36: 
          { return CorrerALaDerecha;
          }
        case 45: break;
        case 23: 
          { return CierraLlave;
          }
        case 46: break;
        case 15: 
          { return MenorQue;
          }
        case 47: break;
        case 38: 
          { return Sume;
          }
        case 48: break;
        case 21: 
          { return CierraCorchete;
          }
        case 49: break;
        case 28: 
          { lexeme=yytext(); return Reservadas;
          }
        case 50: break;
        case 10: 
          { return Not;
          }
        case 51: break;
        case 12: 
          { return Potencia;
          }
        case 52: break;
        case 11: 
          { return And;
          }
        case 53: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 54: break;
        case 27: 
          { lexeme=yytext(); return Flotante;
          }
        case 55: break;
        case 29: 
          { return Reste;
          }
        case 56: break;
        case 31: 
          { return Diferencia;
          }
        case 57: break;
        case 37: 
          { return Multiplique;
          }
        case 58: break;
        case 5: 
          { return AbreParentesis;
          }
        case 59: break;
        case 20: 
          { return AbreCorchete;
          }
        case 60: break;
        case 19: 
          { return Suma;
          }
        case 61: break;
        case 17: 
          { return Porcentaje;
          }
        case 62: break;
        case 7: 
          { return Punto;
          }
        case 63: break;
        case 24: 
          { return Interrogacion;
          }
        case 64: break;
        case 6: 
          { return Resta;
          }
        case 65: break;
        case 35: 
          { return MayorOIgualQue;
          }
        case 66: break;
        case 40: 
          { lexeme=yytext(); return Transac;
          }
        case 67: break;
        case 39: 
          { lexeme=yytext(); return Units;
          }
        case 68: break;
        case 8: 
          { return CierraParentesis;
          }
        case 69: break;
        case 32: 
          { return Comparacion;
          }
        case 70: break;
        case 26: 
          { return PuntoYComa;
          }
        case 71: break;
        case 1: 
          { return ERROR;
          }
        case 72: break;
        case 25: 
          { return DosPuntos;
          }
        case 73: break;
        case 30: 
          { return Divida;
          }
        case 74: break;
        case 18: 
          { return Multiplicacion;
          }
        case 75: break;
        case 4: 
          { /*Ignore*/
          }
        case 76: break;
        case 33: 
          { return MenorOIgualQue;
          }
        case 77: break;
        case 16: 
          { return MayorQue;
          }
        case 78: break;
        case 14: 
          { return Or;
          }
        case 79: break;
        case 9: 
          { return Division;
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
