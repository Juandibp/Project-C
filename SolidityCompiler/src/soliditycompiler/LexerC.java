/* The following code was generated by JFlex 1.4.3 on 7/25/20 4:11 PM */

package soliditycompiler;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import soliditycompiler.SError;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/25/20 4:11 PM from the specification file
 * <tt>D:/GitHub/Project-C/SolidityCompiler/src/soliditycompiler/ScannerC.flex</tt>
 */
class LexerC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 39,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    40, 43, 62,  4,  4, 51, 44, 62, 53, 54, 38, 52,  5, 42, 41, 37, 
     2, 12,  9, 14, 10, 15, 13,  2, 11,  2, 60, 61, 48, 46, 49, 59, 
     0, 63, 63, 63, 63, 63, 63,  1,  1,  1,  1,  1,  1,  1, 65,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 55, 64, 56, 45,  1, 
     0, 20, 23, 27, 21, 17, 16, 31, 33,  6,  1, 25, 18, 29,  7, 24, 
    30,  1, 22, 19,  8, 28, 32, 35, 34, 26, 36, 57, 47, 58, 50,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\21\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\1\1\2"+
    "\3\35\1\36\1\2\1\37\17\2\1\40\3\2\1\41"+
    "\26\2\1\4\1\0\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\34\1\57\2\0\1\60\2\0\1\61\7\2\1\62"+
    "\36\2\1\63\2\2\1\64\2\2\1\65\1\0\1\56"+
    "\2\0\1\60\1\66\1\67\1\70\6\2\1\71\1\72"+
    "\2\2\1\73\1\2\1\74\1\2\1\75\2\2\1\76"+
    "\6\2\1\77\3\2\1\100\1\101\1\2\1\102\2\2"+
    "\1\103\10\2\1\104\1\0\3\2\3\0\1\34\1\0"+
    "\2\2\1\105\1\106\1\107\4\2\1\110\1\2\1\111"+
    "\4\2\1\112\5\2\1\113\1\114\1\115\1\116\3\2"+
    "\1\117\1\120\4\2\1\121\1\122\1\123\13\2\1\0"+
    "\1\124\1\125\1\126\1\0\1\127\1\0\1\65\1\34"+
    "\1\130\1\131\1\2\1\132\1\2\1\133\1\2\1\134"+
    "\1\135\3\2\1\136\1\2\1\137\3\2\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\11\2\1\146\1\147\1\150"+
    "\1\151\5\2\1\152\1\153\1\154\1\0\1\127\3\2"+
    "\1\155\1\2\1\156\1\2\1\157\1\160\1\161\1\162"+
    "\2\2\1\163\1\164\1\165\4\2\1\166\1\167\1\170"+
    "\1\171\1\2\1\172\1\173\1\0\1\65\1\174\1\175"+
    "\1\176\1\177\1\2\1\200\1\201\1\202\1\203\1\204"+
    "\4\2\1\205\2\2\1\206\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\102\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\102\0\102\0\u0840\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\204\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\204\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\204\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\u1566"+
    "\0\102\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\204\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\204\0\u20be\0\u2100"+
    "\0\204\0\u2142\0\u2184\0\u21c6\0\u2208\0\u2208\0\u224a\0\u228c"+
    "\0\u166e\0\u22ce\0\u0906\0\u0906\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\204\0\204\0\u249c\0\u24de\0\204\0\u2520"+
    "\0\204\0\u2562\0\204\0\u25a4\0\u25e6\0\204\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\204\0\u27b4\0\u27f6\0\u2838"+
    "\0\204\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\204"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\102"+
    "\0\u2de4\0\u2e26\0\u2e68\0\u0906\0\u0906\0\u0906\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\204\0\u2fb2\0\204\0\u2ff4\0\u3036\0\u3078"+
    "\0\u30ba\0\204\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\204"+
    "\0\u3246\0\u0906\0\u0906\0\u3288\0\u32ca\0\u330c\0\u334e\0\204"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u0906\0\u0906\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\204\0\204\0\204\0\u37f2\0\u2d1e"+
    "\0\u3834\0\u3876\0\u2208\0\u0906\0\u0906\0\u38b8\0\204\0\u38fa"+
    "\0\204\0\u393c\0\204\0\204\0\u397e\0\u39c0\0\u3a02\0\204"+
    "\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u0906\0\u0906\0\u0906"+
    "\0\u3b8e\0\u0906\0\u0906\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8"+
    "\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u0906\0\u0906\0\u0906\0\204"+
    "\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\204\0\204\0\u3f6c"+
    "\0\u3fae\0\u21c6\0\u3ff0\0\u4032\0\u4074\0\204\0\u40b6\0\204"+
    "\0\u40f8\0\204\0\204\0\u0906\0\u0906\0\u413a\0\u417c\0\u0906"+
    "\0\u0906\0\u0906\0\u41be\0\u4200\0\u4242\0\u4284\0\u0906\0\u0906"+
    "\0\204\0\204\0\u42c6\0\204\0\204\0\u4308\0\u3834\0\204"+
    "\0\204\0\204\0\204\0\u434a\0\u0906\0\u0906\0\204\0\204"+
    "\0\204\0\u438c\0\u43ce\0\u4410\0\u4452\0\204\0\u4494\0\u44d6"+
    "\0\204\0\204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\5\1\6\1\3"+
    "\1\7\7\4\1\10\1\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\2\3\1\17\1\20\1\21\1\22\1\23"+
    "\1\3\1\24\1\25\1\3\1\26\1\3\1\27\1\30"+
    "\2\5\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\3"+
    "\1\57\1\3\103\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\62\1\4\3\0\3\62\7\4\1\62"+
    "\1\63\23\62\4\0\1\64\25\0\1\62\1\0\1\62"+
    "\3\0\1\5\1\0\1\5\41\0\2\5\32\0\1\3"+
    "\1\60\1\0\2\61\1\3\1\65\1\3\7\60\1\66"+
    "\14\3\1\67\7\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\6\3\1\70\12\3\1\71\3\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\1\72\2\3\7\60\4\3\1\73\1\3"+
    "\1\74\1\3\1\75\3\3\1\76\10\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\1\3\1\77\1\100\7\60\2\3\1\101"+
    "\22\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\2\3\1\102\7\60"+
    "\1\3\1\103\6\3\1\104\13\3\1\105\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\3\3\1\106\1\3\1\107"+
    "\17\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\110\2\3\1\111\3\3\1\112\14\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\113\23\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\4\3\1\114\1\3"+
    "\1\115\1\3\1\116\1\3\1\117\12\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\120\23\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\4\3\1\121\3\3"+
    "\1\122\14\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\1\123\2\3"+
    "\7\60\1\124\24\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\1\125"+
    "\2\3\7\60\4\3\1\126\3\3\1\127\14\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\4\3\1\130\1\3"+
    "\1\131\5\3\1\132\10\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\1\133\2\3\7\60\4\3\1\134\20\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\135\6\3\1\136"+
    "\14\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\137\17\3\1\140\3\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\45\0\1\141\1\142\7\0\1\143"+
    "\71\0\1\35\7\0\1\144\25\0\1\64\6\0\7\64"+
    "\140\0\1\145\101\0\1\146\77\0\1\147\103\0\1\150"+
    "\102\0\1\151\100\0\1\152\1\0\1\153\77\0\1\154"+
    "\2\0\1\155\76\0\1\156\24\0\2\56\1\0\42\56"+
    "\2\0\1\56\1\0\2\56\2\0\2\56\3\0\1\56"+
    "\7\0\1\56\1\0\1\56\1\157\1\56\1\160\1\56"+
    "\7\0\1\161\24\0\1\162\5\0\1\163\40\0\2\60"+
    "\3\0\37\60\32\0\1\60\1\0\1\60\1\0\1\61"+
    "\2\0\5\61\7\0\26\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\3\61"+
    "\1\0\2\62\3\0\37\62\32\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\164\3\0\3\62\7\164\25\62\5\0"+
    "\1\165\24\0\1\62\1\0\1\62\2\0\1\64\6\0"+
    "\7\64\1\0\1\166\61\0\1\3\1\60\1\0\2\61"+
    "\2\3\1\167\7\60\25\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\16\3\1\170\6\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\4\3\1\171\7\3\1\172\10\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\1\173\2\3\7\60\25\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\1\3\1\174\1\3\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\2\3"+
    "\1\175\22\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\10\3\1\176\14\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\6\3\1\177\16\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\1\3\1\200\1\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\14\3\1\201\10\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\21\3\1\202\3\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\3\3\1\203\21\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\6\3\1\204"+
    "\16\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\1\3\1\205\1\3"+
    "\7\60\13\3\1\206\11\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\2\3\1\207\22\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\4\3\1\210\20\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\5\3\1\211\17\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\2\3\1\212\22\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\12\3\1\213"+
    "\12\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\2\3\1\214\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\2\3"+
    "\1\215\22\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\216\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\10\3\1\217\14\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\2\3\1\220\7\60\25\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\4\3\1\221\20\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\2\3\1\222\22\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\1\3\1\223\1\3\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\1\3\1\224\1\3\7\60\25\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\1\225\2\3\7\60\25\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\1\3\1\226\1\3\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\16\3"+
    "\1\227\6\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\5\3\1\230\17\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\12\3\1\231\12\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\1\232\2\3\7\60\4\3\1\233\20\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\7\3\1\234\15\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\1\3\1\235\23\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\6\3\1\236"+
    "\16\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\22\3"+
    "\1\237\2\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\14\3\1\240\10\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\1\241"+
    "\2\3\7\60\1\3\1\242\23\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\1\243\2\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\47\141\1\0\32\141\46\0"+
    "\1\244\33\0\1\245\2\56\1\245\42\56\1\245\1\0"+
    "\1\56\1\245\2\56\2\245\2\56\3\245\1\56\7\245"+
    "\1\56\1\245\1\56\1\246\1\56\1\160\1\56\101\0"+
    "\1\247\101\0\1\250\1\0\1\62\1\164\3\0\3\62"+
    "\7\164\25\62\32\0\1\62\1\0\1\62\2\0\1\251"+
    "\6\0\7\251\64\0\1\251\6\0\7\251\32\0\1\165"+
    "\30\0\1\3\1\60\1\0\2\61\3\3\1\252\1\253"+
    "\1\254\1\255\1\256\1\257\1\60\1\3\1\260\23\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\10\3\1\261"+
    "\14\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\1\3\1\262\1\3"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\263\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\3\3\1\264\21\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\1\3\1\265\1\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\3\3\1\266\21\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\15\3\1\267\7\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\13\3\1\270\11\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\15\3\1\271"+
    "\7\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\272\23\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\273\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\1\274"+
    "\2\3\7\60\14\3\1\275\10\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\5\3\1\276\17\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\10\3\1\277\14\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\1\300\2\3\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\7\3\1\301\15\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\6\3\1\302"+
    "\16\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\303\15\3\1\304\5\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\3\3\1\305\21\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\14\3\1\306\10\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\4\3\1\307\20\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\4\3\1\310\20\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\2\3\1\311"+
    "\22\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\312\23\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\6\3\1\313\16\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\2\3\1\314\22\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\2\3\1\315\7\60\3\3\1\316\21\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\2\3\1\317\7\60\25\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\22\3\1\320\2\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\14\3\1\321\10\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\16\3\1\322"+
    "\6\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\5\3"+
    "\1\323\17\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\4\3\1\324\20\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\20\3\1\325\4\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\17\3\1\326\5\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\2\3\1\327\22\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\23\3\1\330\1\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\25\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\331\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\6\3\1\332\16\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\11\3\1\333\13\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\2\3\1\334"+
    "\22\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\335\2\244\1\335\42\244\1\336\1\337\1\244\1\335"+
    "\2\244\2\335\2\244\3\335\1\244\7\335\1\244\1\335"+
    "\1\244\1\335\3\244\1\0\2\245\1\0\42\245\2\0"+
    "\1\245\1\0\2\245\2\0\2\245\3\0\1\245\7\0"+
    "\1\245\1\0\1\245\1\340\1\245\1\341\1\245\101\0"+
    "\1\163\101\0\1\161\1\0\2\60\3\0\11\60\1\342"+
    "\25\60\32\0\1\60\1\0\1\60\1\0\2\60\3\0"+
    "\3\60\1\343\3\60\1\344\27\60\32\0\1\60\1\0"+
    "\1\60\1\0\2\60\3\0\4\60\1\345\32\60\32\0"+
    "\1\60\1\0\1\60\1\0\2\60\3\0\3\60\1\346"+
    "\33\60\32\0\1\60\1\0\1\60\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\6\3\1\347\16\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\6\3\1\350\16\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\3\3\1\351"+
    "\21\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\352\23\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\353\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\2\3"+
    "\1\354\7\60\25\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\6\3\1\355\16\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\1\3\1\356\1\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\13\3\1\357\11\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\1\3\1\360\1\3\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\5\3\1\361\17\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\10\3\1\362"+
    "\14\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\3"+
    "\1\363\23\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\2\3\1\364"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\4\3\1\365\20\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\6\3\1\366\16\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\1\3\1\367\1\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\11\3\1\370\13\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\1\371\1\372\1\373\1\374\1\375"+
    "\1\376\1\60\3\3\1\377\21\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\3\3\1\u0100\21\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\13\3\1\u0101\11\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\1\u0102\2\3\7\60\6\3\1\u0103"+
    "\16\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\2\3\1\u0104\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\1\u0105\1\u0106"+
    "\1\u0107\1\u0108\1\u0109\1\u010a\1\60\25\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\u010b\23\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\2\3\1\u010c\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\1\u010d\2\3\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\1\u010e\2\3\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\7\3\1\u010f\15\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\4\3\1\u0110"+
    "\20\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\15\3"+
    "\1\u0111\7\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\1\u0112\2\3"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\2\0\1\u0113\6\0\7\u0113\57\0\1\u0113\3\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\3\3\1\u0114"+
    "\21\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\3\3"+
    "\1\u0115\21\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\u0116\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\46\335\1\336\1\u0117\77\335\1\u0118\1\336"+
    "\1\u0117\32\335\46\u0119\1\u011a\33\u0119\47\245\1\0\26\245"+
    "\1\u011b\1\245\1\341\1\245\1\0\2\60\3\0\7\60"+
    "\1\u011c\27\60\32\0\1\60\1\0\1\60\1\0\2\60"+
    "\3\0\5\60\1\u011d\31\60\32\0\1\60\1\0\1\60"+
    "\1\0\1\3\1\60\1\0\2\61\1\3\1\u011e\1\3"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\2\3\1\u011f"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\u0120\24\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\12\3\1\u0121\12\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\1\u0122"+
    "\2\3\7\60\25\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\17\3\1\u0123\5\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\2\3\1\u0124\7\60\25\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\5\3\1\u0125\17\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\1\u0126\2\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\3\3\1\u0127\21\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\u0128\23\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\2\3\1\u0129\7\60\25\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\1\3\1\u012a\1\3\7\60\25\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\13\3\1\u012b"+
    "\11\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\2\60\3\0\11\60\1\u012c\25\60\32\0\1\60"+
    "\1\0\1\60\1\0\2\60\3\0\3\60\1\u012d\3\60"+
    "\1\u012e\27\60\32\0\1\60\1\0\1\60\1\0\2\60"+
    "\3\0\4\60\1\u012f\32\60\32\0\1\60\1\0\1\60"+
    "\1\0\2\60\3\0\3\60\1\u0130\33\60\32\0\1\60"+
    "\1\0\1\60\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135\1\u0136\1\60\25\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\10\3\1\u0137"+
    "\14\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\1\3\1\u0138\1\3"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\4\3\1\u0139\20\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\6\3\1\u013a\16\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\2\60\3\0\11\60\1\u013b"+
    "\25\60\32\0\1\60\1\0\1\60\1\0\2\60\3\0"+
    "\3\60\1\u013c\3\60\1\u013d\27\60\32\0\1\60\1\0"+
    "\1\60\1\0\2\60\3\0\4\60\1\u013e\32\60\32\0"+
    "\1\60\1\0\1\60\1\0\2\60\3\0\3\60\1\u013f"+
    "\33\60\32\0\1\60\1\0\1\60\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\5\3\1\u0140\17\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\1\3\1\u0141\23\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\1\3\1\u0142\1\3\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\1\u0143"+
    "\24\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\2\3"+
    "\1\u0144\22\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\2\3\1\u0145"+
    "\7\60\25\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\4\3\1\u0146\20\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\13\3\1\u0147\11\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\2\0\1\u0113\6\0\7\u0113\56\0"+
    "\1\u0148\1\u0113\2\0\46\u0119\1\336\101\u0119\1\u0149\33\u0119"+
    "\1\335\2\244\1\335\41\244\1\u014a\1\336\1\337\1\244"+
    "\1\335\2\244\2\335\2\244\3\335\1\244\7\335\1\244"+
    "\1\335\1\244\1\335\3\244\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\4\3\1\u014b\20\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\u014c\23\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\10\3\1\u014d\14\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\3\3\1\u014e"+
    "\21\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\2\3\1\u014f\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\3\3"+
    "\1\u0150\21\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\u0151\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\3\3\1\u0152\21\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\1\3\1\u0153\23\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\2\60\3\0\7\60"+
    "\1\u0154\27\60\32\0\1\60\1\0\1\60\1\0\2\60"+
    "\3\0\5\60\1\u0155\31\60\32\0\1\60\1\0\1\60"+
    "\1\0\2\60\3\0\11\60\1\u0156\25\60\32\0\1\60"+
    "\1\0\1\60\1\0\2\60\3\0\3\60\1\u0157\3\60"+
    "\1\u0158\27\60\32\0\1\60\1\0\1\60\1\0\2\60"+
    "\3\0\4\60\1\u0159\32\60\32\0\1\60\1\0\1\60"+
    "\1\0\2\60\3\0\3\60\1\u015a\33\60\32\0\1\60"+
    "\1\0\1\60\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\5\3\1\u015b\17\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\14\3\1\u015c\10\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\13\3\1\u015d\11\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\14\3\1\u015e\10\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\2\60"+
    "\3\0\7\60\1\u015f\27\60\32\0\1\60\1\0\1\60"+
    "\1\0\2\60\3\0\5\60\1\u0160\31\60\32\0\1\60"+
    "\1\0\1\60\1\0\1\3\1\60\1\0\2\61\3\3"+
    "\7\60\3\3\1\u0161\21\3\1\61\4\0\2\61\2\0"+
    "\2\61\3\0\1\61\7\0\1\61\1\0\1\61\1\0"+
    "\1\3\1\61\1\3\1\0\1\3\1\60\1\0\2\61"+
    "\3\3\7\60\17\3\1\u0162\5\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\1\u0163\2\3\7\60\25\3\1\61\4\0\2\61"+
    "\2\0\2\61\3\0\1\61\7\0\1\61\1\0\1\61"+
    "\1\0\1\3\1\61\1\3\1\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\1\3\1\u0164\23\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\1\3\1\u0165\23\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\100\0\1\u0166"+
    "\1\0\45\u0119\1\u0167\1\u0149\33\u0119\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\2\3\1\u0168\22\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\6\3\1\u0169\16\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\1\3\1\u016a\1\3\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\12\3"+
    "\1\u016b\12\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\13\3\1\u016c\11\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\1\0\2\60\3\0\7\60\1\u016d\27\60"+
    "\32\0\1\60\1\0\1\60\1\0\2\60\3\0\5\60"+
    "\1\u016e\31\60\32\0\1\60\1\0\1\60\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\1\3\1\u016f\23\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\1\3\1\u0170"+
    "\23\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\2\3\1\u0171\7\60"+
    "\25\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\13\3"+
    "\1\u0172\11\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\1\3\1\u0173\23\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3\7\0\1\u0148\73\0\1\3\1\60\1\0"+
    "\2\61\3\3\7\60\4\3\1\u0174\20\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\2\3\1\u0175\7\60\25\3\1\61\4\0"+
    "\2\61\2\0\2\61\3\0\1\61\7\0\1\61\1\0"+
    "\1\61\1\0\1\3\1\61\1\3\1\0\1\3\1\60"+
    "\1\0\2\61\3\3\7\60\6\3\1\u0176\16\3\1\61"+
    "\4\0\2\61\2\0\2\61\3\0\1\61\7\0\1\61"+
    "\1\0\1\61\1\0\1\3\1\61\1\3\1\0\1\3"+
    "\1\60\1\0\2\61\3\3\7\60\2\3\1\u0177\22\3"+
    "\1\61\4\0\2\61\2\0\2\61\3\0\1\61\7\0"+
    "\1\61\1\0\1\61\1\0\1\3\1\61\1\3\1\0"+
    "\1\3\1\60\1\0\2\61\3\3\7\60\10\3\1\u0178"+
    "\14\3\1\61\4\0\2\61\2\0\2\61\3\0\1\61"+
    "\7\0\1\61\1\0\1\61\1\0\1\3\1\61\1\3"+
    "\1\0\1\3\1\60\1\0\2\61\3\3\7\60\2\3"+
    "\1\u0179\22\3\1\61\4\0\2\61\2\0\2\61\3\0"+
    "\1\61\7\0\1\61\1\0\1\61\1\0\1\3\1\61"+
    "\1\3\1\0\1\3\1\60\1\0\2\61\3\3\7\60"+
    "\6\3\1\u017a\16\3\1\61\4\0\2\61\2\0\2\61"+
    "\3\0\1\61\7\0\1\61\1\0\1\61\1\0\1\3"+
    "\1\61\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\11\4\1\2\11\1\1\11\11"+
    "\64\1\1\0\15\11\1\1\1\11\2\0\1\1\2\0"+
    "\56\1\1\0\1\1\2\0\60\1\1\0\3\1\3\0"+
    "\1\11\1\0\61\1\1\0\3\1\1\0\1\1\1\0"+
    "\57\1\1\0\34\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //una lista para manejar los errores, esto tambien se aplica en el .cup
    //notese que cuando se encuentra un error, crea un SError, le asigna los detalles (entre ellos la especificacion del error)
    //y ademas lo agrega a la lista antes de retornarlo.
    public static LinkedList<SError> ListaErrores = new LinkedList<SError>(); 
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerC(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerC(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return new Symbol(sym.Res_If, yychar, yyline, yytext());
          }
        case 136: break;
        case 27: 
          { return new Symbol(sym.PuntoYComa, yychar, yyline, yytext());
          }
        case 137: break;
        case 133: 
          { return new Symbol(sym.Res_Moddifier, yychar, yyline, yytext());
          }
        case 138: break;
        case 56: 
          { return new Symbol(sym.Res_Int8, yychar, yyline, yytext());
          }
        case 139: break;
        case 50: 
          { return new Symbol(sym.Res_For, yychar, yyline, yytext());
          }
        case 140: break;
        case 26: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 141: break;
        case 86: 
          { return new Symbol(sym.Res_While, yychar, yyline, yytext());
          }
        case 142: break;
        case 33: 
          { return new Symbol(sym.Res_Do, yychar, yyline, yytext());
          }
        case 143: break;
        case 112: 
          { return new Symbol(sym.Trans_Balance, yychar, yyline, yytext());
          }
        case 144: break;
        case 42: 
          { return new Symbol(sym.CorrerALaIzquierda, yychar, yyline, yytext());
          }
        case 145: break;
        case 79: 
          { return new Symbol(sym.Res_Bytes, yychar, yyline, yytext());
          }
        case 146: break;
        case 104: 
          { return new Symbol(sym.Res_Uint32, yychar, yyline, yytext());
          }
        case 147: break;
        case 71: 
          { return new Symbol(sym.Res_Int32, yychar, yyline, yytext());
          }
        case 148: break;
        case 23: 
          { return new Symbol(sym.AbreLlave, yychar, yyline, yytext());
          }
        case 149: break;
        case 96: 
          { return new Symbol(sym.Res_Byte16, yychar, yyline, yytext());
          }
        case 150: break;
        case 58: 
          { return new Symbol(sym.Res_This, yychar, yyline, yytext());
          }
        case 151: break;
        case 85: 
          { return new Symbol(sym.Unit_Weeks, yychar, yyline, yytext());
          }
        case 152: break;
        case 65: 
          { return new Symbol(sym.Res_Byte, yychar, yyline, yytext());
          }
        case 153: break;
        case 116: 
          { return new Symbol(sym.Res_Bytes64, yychar, yyline, yytext());
          }
        case 154: break;
        case 68: 
          { return new Symbol(sym.Res_View, yychar, yyline, yytext());
          }
        case 155: break;
        case 113: 
          { return new Symbol(sym.Res_Byte256, yychar, yyline, yytext());
          }
        case 156: break;
        case 121: 
          { return new Symbol(sym.Res_Mapping, yychar, yyline, yytext());
          }
        case 157: break;
        case 105: 
          { return new Symbol(sym.Res_Ufixed, yychar, yyline, yytext());
          }
        case 158: break;
        case 84: 
          { return new Symbol(sym.Unit_Hours, yychar, yyline, yytext());
          }
        case 159: break;
        case 62: 
          { return new Symbol(sym.Trans_Send, yychar, yyline, yytext());
          }
        case 160: break;
        case 14: 
          { return new Symbol(sym.MenorQue, yychar, yyline, yytext());
          }
        case 161: break;
        case 4: 
          { /*Ignore*/
          }
        case 162: break;
        case 59: 
          { return new Symbol(sym.Res_From, yychar, yyline, yytext());
          }
        case 163: break;
        case 38: 
          { return new Symbol(sym.AndLogico, yychar, yyline, yytext());
          }
        case 164: break;
        case 21: 
          { return new Symbol(sym.AbreCorchete, yychar, yyline, yytext());
          }
        case 165: break;
        case 32: 
          { return new Symbol(sym.Res_As, yychar, yyline, yytext());
          }
        case 166: break;
        case 47: 
          { return new Symbol(sym.Escape, yychar, yyline, yytext());
          }
        case 167: break;
        case 77: 
          { return new Symbol(sym.Res_Byte4, yychar, yyline, yytext());
          }
        case 168: break;
        case 126: 
          { return new Symbol(sym.Res_Function, yychar, yyline, yytext());
          }
        case 169: break;
        case 46: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 170: break;
        case 99: 
          { return new Symbol(sym.Res_Bytes2, yychar, yyline, yytext());
          }
        case 171: break;
        case 93: 
          { return new Symbol(sym.Res_Struct, yychar, yyline, yytext());
          }
        case 172: break;
        case 6: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 173: break;
        case 128: 
          { return new Symbol(sym.Res_Bytes256, yychar, yyline, yytext());
          }
        case 174: break;
        case 120: 
          { return new Symbol(sym.Unit_Minutes, yychar, yyline, yytext());
          }
        case 175: break;
        case 20: 
          { return new Symbol(sym.CierraParentesis, yychar, yyline, yytext());
          }
        case 176: break;
        case 115: 
          { return new Symbol(sym.Res_Bytes16, yychar, yyline, yytext());
          }
        case 177: break;
        case 82: 
          { return new Symbol(sym.Res_Uint4, yychar, yyline, yytext());
          }
        case 178: break;
        case 78: 
          { return new Symbol(sym.Res_Byte8, yychar, yyline, yytext());
          }
        case 179: break;
        case 89: 
          { return new Symbol(sym.Res_Int128, yychar, yyline, yytext());
          }
        case 180: break;
        case 73: 
          { return new Symbol(sym.Unit_Ether, yychar, yyline, yytext());
          }
        case 181: break;
        case 70: 
          { return new Symbol(sym.Res_Int64, yychar, yyline, yytext());
          }
        case 182: break;
        case 19: 
          { return new Symbol(sym.AbreParentesis, yychar, yyline, yytext());
          }
        case 183: break;
        case 87: 
          { return new Symbol(sym.ComentarioBloque, yychar, yyline, yytext());
          }
        case 184: break;
        case 91: 
          { return new Symbol(sym.Unit_Finney, yychar, yyline, yytext());
          }
        case 185: break;
        case 54: 
          { return new Symbol(sym.Res_Int2, yychar, yyline, yytext());
          }
        case 186: break;
        case 13: 
          { return new Symbol(sym.OrBits, yychar, yyline, yytext());
          }
        case 187: break;
        case 110: 
          { return new Symbol(sym.Res_Address, yychar, yyline, yytext());
          }
        case 188: break;
        case 109: 
          { return new Symbol(sym.Unit_Seconds, yychar, yyline, yytext());
          }
        case 189: break;
        case 108: 
          { return new Symbol(sym.Hexadecimal, yychar, yyline, yytext());
          }
        case 190: break;
        case 60: 
          { return new Symbol(sym.Res_Enum, yychar, yyline, yytext());
          }
        case 191: break;
        case 90: 
          { return new Symbol(sym.Res_Import, yychar, yyline, yytext());
          }
        case 192: break;
        case 83: 
          { return new Symbol(sym.Res_Uint8, yychar, yyline, yytext());
          }
        case 193: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 194: break;
        case 52: 
          { return new Symbol(sym.Unit_Wei, yychar, yyline, yytext());
          }
        case 195: break;
        case 119: 
          { return new Symbol(sym.Res_Uint128, yychar, yyline, yytext());
          }
        case 196: break;
        case 103: 
          { return new Symbol(sym.Res_Uint64, yychar, yyline, yytext());
          }
        case 197: break;
        case 75: 
          { return new Symbol(sym.Res_Break, yychar, yyline, yytext());
          }
        case 198: break;
        case 57: 
          { return new Symbol(sym.Res_True, yychar, yyline, yytext());
          }
        case 199: break;
        case 22: 
          { return new Symbol(sym.CierraCorchete, yychar, yyline, yytext());
          }
        case 200: break;
        case 63: 
          { return new Symbol(sym.Unit_Days, yychar, yyline, yytext());
          }
        case 201: break;
        case 11: 
          { return new Symbol(sym.Potencia, yychar, yyline, yytext());
          }
        case 202: break;
        case 10: 
          { return new Symbol(sym.AndBits, yychar, yyline, yytext());
          }
        case 203: break;
        case 18: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 204: break;
        case 98: 
          { return new Symbol(sym.Res_Byte32, yychar, yyline, yytext());
          }
        case 205: break;
        case 92: 
          { return new Symbol(sym.Res_String, yychar, yyline, yytext());
          }
        case 206: break;
        case 29: 
          { SError dato = new SError(yytext(), yyline, yycolumn, "Error Léxico", "Identificador inválido"); ListaErrores.add(dato) ; return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 207: break;
        case 39: 
          { return new Symbol(sym.Comparacion, yychar, yyline, yytext());
          }
        case 208: break;
        case 53: 
          { SError dato = new SError(yytext(), yyline, yycolumn, "Error Léxico", "Comentario de bloque incorrecto"); ListaErrores.add(dato) ; return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 209: break;
        case 69: 
          { return new Symbol(sym.Res_Int16, yychar, yyline, yytext());
          }
        case 210: break;
        case 135: 
          { return new Symbol(sym.Res_Constructor, yychar, yyline, yytext());
          }
        case 211: break;
        case 107: 
          { return new Symbol(sym.Res_Public, yychar, yyline, yytext());
          }
        case 212: break;
        case 95: 
          { return new Symbol(sym.Res_Return, yychar, yyline, yytext());
          }
        case 213: break;
        case 74: 
          { return new Symbol(sym.Unit_Szabo, yychar, yyline, yytext());
          }
        case 214: break;
        case 130: 
          { return new Symbol(sym.Trans_Callcode, yychar, yyline, yytext());
          }
        case 215: break;
        case 122: 
          { return new Symbol(sym.Res_Payable, yychar, yyline, yytext());
          }
        case 216: break;
        case 34: 
          { return new Symbol(sym.Divida, yychar, yyline, yytext());
          }
        case 217: break;
        case 61: 
          { return new Symbol(sym.Res_Else, yychar, yyline, yytext());
          }
        case 218: break;
        case 37: 
          { return new Symbol(sym.Diferencia, yychar, yyline, yytext());
          }
        case 219: break;
        case 49: 
          { return new Symbol(sym.Res_Int, yychar, yyline, yytext());
          }
        case 220: break;
        case 66: 
          { return new Symbol(sym.Trans_Call, yychar, yyline, yytext());
          }
        case 221: break;
        case 48: 
          { return new Symbol(sym.Cientifico, yychar, yyline, yytext());
          }
        case 222: break;
        case 45: 
          { return new Symbol(sym.Sume, yychar, yyline, yytext());
          }
        case 223: break;
        case 28: 
          { SError dato = new SError(yytext(), yyline, yycolumn, "Error Léxico", "String no válido"); ListaErrores.add(dato) ; return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 224: break;
        case 111: 
          { return new Symbol(sym.Res_Returns, yychar, yyline, yytext());
          }
        case 225: break;
        case 88: 
          { return new Symbol(sym.Res_Int256, yychar, yyline, yytext());
          }
        case 226: break;
        case 102: 
          { return new Symbol(sym.Res_Uint16, yychar, yyline, yytext());
          }
        case 227: break;
        case 7: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 228: break;
        case 64: 
          { return new Symbol(sym.Res_Bool, yychar, yyline, yytext());
          }
        case 229: break;
        case 40: 
          { return new Symbol(sym.OrLogico, yychar, yyline, yytext());
          }
        case 230: break;
        case 134: 
          { return new Symbol(sym.Trans_Delgatecall, yychar, yyline, yytext());
          }
        case 231: break;
        case 123: 
          { return new Symbol(sym.Res_Private, yychar, yyline, yytext());
          }
        case 232: break;
        case 67: 
          { return new Symbol(sym.Res_Uint, yychar, yyline, yytext());
          }
        case 233: break;
        case 17: 
          { return new Symbol(sym.Porcentaje, yychar, yyline, yytext());
          }
        case 234: break;
        case 80: 
          { return new Symbol(sym.Unit_Years, yychar, yyline, yytext());
          }
        case 235: break;
        case 94: 
          { return new Symbol(sym.Res_Delete, yychar, yyline, yytext());
          }
        case 236: break;
        case 5: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 237: break;
        case 41: 
          { return new Symbol(sym.MenorOIgualQue, yychar, yyline, yytext());
          }
        case 238: break;
        case 16: 
          { return new Symbol(sym.NotBits, yychar, yyline, yytext());
          }
        case 239: break;
        case 1: 
          { SError dato = new SError(yytext(), yyline, yycolumn, "Error Léxico", "token inválido"); ListaErrores.add(dato) ; return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 240: break;
        case 76: 
          { return new Symbol(sym.Res_Byte2, yychar, yyline, yytext());
          }
        case 241: break;
        case 8: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 242: break;
        case 118: 
          { return new Symbol(sym.Res_Uint256, yychar, yyline, yytext());
          }
        case 243: break;
        case 35: 
          { return new Symbol(sym.Multiplique, yychar, yyline, yytext());
          }
        case 244: break;
        case 100: 
          { return new Symbol(sym.Res_Bytes4, yychar, yyline, yytext());
          }
        case 245: break;
        case 97: 
          { return new Symbol(sym.Res_Byte64, yychar, yyline, yytext());
          }
        case 246: break;
        case 127: 
          { return new Symbol(sym.Res_Solidity, yychar, yyline, yytext());
          }
        case 247: break;
        case 25: 
          { return new Symbol(sym.Interrogacion, yychar, yyline, yytext());
          }
        case 248: break;
        case 125: 
          { return new Symbol(sym.Trans_Transfer, yychar, yyline, yytext());
          }
        case 249: break;
        case 106: 
          { return new Symbol(sym.Res_Pragma, yychar, yyline, yytext());
          }
        case 250: break;
        case 132: 
          { return new Symbol(sym.Res_Contract, yychar, yyline, yytext());
          }
        case 251: break;
        case 81: 
          { return new Symbol(sym.Res_Uint2, yychar, yyline, yytext());
          }
        case 252: break;
        case 51: 
          { return new Symbol(sym.Res_Var, yychar, yyline, yytext());
          }
        case 253: break;
        case 24: 
          { return new Symbol(sym.CierraLlave, yychar, yyline, yytext());
          }
        case 254: break;
        case 36: 
          { return new Symbol(sym.Reste, yychar, yyline, yytext());
          }
        case 255: break;
        case 114: 
          { return new Symbol(sym.Res_Byte128, yychar, yyline, yytext());
          }
        case 256: break;
        case 44: 
          { return new Symbol(sym.CorrerALaDerecha, yychar, yyline, yytext());
          }
        case 257: break;
        case 117: 
          { return new Symbol(sym.Res_Bytes32, yychar, yyline, yytext());
          }
        case 258: break;
        case 101: 
          { return new Symbol(sym.Res_Bytes8, yychar, yyline, yytext());
          }
        case 259: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 260: break;
        case 129: 
          { return new Symbol(sym.Res_Bytes128, yychar, yyline, yytext());
          }
        case 261: break;
        case 131: 
          { return new Symbol(sym.Res_Continue, yychar, yyline, yytext());
          }
        case 262: break;
        case 9: 
          { return new Symbol(sym.NotLogico, yychar, yyline, yytext());
          }
        case 263: break;
        case 12: 
          { return new Symbol(sym.Asignacion, yychar, yyline, yytext());
          }
        case 264: break;
        case 30: 
          { return new Symbol(sym.Flotante, yychar, yyline, yytext());
          }
        case 265: break;
        case 55: 
          { return new Symbol(sym.Res_Int4, yychar, yyline, yytext());
          }
        case 266: break;
        case 15: 
          { return new Symbol(sym.MayorQue, yychar, yyline, yytext());
          }
        case 267: break;
        case 43: 
          { return new Symbol(sym.MayorOIgualQue, yychar, yyline, yytext());
          }
        case 268: break;
        case 124: 
          { return new Symbol(sym.Res_Internal, yychar, yyline, yytext());
          }
        case 269: break;
        case 72: 
          { return new Symbol(sym.Res_False, yychar, yyline, yytext());
          }
        case 270: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
