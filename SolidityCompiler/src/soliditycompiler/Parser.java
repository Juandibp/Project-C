
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 25 23:21:15 CST 2020
//----------------------------------------------------

package soliditycompiler;

import java_cup.runtime.Symbol;
import soliditycompiler.LexerC.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 25 23:21:15 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\321\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\002\000\002\004\007\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\002\000\002\007\007\000\002\013\004\000\002" +
    "\014\005\000\002\014\002\000\002\025\005\000\002\026" +
    "\004\000\002\026\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\027\010\000\002\045\003\000\002\045\005\000\002\042" +
    "\004\000\002\042\002\000\002\030\007\000\002\031\011" +
    "\000\002\032\011\000\002\033\003\000\002\034\003\000" +
    "\002\076\003\000\002\043\004\000\002\043\003\000\002" +
    "\044\004\000\002\035\004\000\002\036\004\000\002\037" +
    "\005\000\002\040\003\000\002\041\005\000\002\041\003" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\002\000\002\111\005" +
    "\000\002\112\005\000\002\112\003\000\002\113\004\000" +
    "\002\114\005\000\002\115\004\000\002\116\004\000\002" +
    "\117\004\000\002\120\004\000\002\121\004\000\002\046" +
    "\006\000\002\046\002\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\053\003\000" +
    "\002\053\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\047\004\000\002" +
    "\105\005\000\002\105\002\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\057\003" +
    "\000\002\057\003\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\002\000" +
    "\002\011\011\000\002\062\006\000\002\062\002\000\002" +
    "\012\015\000\002\063\004\000\002\063\003\000\002\122" +
    "\003\000\002\122\003\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\122\003\000" +
    "\002\064\003\000\002\064\002\000\002\065\004\000\002" +
    "\066\005\000\002\066\002\000\002\067\003\000\002\067" +
    "\002\000\002\070\005\000\002\071\006\000\002\071\002" +
    "\000\002\072\003\000\002\072\002\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\074\003\000\002" +
    "\074\002\000\002\075\007\000\002\015\004\000\002\077" +
    "\003\000\002\077\005\000\002\100\003\000\002\100\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\006\004\000\002\006\004\000\002\101\003\000" +
    "\002\101\002\000\002\102\004\000\002\103\004\000\002" +
    "\103\002\000\002\104\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\004\056\004\001\002\000\004\063\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\144\010\001\002\000\004\141\011\001\002\000" +
    "\004\141\012\001\002\000\004\176\013\001\002\000\006" +
    "\002\ufffe\046\015\001\002\000\006\002\ufffe\046\015\001" +
    "\002\000\006\066\017\210\021\001\002\000\004\002\000" +
    "\001\002\000\004\200\024\001\002\000\004\170\032\001" +
    "\002\000\102\143\uff35\144\uff35\145\uff35\146\uff35\147\uff35" +
    "\150\uff35\151\uff35\152\uff35\153\uff35\154\uff35\155\uff35\156" +
    "\uff35\157\uff35\161\uff35\162\uff35\163\uff35\164\uff35\165\uff35" +
    "\166\uff35\167\uff35\170\uff35\171\uff35\172\uff35\173\uff35\176" +
    "\uff35\177\uff35\200\024\201\uff35\202\uff35\203\uff35\204\uff35" +
    "\205\uff35\001\002\000\102\143\uff36\144\uff36\145\uff36\146" +
    "\uff36\147\uff36\150\uff36\151\uff36\152\uff36\153\uff36\154\uff36" +
    "\155\uff36\156\uff36\157\uff36\161\uff36\162\uff36\163\uff36\164" +
    "\uff36\165\uff36\166\uff36\167\uff36\170\uff36\171\uff36\172\uff36" +
    "\173\uff36\176\uff36\177\uff36\200\uff36\201\uff36\202\uff36\203" +
    "\uff36\204\uff36\205\uff36\001\002\000\102\143\uff38\144\uff38" +
    "\145\uff38\146\uff38\147\uff38\150\uff38\151\uff38\152\uff38\153" +
    "\uff38\154\uff38\155\uff38\156\uff38\157\uff38\161\uff38\162\uff38" +
    "\163\uff38\164\uff38\165\uff38\166\uff38\167\uff38\170\uff38\171" +
    "\uff38\172\uff38\173\uff38\176\uff38\177\uff38\200\uff38\201\uff38" +
    "\202\uff38\203\uff38\204\uff38\205\uff38\001\002\000\004\210" +
    "\025\001\002\000\102\143\uff32\144\uff32\145\uff32\146\uff32" +
    "\147\uff32\150\uff32\151\uff32\152\uff32\153\uff32\154\uff32\155" +
    "\uff32\156\uff32\157\uff32\161\uff32\162\uff32\163\uff32\164\uff32" +
    "\165\uff32\166\027\167\uff32\170\uff32\171\uff32\172\uff32\173" +
    "\uff32\176\uff32\177\uff32\200\uff32\201\uff32\202\uff32\203\uff32" +
    "\204\uff32\205\uff32\001\002\000\102\143\uff31\144\uff31\145" +
    "\uff31\146\uff31\147\uff31\150\uff31\151\uff31\152\uff31\153\uff31" +
    "\154\uff31\155\uff31\156\uff31\157\uff31\161\uff31\162\uff31\163" +
    "\uff31\164\uff31\165\uff31\166\uff31\167\uff31\170\uff31\171\uff31" +
    "\172\uff31\173\uff31\176\uff31\177\uff31\200\uff31\201\uff31\202" +
    "\uff31\203\uff31\204\uff31\205\uff31\001\002\000\004\167\031" +
    "\001\002\000\102\143\uff34\144\uff34\145\uff34\146\uff34\147" +
    "\uff34\150\uff34\151\uff34\152\uff34\153\uff34\154\uff34\155\uff34" +
    "\156\uff34\157\uff34\161\uff34\162\uff34\163\uff34\164\uff34\165" +
    "\uff34\166\uff34\167\uff34\170\uff34\171\uff34\172\uff34\173\uff34" +
    "\176\uff34\177\uff34\200\uff34\201\uff34\202\uff34\203\uff34\204" +
    "\uff34\205\uff34\001\002\000\102\143\uff33\144\uff33\145\uff33" +
    "\146\uff33\147\uff33\150\uff33\151\uff33\152\uff33\153\uff33\154" +
    "\uff33\155\uff33\156\uff33\157\uff33\161\uff33\162\uff33\163\uff33" +
    "\164\uff33\165\uff33\166\uff33\167\uff33\170\uff33\171\uff33\172" +
    "\uff33\173\uff33\176\uff33\177\uff33\200\uff33\201\uff33\202\uff33" +
    "\203\uff33\204\uff33\205\uff33\001\002\000\200\005\055\006" +
    "\132\007\127\010\125\011\053\012\150\013\074\014\051" +
    "\015\122\016\076\020\135\021\157\022\156\023\160\024" +
    "\147\025\146\026\141\027\035\030\134\031\063\032\045" +
    "\033\120\034\154\035\073\036\072\037\067\040\111\041" +
    "\060\042\133\043\155\044\104\045\077\047\052\050\047" +
    "\051\126\052\044\053\066\061\106\064\140\065\050\066" +
    "\017\067\103\070\110\071\142\072\043\073\041\074\037" +
    "\075\152\076\117\077\040\100\114\101\034\102\153\140" +
    "\056\141\123\142\075\160\116\166\144\171\ufff8\206\130" +
    "\207\071\210\021\211\131\001\002\000\200\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\061\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\140" +
    "\uffec\141\uffec\142\uffec\160\uffec\166\uffec\171\uffec\206\uffec" +
    "\207\uffec\210\uffec\211\uffec\001\002\000\010\066\uff42\173" +
    "\uff42\210\uff42\001\002\000\010\066\uff3d\173\uff3d\210\uff3d" +
    "\001\002\000\200\005\055\006\132\007\127\010\125\011" +
    "\053\012\150\013\074\014\051\015\122\016\076\020\135" +
    "\021\157\022\156\023\160\024\147\025\146\026\141\027" +
    "\035\030\134\031\063\032\045\033\120\034\154\035\073" +
    "\036\072\037\067\040\111\041\060\042\133\043\155\044" +
    "\104\045\077\047\052\050\047\051\126\052\044\053\066" +
    "\061\106\064\140\065\050\066\017\067\103\070\110\071" +
    "\142\072\043\073\041\074\037\075\152\076\117\077\040" +
    "\100\114\101\034\102\153\140\056\141\123\142\075\160" +
    "\116\166\144\171\ufff8\206\130\207\071\210\021\211\131" +
    "\001\002\000\010\066\uff47\173\uff47\210\uff47\001\002\000" +
    "\010\066\uff44\173\uff44\210\uff44\001\002\000\010\066\uff48" +
    "\173\uff48\210\uff48\001\002\000\076\143\uffa4\144\uffa4\145" +
    "\uffa4\146\uffa4\147\uffa4\150\uffa4\151\uffa4\152\uffa4\153\uffa4" +
    "\154\uffa4\155\uffa4\156\uffa4\157\uffa4\161\uffa4\162\uffa4\163" +
    "\uffa4\164\uffa4\165\uffa4\166\uffa4\167\uffa4\172\uffa4\173\uffa4" +
    "\176\uffa4\177\uffa4\200\uffa4\201\uffa4\202\uffa4\203\uffa4\204" +
    "\uffa4\205\uffa4\001\002\000\010\066\uff49\173\uff49\210\uff49" +
    "\001\002\000\004\166\u0133\001\002\000\010\066\uff3a\173" +
    "\uff3a\210\uff3a\001\002\000\200\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\061\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\140\uffe9\141\uffe9" +
    "\142\uffe9\160\uffe9\166\uffe9\171\uffe9\206\uffe9\207\uffe9\210" +
    "\uffe9\211\uffe9\001\002\000\006\066\017\210\021\001\002" +
    "\000\006\066\017\210\021\001\002\000\010\066\uff4c\173" +
    "\uff4c\210\uff4c\001\002\000\004\170\202\001\002\000\010" +
    "\066\uff4f\173\uff4f\210\uff4f\001\002\000\200\005\055\006" +
    "\132\007\127\010\125\011\053\012\150\013\074\014\051" +
    "\015\122\016\076\020\135\021\157\022\156\023\160\024" +
    "\147\025\146\026\141\027\035\030\134\031\063\032\045" +
    "\033\120\034\154\035\073\036\072\037\067\040\111\041" +
    "\060\042\133\043\155\044\104\045\077\047\052\050\047" +
    "\051\126\052\044\053\066\061\106\064\140\065\050\066" +
    "\017\067\103\070\110\071\142\072\043\073\041\074\037" +
    "\075\152\076\117\077\040\100\114\101\034\102\153\140" +
    "\056\141\123\142\075\160\116\166\144\171\ufff8\206\130" +
    "\207\071\210\021\211\131\001\002\000\010\066\uff53\173" +
    "\uff53\210\uff53\001\002\000\122\103\217\104\212\130\213" +
    "\131\216\132\222\133\215\134\224\135\220\136\223\137" +
    "\214\143\uff91\144\uff91\145\uff91\146\uff91\147\uff91\150\uff91" +
    "\151\uff91\152\uff91\153\uff91\154\uff91\155\uff91\156\uff91\157" +
    "\uff91\161\uff91\162\uff91\163\uff91\164\uff91\165\uff91\166\uff91" +
    "\167\uff91\172\uff91\173\uff91\176\uff91\177\uff91\200\uff91\201" +
    "\uff91\202\uff91\203\uff91\204\uff91\205\uff91\001\002\000\200" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\061\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb" +
    "\102\uffeb\140\uffeb\141\uffeb\142\uffeb\160\uffeb\166\uffeb\171" +
    "\uffeb\206\uffeb\207\uffeb\210\uffeb\211\uffeb\001\002\000\010" +
    "\066\uff57\173\uff57\210\uff57\001\002\000\010\066\uff67\173" +
    "\uff67\210\uff67\001\002\000\004\176\u0117\001\002\000\010" +
    "\066\uff3b\173\uff3b\210\uff3b\001\002\000\200\005\055\006" +
    "\132\007\127\010\125\011\053\012\150\013\074\014\051" +
    "\015\122\016\076\020\135\021\157\022\156\023\160\024" +
    "\147\025\146\026\141\027\035\030\134\031\063\032\045" +
    "\033\120\034\154\035\073\036\072\037\067\040\111\041" +
    "\060\042\133\043\155\044\104\045\077\047\052\050\047" +
    "\051\126\052\044\053\066\061\106\064\140\065\050\066" +
    "\017\067\103\070\110\071\142\072\043\073\041\074\037" +
    "\075\152\076\117\077\040\100\114\101\034\102\153\140" +
    "\056\141\123\142\075\160\116\166\144\171\ufff8\206\130" +
    "\207\071\210\021\211\131\001\002\000\200\005\055\006" +
    "\132\007\127\010\125\011\053\012\150\013\074\014\051" +
    "\015\122\016\076\020\135\021\157\022\156\023\160\024" +
    "\147\025\146\026\141\027\035\030\134\031\063\032\045" +
    "\033\120\034\154\035\073\036\072\037\067\040\111\041" +
    "\060\042\133\043\155\044\104\045\077\047\052\050\047" +
    "\051\126\052\044\053\066\061\106\064\140\065\050\066" +
    "\017\067\103\070\110\071\142\072\043\073\041\074\037" +
    "\075\152\076\117\077\040\100\114\101\034\102\153\140" +
    "\056\141\123\142\075\160\116\166\144\171\ufff8\206\130" +
    "\207\071\210\021\211\131\001\002\000\004\210\350\001" +
    "\002\000\010\066\uff59\173\uff59\210\uff59\001\002\000\076" +
    "\143\175\144\230\145\176\146\170\147\166\150\172\151" +
    "\231\152\227\153\174\154\171\155\167\156\243\157\244" +
    "\161\262\162\265\163\260\164\233\165\270\166\241\167" +
    "\uffc9\172\255\173\263\176\uffc9\177\uffc9\200\234\201\232" +
    "\202\266\203\261\204\264\205\237\001\002\000\076\143" +
    "\uffa3\144\uffa3\145\uffa3\146\uffa3\147\uffa3\150\uffa3\151\uffa3" +
    "\152\uffa3\153\uffa3\154\uffa3\155\uffa3\156\uffa3\157\uffa3\161" +
    "\uffa3\162\uffa3\163\uffa3\164\uffa3\165\uffa3\166\uffa3\167\uffa3" +
    "\172\uffa3\173\uffa3\176\uffa3\177\uffa3\200\uffa3\201\uffa3\202" +
    "\uffa3\203\uffa3\204\uffa3\205\uffa3\001\002\000\010\066\uff5a" +
    "\173\uff5a\210\uff5a\001\002\000\010\066\uff5b\173\uff5b\210" +
    "\uff5b\001\002\000\010\066\uff4d\173\uff4d\210\uff4d\001\002" +
    "\000\076\143\175\144\230\145\176\146\170\147\166\150" +
    "\172\151\231\152\227\153\174\154\171\155\167\156\243" +
    "\157\244\161\262\162\265\163\260\164\233\165\270\166" +
    "\241\167\uffc9\172\255\173\263\176\uffc9\177\uffc9\200\234" +
    "\201\232\202\266\203\261\204\264\205\237\001\002\000" +
    "\004\166\337\001\002\000\004\176\336\001\002\000\200" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\061\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073" +
    "\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0" +
    "\102\ufff0\140\ufff0\141\ufff0\142\ufff0\160\ufff0\166\ufff0\171" +
    "\ufff0\206\ufff0\207\ufff0\210\ufff0\211\ufff0\001\002\000\010" +
    "\066\uff6b\173\uff6b\210\uff6b\001\002\000\200\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\061\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\140" +
    "\uffdc\141\uffdc\142\uffdc\160\uffdc\166\uffdc\171\uffdc\206\uffdc" +
    "\207\uffdc\210\uffdc\211\uffdc\001\002\000\076\143\uffa1\144" +
    "\uffa1\145\uffa1\146\uffa1\147\uffa1\150\uffa1\151\uffa1\152\uffa1" +
    "\153\uffa1\154\uffa1\155\uffa1\156\uffa1\157\uffa1\161\uffa1\162" +
    "\uffa1\163\uffa1\164\uffa1\165\uffa1\166\uffa1\167\uffa1\172\uffa1" +
    "\173\uffa1\176\uffa1\177\uffa1\200\uffa1\201\uffa1\202\uffa1\203" +
    "\uffa1\204\uffa1\205\uffa1\001\002\000\010\066\uff54\173\uff54" +
    "\210\uff54\001\002\000\010\066\uff68\173\uff68\210\uff68\001" +
    "\002\000\032\051\126\066\017\067\103\140\056\141\123" +
    "\142\075\160\116\166\144\206\130\207\071\210\021\211" +
    "\131\001\002\000\200\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\061\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077" +
    "\uffed\100\uffed\101\uffed\102\uffed\140\uffed\141\uffed\142\uffed" +
    "\160\uffed\166\uffed\171\uffed\206\uffed\207\uffed\210\uffed\211" +
    "\uffed\001\002\000\010\066\uff65\173\uff65\210\uff65\001\002" +
    "\000\010\066\uff58\173\uff58\210\uff58\001\002\000\010\066" +
    "\017\173\321\210\325\001\002\000\200\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\061\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075" +
    "\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\140\uffea" +
    "\141\uffea\142\uffea\160\uffea\166\uffea\171\uffea\206\uffea\207" +
    "\uffea\210\uffea\211\uffea\001\002\000\010\066\uff43\173\uff43" +
    "\210\uff43\001\002\000\004\176\320\001\002\000\076\143" +
    "\175\144\230\145\176\146\170\147\166\150\172\151\231" +
    "\152\227\153\174\154\171\155\167\156\243\157\244\161" +
    "\262\162\265\163\260\164\233\165\270\166\241\167\uffc9" +
    "\172\255\173\263\176\uffc9\177\uffc9\200\234\201\232\202" +
    "\266\203\261\204\264\205\237\001\002\000\010\066\uff45" +
    "\173\uff45\210\uff45\001\002\000\010\066\uff39\173\uff39\210" +
    "\uff39\001\002\000\200\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053" +
    "\uffef\061\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef" +
    "\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077" +
    "\uffef\100\uffef\101\uffef\102\uffef\140\uffef\141\uffef\142\uffef" +
    "\160\uffef\166\uffef\171\uffef\206\uffef\207\uffef\210\uffef\211" +
    "\uffef\001\002\000\010\066\uff4b\173\uff4b\210\uff4b\001\002" +
    "\000\122\103\217\104\212\130\213\131\216\132\222\133" +
    "\215\134\224\135\220\136\223\137\214\143\uff91\144\uff91" +
    "\145\uff91\146\uff91\147\uff91\150\uff91\151\uff91\152\uff91\153" +
    "\uff91\154\uff91\155\uff91\156\uff91\157\uff91\161\uff91\162\uff91" +
    "\163\uff91\164\uff91\165\uff91\166\uff91\167\uff91\172\uff91\173" +
    "\uff91\176\uff91\177\uff91\200\uff91\201\uff91\202\uff91\203\uff91" +
    "\204\uff91\205\uff91\001\002\000\010\066\uff6a\173\uff6a\210" +
    "\uff6a\001\002\000\010\066\uff50\173\uff50\210\uff50\001\002" +
    "\000\076\143\uffa0\144\uffa0\145\uffa0\146\uffa0\147\uffa0\150" +
    "\uffa0\151\uffa0\152\uffa0\153\uffa0\154\uffa0\155\uffa0\156\uffa0" +
    "\157\uffa0\161\uffa0\162\uffa0\163\uffa0\164\uffa0\165\uffa0\166" +
    "\uffa0\167\uffa0\172\uffa0\173\uffa0\176\uffa0\177\uffa0\200\uffa0" +
    "\201\uffa0\202\uffa0\203\uffa0\204\uffa0\205\uffa0\001\002\000" +
    "\010\066\uff51\173\uff51\210\uff51\001\002\000\122\103\217" +
    "\104\212\130\213\131\216\132\222\133\215\134\224\135" +
    "\220\136\223\137\214\143\uff91\144\uff91\145\uff91\146\uff91" +
    "\147\uff91\150\uff91\151\uff91\152\uff91\153\uff91\154\uff91\155" +
    "\uff91\156\uff91\157\uff91\161\uff91\162\uff91\163\uff91\164\uff91" +
    "\165\uff91\166\uff91\167\uff91\172\uff91\173\uff91\176\uff91\177" +
    "\uff91\200\uff91\201\uff91\202\uff91\203\uff91\204\uff91\205\uff91" +
    "\001\002\000\122\103\217\104\212\130\213\131\216\132" +
    "\222\133\215\134\224\135\220\136\223\137\214\143\uff91" +
    "\144\uff91\145\uff91\146\uff91\147\uff91\150\uff91\151\uff91\152" +
    "\uff91\153\uff91\154\uff91\155\uff91\156\uff91\157\uff91\161\uff91" +
    "\162\uff91\163\uff91\164\uff91\165\uff91\166\uff91\167\uff91\172" +
    "\uff91\173\uff91\176\uff91\177\uff91\200\uff91\201\uff91\202\uff91" +
    "\203\uff91\204\uff91\205\uff91\001\002\000\010\066\uff52\173" +
    "\uff52\210\uff52\001\002\000\010\066\uff56\173\uff56\210\uff56" +
    "\001\002\000\010\066\uff3c\173\uff3c\210\uff3c\001\002\000" +
    "\010\066\uff69\173\uff69\210\uff69\001\002\000\076\143\uffa2" +
    "\144\uffa2\145\uffa2\146\uffa2\147\uffa2\150\uffa2\151\uffa2\152" +
    "\uffa2\153\uffa2\154\uffa2\155\uffa2\156\uffa2\157\uffa2\161\uffa2" +
    "\162\uffa2\163\uffa2\164\uffa2\165\uffa2\166\uffa2\167\uffa2\172" +
    "\uffa2\173\uffa2\176\uffa2\177\uffa2\200\uffa2\201\uffa2\202\uffa2" +
    "\203\uffa2\204\uffa2\205\uffa2\001\002\000\076\143\uffa5\144" +
    "\uffa5\145\uffa5\146\uffa5\147\uffa5\150\uffa5\151\uffa5\152\uffa5" +
    "\153\uffa5\154\uffa5\155\uffa5\156\uffa5\157\uffa5\161\uffa5\162" +
    "\uffa5\163\uffa5\164\uffa5\165\uffa5\166\uffa5\167\uffa5\172\uffa5" +
    "\173\uffa5\176\uffa5\177\uffa5\200\uffa5\201\uffa5\202\uffa5\203" +
    "\uffa5\204\uffa5\205\uffa5\001\002\000\010\066\uff66\173\uff66" +
    "\210\uff66\001\002\000\010\066\uff3e\173\uff3e\210\uff3e\001" +
    "\002\000\010\066\uff4a\173\uff4a\210\uff4a\001\002\000\004" +
    "\171\211\001\002\000\030\051\126\066\017\067\103\140" +
    "\056\141\123\142\075\160\116\206\130\207\071\210\021" +
    "\211\131\001\002\000\012\167\uffd5\173\uffd5\176\uffd5\177" +
    "\uffd5\001\002\000\010\066\uff3f\173\uff3f\210\uff3f\001\002" +
    "\000\010\066\uff40\173\uff40\210\uff40\001\002\000\010\066" +
    "\uff4e\173\uff4e\210\uff4e\001\002\000\200\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\061\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075" +
    "\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee\140\uffee" +
    "\141\uffee\142\uffee\160\uffee\166\uffee\171\uffee\206\uffee\207" +
    "\uffee\210\uffee\211\uffee\001\002\000\010\066\uff46\173\uff46" +
    "\210\uff46\001\002\000\004\166\162\001\002\000\010\066" +
    "\uff5c\173\uff5c\210\uff5c\001\002\000\010\066\uff55\173\uff55" +
    "\210\uff55\001\002\000\004\176\161\001\002\000\010\066" +
    "\uff6c\173\uff6c\210\uff6c\001\002\000\010\066\uff41\173\uff41" +
    "\210\uff41\001\002\000\200\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\061\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\100\uffd9\101\uffd9\102\uffd9\140\uffd9\141\uffd9\142" +
    "\uffd9\160\uffd9\166\uffd9\171\uffd9\206\uffd9\207\uffd9\210\uffd9" +
    "\211\uffd9\001\002\000\024\051\126\066\017\067\103\140" +
    "\056\141\123\206\130\207\071\210\021\211\131\001\002" +
    "\000\004\167\200\001\002\000\024\143\uffa2\145\uffa2\146" +
    "\uffa2\147\uffa2\150\uffa2\153\uffa2\154\uffa2\155\uffa2\167\uffe7" +
    "\001\002\000\022\143\175\145\176\146\170\147\166\150" +
    "\172\153\174\154\171\155\167\001\002\000\030\051\uffa9" +
    "\066\uffa9\067\uffa9\140\uffa9\141\uffa9\142\uffa9\160\uffa9\206" +
    "\uffa9\207\uffa9\210\uffa9\211\uffa9\001\002\000\030\051\uffaf" +
    "\066\uffaf\067\uffaf\140\uffaf\141\uffaf\142\uffaf\160\uffaf\206" +
    "\uffaf\207\uffaf\210\uffaf\211\uffaf\001\002\000\030\051\uffab" +
    "\066\uffab\067\uffab\140\uffab\141\uffab\142\uffab\160\uffab\206" +
    "\uffab\207\uffab\210\uffab\211\uffab\001\002\000\030\051\uffad" +
    "\066\uffad\067\uffad\140\uffad\141\uffad\142\uffad\160\uffad\206" +
    "\uffad\207\uffad\210\uffad\211\uffad\001\002\000\030\051\uffae" +
    "\066\uffae\067\uffae\140\uffae\141\uffae\142\uffae\160\uffae\206" +
    "\uffae\207\uffae\210\uffae\211\uffae\001\002\000\024\051\126" +
    "\066\017\067\103\140\056\141\123\206\130\207\071\210" +
    "\021\211\131\001\002\000\030\051\uffb0\066\uffb0\067\uffb0" +
    "\140\uffb0\141\uffb0\142\uffb0\160\uffb0\206\uffb0\207\uffb0\210" +
    "\uffb0\211\uffb0\001\002\000\030\051\uffaa\066\uffaa\067\uffaa" +
    "\140\uffaa\141\uffaa\142\uffaa\160\uffaa\206\uffaa\207\uffaa\210" +
    "\uffaa\211\uffaa\001\002\000\030\051\uffac\066\uffac\067\uffac" +
    "\140\uffac\141\uffac\142\uffac\160\uffac\206\uffac\207\uffac\210" +
    "\uffac\211\uffac\001\002\000\004\167\uffe6\001\002\000\004" +
    "\170\202\001\002\000\200\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\061\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\100\uffe3\101\uffe3\102\uffe3\140\uffe3\141\uffe3\142" +
    "\uffe3\160\uffe3\166\uffe3\171\uffe3\206\uffe3\207\uffe3\210\uffe3" +
    "\211\uffe3\001\002\000\170\005\055\006\132\007\127\010" +
    "\125\011\053\012\150\013\074\014\051\015\122\016\076" +
    "\020\135\021\157\022\156\023\160\024\147\025\146\026" +
    "\141\027\035\030\134\031\063\032\045\033\120\034\154" +
    "\035\073\036\072\037\067\040\111\041\060\042\133\043" +
    "\155\044\104\045\077\047\052\051\126\052\044\061\106" +
    "\064\140\066\017\067\103\070\110\071\142\072\043\073" +
    "\041\074\037\075\152\076\117\077\040\100\114\101\034" +
    "\102\153\140\056\141\123\142\075\160\116\166\144\206" +
    "\130\207\071\210\021\211\131\001\002\000\004\171\206" +
    "\001\002\000\172\005\055\006\132\007\127\010\125\011" +
    "\053\012\150\013\074\014\051\015\122\016\076\020\135" +
    "\021\157\022\156\023\160\024\147\025\146\026\141\027" +
    "\035\030\134\031\063\032\045\033\120\034\154\035\073" +
    "\036\072\037\067\040\111\041\060\042\133\043\155\044" +
    "\104\045\077\047\052\051\126\052\044\061\106\064\140" +
    "\066\017\067\103\070\110\071\142\072\043\073\041\074" +
    "\037\075\152\076\117\077\040\100\114\101\034\102\153" +
    "\140\056\141\123\142\075\160\116\166\144\171\ufff1\206" +
    "\130\207\071\210\021\211\131\001\002\000\004\171\ufff2" +
    "\001\002\000\202\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\061\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\100\ufff3\101\ufff3\102\ufff3\140\ufff3\141\ufff3\142" +
    "\ufff3\160\ufff3\166\ufff3\171\ufff3\206\ufff3\207\ufff3\210\ufff3" +
    "\211\ufff3\001\002\000\004\167\210\001\002\000\012\167" +
    "\uffd6\173\uffd6\176\uffd6\177\uffd6\001\002\000\006\002\ufffd" +
    "\046\ufffd\001\002\000\076\143\uff9a\144\uff9a\145\uff9a\146" +
    "\uff9a\147\uff9a\150\uff9a\151\uff9a\152\uff9a\153\uff9a\154\uff9a" +
    "\155\uff9a\156\uff9a\157\uff9a\161\uff9a\162\uff9a\163\uff9a\164" +
    "\uff9a\165\uff9a\166\uff9a\167\uff9a\172\uff9a\173\uff9a\176\uff9a" +
    "\177\uff9a\200\uff9a\201\uff9a\202\uff9a\203\uff9a\204\uff9a\205" +
    "\uff9a\001\002\000\076\143\uff99\144\uff99\145\uff99\146\uff99" +
    "\147\uff99\150\uff99\151\uff99\152\uff99\153\uff99\154\uff99\155" +
    "\uff99\156\uff99\157\uff99\161\uff99\162\uff99\163\uff99\164\uff99" +
    "\165\uff99\166\uff99\167\uff99\172\uff99\173\uff99\176\uff99\177" +
    "\uff99\200\uff99\201\uff99\202\uff99\203\uff99\204\uff99\205\uff99" +
    "\001\002\000\076\143\uff92\144\uff92\145\uff92\146\uff92\147" +
    "\uff92\150\uff92\151\uff92\152\uff92\153\uff92\154\uff92\155\uff92" +
    "\156\uff92\157\uff92\161\uff92\162\uff92\163\uff92\164\uff92\165" +
    "\uff92\166\uff92\167\uff92\172\uff92\173\uff92\176\uff92\177\uff92" +
    "\200\uff92\201\uff92\202\uff92\203\uff92\204\uff92\205\uff92\001" +
    "\002\000\076\143\uff96\144\uff96\145\uff96\146\uff96\147\uff96" +
    "\150\uff96\151\uff96\152\uff96\153\uff96\154\uff96\155\uff96\156" +
    "\uff96\157\uff96\161\uff96\162\uff96\163\uff96\164\uff96\165\uff96" +
    "\166\uff96\167\uff96\172\uff96\173\uff96\176\uff96\177\uff96\200" +
    "\uff96\201\uff96\202\uff96\203\uff96\204\uff96\205\uff96\001\002" +
    "\000\076\143\uff98\144\uff98\145\uff98\146\uff98\147\uff98\150" +
    "\uff98\151\uff98\152\uff98\153\uff98\154\uff98\155\uff98\156\uff98" +
    "\157\uff98\161\uff98\162\uff98\163\uff98\164\uff98\165\uff98\166" +
    "\uff98\167\uff98\172\uff98\173\uff98\176\uff98\177\uff98\200\uff98" +
    "\201\uff98\202\uff98\203\uff98\204\uff98\205\uff98\001\002\000" +
    "\076\143\uff9b\144\uff9b\145\uff9b\146\uff9b\147\uff9b\150\uff9b" +
    "\151\uff9b\152\uff9b\153\uff9b\154\uff9b\155\uff9b\156\uff9b\157" +
    "\uff9b\161\uff9b\162\uff9b\163\uff9b\164\uff9b\165\uff9b\166\uff9b" +
    "\167\uff9b\172\uff9b\173\uff9b\176\uff9b\177\uff9b\200\uff9b\201" +
    "\uff9b\202\uff9b\203\uff9b\204\uff9b\205\uff9b\001\002\000\076" +
    "\143\uff94\144\uff94\145\uff94\146\uff94\147\uff94\150\uff94\151" +
    "\uff94\152\uff94\153\uff94\154\uff94\155\uff94\156\uff94\157\uff94" +
    "\161\uff94\162\uff94\163\uff94\164\uff94\165\uff94\166\uff94\167" +
    "\uff94\172\uff94\173\uff94\176\uff94\177\uff94\200\uff94\201\uff94" +
    "\202\uff94\203\uff94\204\uff94\205\uff94\001\002\000\076\143" +
    "\uff9f\144\uff9f\145\uff9f\146\uff9f\147\uff9f\150\uff9f\151\uff9f" +
    "\152\uff9f\153\uff9f\154\uff9f\155\uff9f\156\uff9f\157\uff9f\161" +
    "\uff9f\162\uff9f\163\uff9f\164\uff9f\165\uff9f\166\uff9f\167\uff9f" +
    "\172\uff9f\173\uff9f\176\uff9f\177\uff9f\200\uff9f\201\uff9f\202" +
    "\uff9f\203\uff9f\204\uff9f\205\uff9f\001\002\000\076\143\uff97" +
    "\144\uff97\145\uff97\146\uff97\147\uff97\150\uff97\151\uff97\152" +
    "\uff97\153\uff97\154\uff97\155\uff97\156\uff97\157\uff97\161\uff97" +
    "\162\uff97\163\uff97\164\uff97\165\uff97\166\uff97\167\uff97\172" +
    "\uff97\173\uff97\176\uff97\177\uff97\200\uff97\201\uff97\202\uff97" +
    "\203\uff97\204\uff97\205\uff97\001\002\000\076\143\uff93\144" +
    "\uff93\145\uff93\146\uff93\147\uff93\150\uff93\151\uff93\152\uff93" +
    "\153\uff93\154\uff93\155\uff93\156\uff93\157\uff93\161\uff93\162" +
    "\uff93\163\uff93\164\uff93\165\uff93\166\uff93\167\uff93\172\uff93" +
    "\173\uff93\176\uff93\177\uff93\200\uff93\201\uff93\202\uff93\203" +
    "\uff93\204\uff93\205\uff93\001\002\000\076\143\uff95\144\uff95" +
    "\145\uff95\146\uff95\147\uff95\150\uff95\151\uff95\152\uff95\153" +
    "\uff95\154\uff95\155\uff95\156\uff95\157\uff95\161\uff95\162\uff95" +
    "\163\uff95\164\uff95\165\uff95\166\uff95\167\uff95\172\uff95\173" +
    "\uff95\176\uff95\177\uff95\200\uff95\201\uff95\202\uff95\203\uff95" +
    "\204\uff95\205\uff95\001\002\000\076\143\uff9e\144\uff9e\145" +
    "\uff9e\146\uff9e\147\uff9e\150\uff9e\151\uff9e\152\uff9e\153\uff9e" +
    "\154\uff9e\155\uff9e\156\uff9e\157\uff9e\161\uff9e\162\uff9e\163" +
    "\uff9e\164\uff9e\165\uff9e\166\uff9e\167\uff9e\172\uff9e\173\uff9e" +
    "\176\uff9e\177\uff9e\200\uff9e\201\uff9e\202\uff9e\203\uff9e\204" +
    "\uff9e\205\uff9e\001\002\000\076\143\uff9c\144\uff9c\145\uff9c" +
    "\146\uff9c\147\uff9c\150\uff9c\151\uff9c\152\uff9c\153\uff9c\154" +
    "\uff9c\155\uff9c\156\uff9c\157\uff9c\161\uff9c\162\uff9c\163\uff9c" +
    "\164\uff9c\165\uff9c\166\uff9c\167\uff9c\172\uff9c\173\uff9c\176" +
    "\uff9c\177\uff9c\200\uff9c\201\uff9c\202\uff9c\203\uff9c\204\uff9c" +
    "\205\uff9c\001\002\000\030\051\uffbc\066\uffbc\067\uffbc\140" +
    "\uffbc\141\uffbc\142\uffbc\160\uffbc\206\uffbc\207\uffbc\210\uffbc" +
    "\211\uffbc\001\002\000\030\051\uffb8\066\uffb8\067\uffb8\140" +
    "\uffb8\141\uffb8\142\uffb8\160\uffb8\206\uffb8\207\uffb8\210\uffb8" +
    "\211\uffb8\001\002\000\030\051\uffbb\066\uffbb\067\uffbb\140" +
    "\uffbb\141\uffbb\142\uffbb\160\uffbb\206\uffbb\207\uffbb\210\uffbb" +
    "\211\uffbb\001\002\000\032\051\uff63\066\uff63\067\uff63\140" +
    "\uff63\141\uff63\142\uff63\160\uff63\166\uff63\206\uff63\207\uff63" +
    "\210\uff63\211\uff63\001\002\000\032\051\uff60\066\uff60\067" +
    "\uff60\140\uff60\141\uff60\142\uff60\160\uff60\166\uff60\206\uff60" +
    "\207\uff60\210\uff60\211\uff60\001\002\000\006\066\017\210" +
    "\021\001\002\000\030\051\126\066\017\067\103\140\056" +
    "\141\123\142\075\160\116\206\130\207\071\210\021\211" +
    "\131\001\002\000\012\167\uffcb\173\uffcb\176\uffcb\177\uffcb" +
    "\001\002\000\030\051\uffb5\066\uffb5\067\uffb5\140\uffb5\141" +
    "\uffb5\142\uffb5\160\uffb5\206\uffb5\207\uffb5\210\uffb5\211\uffb5" +
    "\001\002\000\012\167\uffcc\173\uffcc\176\uffcc\177\uffcc\001" +
    "\002\000\032\051\126\066\017\067\103\140\056\141\123" +
    "\142\075\160\116\166\144\206\130\207\071\210\021\211" +
    "\131\001\002\000\030\051\126\066\017\067\103\140\056" +
    "\141\123\142\075\160\116\206\130\207\071\210\021\211" +
    "\131\001\002\000\030\051\uffba\066\uffba\067\uffba\140\uffba" +
    "\141\uffba\142\uffba\160\uffba\206\uffba\207\uffba\210\uffba\211" +
    "\uffba\001\002\000\030\051\uffb9\066\uffb9\067\uffb9\140\uffb9" +
    "\141\uffb9\142\uffb9\160\uffb9\206\uffb9\207\uffb9\210\uffb9\211" +
    "\uffb9\001\002\000\012\167\uffcd\173\uffcd\176\uffcd\177\uffcd" +
    "\001\002\000\012\167\uffce\173\uffce\176\uffce\177\uffce\001" +
    "\002\000\012\167\uffcf\173\uffcf\176\uffcf\177\uffcf\001\002" +
    "\000\012\167\uffd0\173\uffd0\176\uffd0\177\uffd0\001\002\000" +
    "\012\167\uffca\173\uffca\176\uffca\177\uffca\001\002\000\012" +
    "\167\uffd1\173\uffd1\176\uffd1\177\uffd1\001\002\000\012\167" +
    "\uffd3\173\uffd3\176\uffd3\177\uffd3\001\002\000\030\051\126" +
    "\066\017\067\103\140\056\141\123\142\075\160\116\206" +
    "\130\207\071\210\021\211\131\001\002\000\030\051\126" +
    "\066\017\067\103\140\056\141\123\142\075\160\116\206" +
    "\130\207\071\210\021\211\131\001\002\000\030\051\126" +
    "\066\017\067\103\140\056\141\123\142\075\160\116\206" +
    "\130\207\071\210\021\211\131\001\002\000\030\051\uffb3" +
    "\066\uffb3\067\uffb3\140\uffb3\141\uffb3\142\uffb3\160\uffb3\206" +
    "\uffb3\207\uffb3\210\uffb3\211\uffb3\001\002\000\032\051\uff61" +
    "\066\uff61\067\uff61\140\uff61\141\uff61\142\uff61\160\uff61\166" +
    "\uff61\206\uff61\207\uff61\210\uff61\211\uff61\001\002\000\030" +
    "\051\uffb1\066\uffb1\067\uffb1\140\uffb1\141\uffb1\142\uffb1\160" +
    "\uffb1\206\uffb1\207\uffb1\210\uffb1\211\uffb1\001\002\000\030" +
    "\051\uffb4\066\uffb4\067\uffb4\140\uffb4\141\uffb4\142\uffb4\160" +
    "\uffb4\206\uffb4\207\uffb4\210\uffb4\211\uffb4\001\002\000\036" +
    "\051\126\066\017\067\103\140\056\141\123\142\075\160" +
    "\116\166\144\174\uffbd\175\uffbd\206\130\207\071\210\021" +
    "\211\131\001\002\000\030\051\uffb6\066\uffb6\067\uffb6\140" +
    "\uffb6\141\uffb6\142\uffb6\160\uffb6\206\uffb6\207\uffb6\210\uffb6" +
    "\211\uffb6\001\002\000\032\051\uff62\066\uff62\067\uff62\140" +
    "\uff62\141\uff62\142\uff62\160\uff62\166\uff62\206\uff62\207\uff62" +
    "\210\uff62\211\uff62\001\002\000\030\051\uffb2\066\uffb2\067" +
    "\uffb2\140\uffb2\141\uffb2\142\uffb2\160\uffb2\206\uffb2\207\uffb2" +
    "\210\uffb2\211\uffb2\001\002\000\030\051\uffb7\066\uffb7\067" +
    "\uffb7\140\uffb7\141\uffb7\142\uffb7\160\uffb7\206\uffb7\207\uffb7" +
    "\210\uffb7\211\uffb7\001\002\000\032\051\uff5f\066\uff5f\067" +
    "\uff5f\140\uff5f\141\uff5f\142\uff5f\160\uff5f\166\uff5f\206\uff5f" +
    "\207\uff5f\210\uff5f\211\uff5f\001\002\000\004\173\300\001" +
    "\002\000\006\174\275\175\274\001\002\000\012\167\uffc8" +
    "\173\uffc8\176\uffc8\177\uffc8\001\002\000\034\051\126\066" +
    "\017\067\103\140\056\141\123\142\075\160\116\166\144" +
    "\174\uffbd\206\130\207\071\210\021\211\131\001\002\000" +
    "\012\167\uffc6\173\uffc6\176\uffc6\177\uffc6\001\002\000\004" +
    "\174\277\001\002\000\012\167\uffc7\173\uffc7\176\uffc7\177" +
    "\uffc7\001\002\000\034\051\126\066\017\067\103\140\056" +
    "\141\123\142\075\160\116\166\144\174\uffbd\206\130\207" +
    "\071\210\021\211\131\001\002\000\004\174\302\001\002" +
    "\000\006\174\uffbe\175\uffbe\001\002\000\012\167\uffc3\173" +
    "\uffc3\176\uffc3\177\uffc3\001\002\000\012\167\uffc0\173\uffc0" +
    "\176\uffc0\177\uffc0\001\002\000\012\167\uffc2\173\uffc2\176" +
    "\uffc2\177\uffc2\001\002\000\012\167\uffbf\173\uffbf\176\uffbf" +
    "\177\uffbf\001\002\000\006\167\uffa6\177\312\001\002\000" +
    "\004\167\311\001\002\000\012\167\uffc4\173\uffc4\176\uffc4" +
    "\177\uffc4\001\002\000\032\051\126\066\017\067\103\140" +
    "\056\141\123\142\075\160\116\166\144\206\130\207\071" +
    "\210\021\211\131\001\002\000\004\167\uffa8\001\002\000" +
    "\006\167\uffa6\177\312\001\002\000\004\167\uffa7\001\002" +
    "\000\012\167\uffc1\173\uffc1\176\uffc1\177\uffc1\001\002\000" +
    "\012\167\uffc5\173\uffc5\176\uffc5\177\uffc5\001\002\000\200" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\061\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\102\uffdd\140\uffdd\141\uffdd\142\uffdd\160\uffdd\166\uffdd\171" +
    "\uffdd\206\uffdd\207\uffdd\210\uffdd\211\uffdd\001\002\000\004" +
    "\174\331\001\002\000\010\167\uff6d\176\uff6d\177\uff6d\001" +
    "\002\000\010\167\uff6e\176\uff6e\177\uff6e\001\002\000\010" +
    "\167\uff70\176\uff70\177\uff70\001\002\000\024\162\265\163" +
    "\260\164\233\165\270\167\uff35\176\uff35\177\uff35\200\024" +
    "\201\232\001\002\000\010\167\uff71\176\uff71\177\uff71\001" +
    "\002\000\032\051\126\066\017\067\103\140\056\141\123" +
    "\142\075\160\116\166\144\206\130\207\071\210\021\211" +
    "\131\001\002\000\010\167\uff64\176\uff64\177\uff64\001\002" +
    "\000\006\066\017\210\325\001\002\000\010\167\uff6f\176" +
    "\uff6f\177\uff6f\001\002\000\004\176\335\001\002\000\004" +
    "\176\uffd7\001\002\000\200\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\061\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8" +
    "\077\uffd8\100\uffd8\101\uffd8\102\uffd8\140\uffd8\141\uffd8\142" +
    "\uffd8\160\uffd8\166\uffd8\171\uffd8\206\uffd8\207\uffd8\210\uffd8" +
    "\211\uffd8\001\002\000\200\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\061\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda" +
    "\077\uffda\100\uffda\101\uffda\102\uffda\140\uffda\141\uffda\142" +
    "\uffda\160\uffda\166\uffda\171\uffda\206\uffda\207\uffda\210\uffda" +
    "\211\uffda\001\002\000\024\051\126\066\017\067\103\140" +
    "\056\141\123\206\130\207\071\210\021\211\131\001\002" +
    "\000\004\167\341\001\002\000\004\170\202\001\002\000" +
    "\202\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\343\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\140\uffe4\141\uffe4\142\uffe4\160\uffe4" +
    "\166\uffe4\171\uffe4\206\uffe4\207\uffe4\210\uffe4\211\uffe4\001" +
    "\002\000\004\170\202\001\002\000\200\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\061\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\140\uffe8" +
    "\141\uffe8\142\uffe8\160\uffe8\166\uffe8\171\uffe8\206\uffe8\207" +
    "\uffe8\210\uffe8\211\uffe8\001\002\000\200\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\061\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\140\uffe5" +
    "\141\uffe5\142\uffe5\160\uffe5\166\uffe5\171\uffe5\206\uffe5\207" +
    "\uffe5\210\uffe5\211\uffe5\001\002\000\012\167\uffd4\173\uffd4" +
    "\176\uffd4\177\uffd4\001\002\000\012\167\uffd2\173\uffd2\176" +
    "\uffd2\177\uffd2\001\002\000\004\166\351\001\002\000\124" +
    "\005\055\006\132\007\127\010\125\011\053\012\150\013" +
    "\074\014\051\015\122\020\135\021\157\023\160\024\147" +
    "\025\146\026\141\027\035\030\134\031\063\032\045\033" +
    "\120\034\154\035\073\036\072\037\067\040\111\041\060" +
    "\042\133\043\155\044\104\064\140\070\110\071\142\072" +
    "\043\073\041\074\037\075\152\076\117\077\040\100\114" +
    "\101\034\167\uff82\001\002\000\004\167\361\001\002\000" +
    "\004\167\uff83\001\002\000\006\167\uff7f\177\355\001\002" +
    "\000\122\005\055\006\132\007\127\010\125\011\053\012" +
    "\150\013\074\014\051\015\122\020\135\021\157\023\160" +
    "\024\147\025\146\026\141\027\035\030\134\031\063\032" +
    "\045\033\120\034\154\035\073\036\072\037\067\040\111" +
    "\041\060\042\133\043\155\044\104\064\140\070\110\071" +
    "\142\072\043\073\041\074\037\075\152\076\117\077\040" +
    "\100\114\101\034\001\002\000\004\167\uff81\001\002\000" +
    "\006\167\uff7f\177\355\001\002\000\004\167\uff80\001\002" +
    "\000\016\054\367\055\362\057\366\060\363\062\uff78\170" +
    "\uff78\001\002\000\006\062\uff77\170\uff77\001\002\000\006" +
    "\062\uff5e\170\uff5e\001\002\000\006\062\uff76\170\uff76\001" +
    "\002\000\006\062\373\170\uff73\001\002\000\006\062\uff5d" +
    "\170\uff5d\001\002\000\006\062\uff75\170\uff75\001\002\000" +
    "\006\062\uff79\170\uff79\001\002\000\004\170\u0100\001\002" +
    "\000\004\170\uff74\001\002\000\004\166\374\001\002\000" +
    "\122\005\055\006\132\007\127\010\125\011\053\012\150" +
    "\013\074\014\051\015\122\020\135\021\157\023\160\024" +
    "\147\025\146\026\141\027\035\030\134\031\063\032\045" +
    "\033\120\034\154\035\073\036\072\037\067\040\111\041" +
    "\060\042\133\043\155\044\104\064\140\070\110\071\142" +
    "\072\043\073\041\074\037\075\152\076\117\077\040\100" +
    "\114\101\034\001\002\000\006\066\017\210\021\001\002" +
    "\000\004\167\377\001\002\000\004\170\uff72\001\002\000" +
    "\166\005\055\006\132\007\127\010\125\011\053\012\150" +
    "\013\074\014\051\015\122\016\uff7d\020\135\021\157\022" +
    "\uff7d\023\160\024\147\025\146\026\141\027\035\030\134" +
    "\031\063\032\045\033\120\034\154\035\073\036\072\037" +
    "\067\040\111\041\060\042\133\043\155\044\104\045\uff7d" +
    "\051\uff7d\052\uff7d\061\uff7d\064\140\066\uff7d\067\uff7d\070" +
    "\110\071\142\072\043\073\041\074\037\075\152\076\117" +
    "\077\040\100\114\101\034\102\uff7d\140\uff7d\141\uff7d\142" +
    "\uff7d\160\uff7d\166\uff7d\206\uff7d\207\uff7d\210\uff7d\211\uff7d" +
    "\001\002\000\046\016\uff7e\022\uff7e\045\uff7e\051\uff7e\052" +
    "\uff7e\061\uff7e\066\uff7e\067\uff7e\102\uff7e\140\uff7e\141\uff7e" +
    "\142\uff7e\160\uff7e\166\uff7e\206\uff7e\207\uff7e\210\uff7e\211" +
    "\uff7e\001\002\000\004\176\u010f\001\002\000\046\016\076" +
    "\022\156\045\077\051\126\052\044\061\106\066\017\067" +
    "\103\102\153\140\056\141\123\142\075\160\116\166\144" +
    "\206\130\207\071\210\021\211\131\001\002\000\050\016" +
    "\uff86\022\uff86\045\uff86\051\uff86\052\uff86\061\uff86\066\uff86" +
    "\067\uff86\102\uff86\140\uff86\141\uff86\142\uff86\160\uff86\166" +
    "\uff86\171\uff86\206\uff86\207\uff86\210\uff86\211\uff86\001\002" +
    "\000\050\016\076\022\156\045\077\051\126\052\044\061" +
    "\106\066\017\067\103\102\153\140\056\141\123\142\075" +
    "\160\116\166\144\171\uff8b\206\130\207\071\210\021\211" +
    "\131\001\002\000\050\016\uff84\022\uff84\045\uff84\051\uff84" +
    "\052\uff84\061\uff84\066\uff84\067\uff84\102\uff84\140\uff84\141" +
    "\uff84\142\uff84\160\uff84\166\uff84\171\uff84\206\uff84\207\uff84" +
    "\210\uff84\211\uff84\001\002\000\050\016\uff8a\022\uff8a\045" +
    "\uff8a\051\uff8a\052\uff8a\061\uff8a\066\uff8a\067\uff8a\102\uff8a" +
    "\140\uff8a\141\uff8a\142\uff8a\160\uff8a\166\uff8a\171\uff8a\206" +
    "\uff8a\207\uff8a\210\uff8a\211\uff8a\001\002\000\050\016\uff89" +
    "\022\uff89\045\uff89\051\uff89\052\uff89\061\uff89\066\uff89\067" +
    "\uff89\102\uff89\140\uff89\141\uff89\142\uff89\160\uff89\166\uff89" +
    "\171\uff89\206\uff89\207\uff89\210\uff89\211\uff89\001\002\000" +
    "\050\016\uff88\022\uff88\045\uff88\051\uff88\052\uff88\061\uff88" +
    "\066\uff88\067\uff88\102\uff88\140\uff88\141\uff88\142\uff88\160" +
    "\uff88\166\uff88\171\uff88\206\uff88\207\uff88\210\uff88\211\uff88" +
    "\001\002\000\050\016\uff85\022\uff85\045\uff85\051\uff85\052" +
    "\uff85\061\uff85\066\uff85\067\uff85\102\uff85\140\uff85\141\uff85" +
    "\142\uff85\160\uff85\166\uff85\171\uff85\206\uff85\207\uff85\210" +
    "\uff85\211\uff85\001\002\000\050\016\uff87\022\uff87\045\uff87" +
    "\051\uff87\052\uff87\061\uff87\066\uff87\067\uff87\102\uff87\140" +
    "\uff87\141\uff87\142\uff87\160\uff87\166\uff87\171\uff87\206\uff87" +
    "\207\uff87\210\uff87\211\uff87\001\002\000\004\171\u010d\001" +
    "\002\000\200\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\061" +
    "\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d" +
    "\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100" +
    "\uff8d\101\uff8d\102\uff8d\140\uff8d\141\uff8d\142\uff8d\160\uff8d" +
    "\166\uff8d\171\uff8d\206\uff8d\207\uff8d\210\uff8d\211\uff8d\001" +
    "\002\000\004\171\uff8c\001\002\000\050\016\uff7a\022\uff7a" +
    "\045\uff7a\051\uff7a\052\uff7a\061\uff7a\066\uff7a\067\uff7a\102" +
    "\uff7a\140\uff7a\141\uff7a\142\uff7a\160\uff7a\166\uff7a\177\u0111" +
    "\206\uff7a\207\uff7a\210\uff7a\211\uff7a\001\002\000\046\016" +
    "\uff7c\022\uff7c\045\uff7c\051\uff7c\052\uff7c\061\uff7c\066\uff7c" +
    "\067\uff7c\102\uff7c\140\uff7c\141\uff7c\142\uff7c\160\uff7c\166" +
    "\uff7c\206\uff7c\207\uff7c\210\uff7c\211\uff7c\001\002\000\122" +
    "\005\055\006\132\007\127\010\125\011\053\012\150\013" +
    "\074\014\051\015\122\020\135\021\157\023\160\024\147" +
    "\025\146\026\141\027\035\030\134\031\063\032\045\033" +
    "\120\034\154\035\073\036\072\037\067\040\111\041\060" +
    "\042\133\043\155\044\104\064\140\070\110\071\142\072" +
    "\043\073\041\074\037\075\152\076\117\077\040\100\114" +
    "\101\034\001\002\000\004\176\u0113\001\002\000\050\016" +
    "\uff7a\022\uff7a\045\uff7a\051\uff7a\052\uff7a\061\uff7a\066\uff7a" +
    "\067\uff7a\102\uff7a\140\uff7a\141\uff7a\142\uff7a\160\uff7a\166" +
    "\uff7a\177\u0111\206\uff7a\207\uff7a\210\uff7a\211\uff7a\001\002" +
    "\000\046\016\uff7b\022\uff7b\045\uff7b\051\uff7b\052\uff7b\061" +
    "\uff7b\066\uff7b\067\uff7b\102\uff7b\140\uff7b\141\uff7b\142\uff7b" +
    "\160\uff7b\166\uff7b\206\uff7b\207\uff7b\210\uff7b\211\uff7b\001" +
    "\002\000\004\171\ufff9\001\002\000\004\171\ufffa\001\002" +
    "\000\200\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\061\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072" +
    "\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\101\uffdb\102\uffdb\140\uffdb\141\uffdb\142\uffdb\160\uffdb\166" +
    "\uffdb\171\uffdb\206\uffdb\207\uffdb\210\uffdb\211\uffdb\001\002" +
    "\000\076\143\uff9d\144\uff9d\145\uff9d\146\uff9d\147\uff9d\150" +
    "\uff9d\151\uff9d\152\uff9d\153\uff9d\154\uff9d\155\uff9d\156\uff9d" +
    "\157\uff9d\161\uff9d\162\uff9d\163\uff9d\164\uff9d\165\uff9d\166" +
    "\uff9d\167\uff9d\172\uff9d\173\uff9d\176\uff9d\177\uff9d\200\uff9d" +
    "\201\uff9d\202\uff9d\203\uff9d\204\uff9d\205\uff9d\001\002\000" +
    "\004\171\ufffc\001\002\000\004\102\u011b\001\002\000\004" +
    "\166\u011c\001\002\000\024\051\126\066\017\067\103\140" +
    "\056\141\123\206\130\207\071\210\021\211\131\001\002" +
    "\000\004\167\u011e\001\002\000\004\176\u011f\001\002\000" +
    "\200\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\061\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101" +
    "\uffe2\102\uffe2\140\uffe2\141\uffe2\142\uffe2\160\uffe2\166\uffe2" +
    "\171\uffe2\206\uffe2\207\uffe2\210\uffe2\211\uffe2\001\002\000" +
    "\004\170\u0121\001\002\000\122\005\055\006\132\007\127" +
    "\010\125\011\053\012\150\013\074\014\051\015\122\020" +
    "\135\021\157\023\160\024\147\025\146\026\141\027\035" +
    "\030\134\031\063\032\045\033\120\034\154\035\073\036" +
    "\072\037\067\040\111\041\060\042\133\043\155\044\104" +
    "\064\140\070\110\071\142\072\043\073\041\074\037\075" +
    "\152\076\117\077\040\100\114\101\034\001\002\000\004" +
    "\176\u0123\001\002\000\006\171\uff8e\177\u0124\001\002\000" +
    "\122\005\055\006\132\007\127\010\125\011\053\012\150" +
    "\013\074\014\051\015\122\020\135\021\157\023\160\024" +
    "\147\025\146\026\141\027\035\030\134\031\063\032\045" +
    "\033\120\034\154\035\073\036\072\037\067\040\111\041" +
    "\060\042\133\043\155\044\104\064\140\070\110\071\142" +
    "\072\043\073\041\074\037\075\152\076\117\077\040\100" +
    "\114\101\034\001\002\000\004\171\u0126\001\002\000\200" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\061\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90" +
    "\102\uff90\140\uff90\141\uff90\142\uff90\160\uff90\166\uff90\171" +
    "\uff90\206\uff90\207\uff90\210\uff90\211\uff90\001\002\000\004" +
    "\176\u0128\001\002\000\006\171\uff8e\177\u0124\001\002\000" +
    "\004\171\uff8f\001\002\000\004\170\u012b\001\002\000\006" +
    "\066\017\210\021\001\002\000\006\171\ufff4\177\u012f\001" +
    "\002\000\004\171\u012e\001\002\000\200\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\061\ufff7\064\ufff7\065\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\140\ufff7" +
    "\141\ufff7\142\ufff7\160\ufff7\166\ufff7\171\ufff7\206\ufff7\207" +
    "\ufff7\210\ufff7\211\ufff7\001\002\000\006\066\017\210\021" +
    "\001\002\000\004\171\ufff6\001\002\000\006\171\ufff4\177" +
    "\u012f\001\002\000\004\171\ufff5\001\002\000\152\005\055" +
    "\006\132\007\127\010\125\011\053\012\150\013\074\014" +
    "\051\015\122\020\135\021\157\023\160\024\147\025\146" +
    "\026\141\027\035\030\134\031\063\032\045\033\120\034" +
    "\154\035\073\036\072\037\067\040\111\041\060\042\133" +
    "\043\155\044\104\051\126\064\140\066\017\067\103\070" +
    "\110\071\142\072\043\073\041\074\037\075\152\076\117" +
    "\077\040\100\114\101\034\140\056\141\123\142\075\160" +
    "\116\166\144\206\130\207\071\210\021\211\131\001\002" +
    "\000\032\051\uffe0\066\uffe0\067\uffe0\140\uffe0\141\uffe0\142" +
    "\uffe0\160\uffe0\166\uffe0\206\uffe0\207\uffe0\210\uffe0\211\uffe0" +
    "\001\002\000\032\051\126\066\017\067\103\140\056\141" +
    "\123\142\075\160\116\166\144\206\130\207\071\210\021" +
    "\211\131\001\002\000\032\051\uffdf\066\uffdf\067\uffdf\140" +
    "\uffdf\141\uffdf\142\uffdf\160\uffdf\166\uffdf\206\uffdf\207\uffdf" +
    "\210\uffdf\211\uffdf\001\002\000\032\051\126\066\017\067" +
    "\103\140\056\141\123\142\075\160\116\166\144\206\130" +
    "\207\071\210\021\211\131\001\002\000\004\167\uffde\001" +
    "\002\000\004\167\u013a\001\002\000\004\170\202\001\002" +
    "\000\200\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\061\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1" +
    "\101\uffe1\102\uffe1\140\uffe1\141\uffe1\142\uffe1\160\uffe1\166" +
    "\uffe1\171\uffe1\206\uffe1\207\uffe1\210\uffe1\211\uffe1\001\002" +
    "\000\004\171\ufffb\001\002\000\102\143\uff37\144\uff37\145" +
    "\uff37\146\uff37\147\uff37\150\uff37\151\uff37\152\uff37\153\uff37" +
    "\154\uff37\155\uff37\156\uff37\157\uff37\161\uff37\162\uff37\163" +
    "\uff37\164\uff37\165\uff37\166\uff37\167\uff37\170\uff37\171\uff37" +
    "\172\uff37\173\uff37\176\uff37\177\uff37\200\uff37\201\uff37\202" +
    "\uff37\203\uff37\204\uff37\205\uff37\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\015\004\013\001\001\000\006\003\u013d\004\013\001\001" +
    "\000\004\006\017\001\001\000\002\001\001\000\004\104" +
    "\u013c\001\001\000\002\001\001\000\006\101\022\104\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\025\001\001\000\004\103\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\005\142\006\135\007\053\010\035\011\063\012\064" +
    "\015\114\016\111\021\100\022\104\023\060\024\123\027" +
    "\077\030\120\031\150\032\106\035\032\036\056\037\112" +
    "\041\061\043\045\044\101\051\067\057\136\060\041\107" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\005\u013b\006\135\007\053\010\035\011" +
    "\063\012\064\015\114\016\111\021\100\022\104\023\060" +
    "\024\123\027\077\030\120\031\150\032\106\035\032\036" +
    "\056\037\112\041\061\043\045\044\101\051\067\057\136" +
    "\060\041\107\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0129\001\001\000\004\006\u011f\001\001\000\002" +
    "\001\001\000\004\025\u0119\001\001\000\002\001\001\000" +
    "\066\005\u0118\006\135\007\053\010\035\011\063\012\064" +
    "\015\114\016\111\021\100\022\104\023\060\024\123\027" +
    "\077\030\120\031\150\032\106\035\032\036\056\037\112" +
    "\041\061\043\045\044\101\051\067\057\136\060\041\107" +
    "\144\001\001\000\002\001\001\000\004\061\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\005\u0115\006\135" +
    "\007\053\010\035\011\063\012\064\015\114\016\111\021" +
    "\100\022\104\023\060\024\123\027\077\030\120\031\150" +
    "\032\106\035\032\036\056\037\112\041\061\043\045\044" +
    "\101\051\067\057\136\060\041\107\144\001\001\000\066" +
    "\005\u0114\006\135\007\053\010\035\011\063\012\064\015" +
    "\114\016\111\021\100\022\104\023\060\024\123\027\077" +
    "\030\120\031\150\032\106\035\032\036\056\037\112\041" +
    "\061\043\045\044\101\051\067\057\136\060\041\107\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\050" +
    "\241\053\255\054\266\055\256\056\234\106\253\110\346" +
    "\111\251\113\247\114\246\115\245\116\244\117\237\120" +
    "\235\121\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\050\241\053" +
    "\255\054\266\055\256\056\234\106\253\110\345\111\251" +
    "\113\247\114\246\115\245\116\244\117\237\120\235\121" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\135" +
    "\040\332\041\333\051\067\057\136\060\041\107\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\322\017\321\077\325\100\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\050\241\053\255\054\266\055\256\056\234\106\253\110" +
    "\252\111\251\113\247\114\246\115\245\116\244\117\237" +
    "\120\235\121\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\224\001\001\000\004" +
    "\061\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\135\051\067\057\136" +
    "\060\041\107\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\163\045\162\051" +
    "\164\057\136\060\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\135\051\176\057\136\060\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\200\001\001\000\002\001" +
    "\001\000\060\006\135\010\203\015\114\016\111\021\100" +
    "\022\104\023\060\024\123\026\202\027\077\030\120\031" +
    "\150\032\106\035\032\036\056\037\112\041\061\043\045" +
    "\044\101\051\067\057\136\060\041\107\144\001\001\000" +
    "\002\001\001\000\060\006\135\010\203\015\114\016\111" +
    "\021\100\022\104\023\060\024\123\026\204\027\077\030" +
    "\120\031\150\032\106\035\032\036\056\037\112\041\061" +
    "\043\045\044\101\051\067\057\136\060\041\107\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\316\001\001\000\014\006\135\051" +
    "\067\057\136\060\041\107\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\135\041" +
    "\306\047\307\051\067\057\136\060\041\107\144\001\001" +
    "\000\014\006\135\051\067\057\136\060\041\107\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\135\051\067\057\136\060\041\107\304\001\001\000" +
    "\014\006\135\051\067\057\136\060\041\107\303\001\001" +
    "\000\014\006\135\051\067\057\136\060\041\107\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\135\041\270\046\271\051" +
    "\067\057\136\060\041\107\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\112\272\001\001" +
    "\000\002\001\001\000\020\006\135\041\270\046\275\051" +
    "\067\057\136\060\041\107\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\135\041" +
    "\270\046\300\051\067\057\136\060\041\107\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\135\041\313\051\067\057\136\060\041\107\144" +
    "\001\001\000\002\001\001\000\004\105\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\050\326\101\022\104\021" +
    "\001\001\000\002\001\001\000\016\006\135\041\327\051" +
    "\067\057\136\060\041\107\144\001\001\000\002\001\001" +
    "\000\010\006\322\017\321\100\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\163\045\337\051\164\057" +
    "\136\060\041\001\001\000\002\001\001\000\004\025\341" +
    "\001\001\000\004\042\343\001\001\000\004\025\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\353\016" +
    "\111\021\100\022\104\023\060\024\123\064\351\065\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\355\001\001\000\016\015\356\016\111\021\100\022\104" +
    "\023\060\024\123\001\001\000\002\001\001\000\004\066" +
    "\357\001\001\000\002\001\001\000\010\020\363\072\364" +
    "\073\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\074\370\075\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\374" +
    "\021\100\022\104\023\060\024\123\001\001\000\004\006" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u0101\016\111\021\100\022\104\023\060\024\123\067" +
    "\u0102\070\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\135\027\u0106\030\u0107\032\u0108\035\u010a\036" +
    "\u0103\037\u0109\041\061\044\u0105\051\067\057\136\060\041" +
    "\063\u010b\107\144\122\u0104\001\001\000\002\001\001\000" +
    "\040\006\135\027\u0106\030\u0107\032\u0108\035\u010a\036\u0103" +
    "\037\u0109\041\061\044\u0105\051\067\057\136\060\041\063" +
    "\u010d\107\144\122\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u010f\001\001\000\002\001" +
    "\001\000\016\015\u0111\016\111\021\100\022\104\023\060" +
    "\024\123\001\001\000\002\001\001\000\004\071\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\163\045\u011c" +
    "\051\164\057\136\060\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\u0121\016\111\021\100\022\104\023\060\024\123\001" +
    "\001\000\002\001\001\000\004\062\u0124\001\001\000\016" +
    "\015\u0126\016\111\021\100\022\104\023\060\024\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u012b\013\u012c\001\001\000\004\014\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0130\001\001\000\002\001\001\000\004\014\u0131\001\001" +
    "\000\002\001\001\000\040\006\135\015\114\016\111\021" +
    "\100\022\104\023\060\024\123\033\u0134\041\061\043\u0133" +
    "\044\101\051\067\057\136\060\041\107\144\001\001\000" +
    "\002\001\001\000\022\006\135\034\u0136\041\061\044\u0135" +
    "\051\067\057\136\060\041\107\144\001\001\000\002\001" +
    "\001\000\020\006\135\041\u0137\051\067\057\136\060\041" +
    "\076\u0138\107\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u013a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<SError> SEList = new LinkedList<SError>(); //SYNTAX ERROR LIST
    //public static String ultimoToken;
    private Symbol s;

    public Parser (LexerC scanner) {
        super(scanner);
    }

    //metodo de llamado automatico al error que es recuperable
    public void syntax_error(Symbol s){
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;

        if((column - lexeme.length())<=0){
            column = 0;
        }

        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token inválido");
        SEList.add(dato);
    }

    //metodo que se llama cuando ya no es recuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token no esperado"); 
        SEList.add(dato);
    }
    
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // IDENT_AUX_THIS ::= Punto IDENT_AUX2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX_THIS",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // IDENT_AUX3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX3",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // IDENT_AUX3 ::= AbreParentesis CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX3",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // IDENT_AUX2 ::= Identificador IDENT_AUX3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // IDENT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // IDENT_AUX ::= IDENT_AUX_THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // IDENT ::= Res_This IDENT_AUX_THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // IDENT ::= Identificador IDENT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // BYTE_TYPES ::= Res_Bytes256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // BYTE_TYPES ::= Res_Bytes128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // BYTE_TYPES ::= Res_Bytes64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BYTE_TYPES ::= Res_Bytes32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // BYTE_TYPES ::= Res_Bytes16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // BYTE_TYPES ::= Res_Bytes8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BYTE_TYPES ::= Res_Bytes4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BYTE_TYPES ::= Res_Bytes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // BYTE_TYPES ::= Res_Bytes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // UINT_TYPE ::= Res_Uint256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // UINT_TYPE ::= Res_Uint128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // UINT_TYPE ::= Res_Uint64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // UINT_TYPE ::= Res_Uint32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // UINT_TYPE ::= Res_Uint16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // UINT_TYPE ::= Res_Uint8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // UINT_TYPE ::= Res_Uint4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // UINT_TYPE ::= Res_Uint2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // UINT_TYPE ::= Res_Uint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INT_TYPE ::= Res_Int256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INT_TYPE ::= Res_Int128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INT_TYPE ::= Res_Int64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INT_TYPE ::= Res_Int32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INT_TYPE ::= Res_Int16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INT_TYPE ::= Res_Int8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INT_TYPE ::= Res_Int4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INT_TYPE ::= Res_Int2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INT_TYPE ::= Res_Int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // BYTE_TYPE ::= Res_Byte256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BYTE_TYPE ::= Res_Byte128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // BYTE_TYPE ::= Res_Byte64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // BYTE_TYPE ::= Res_Byte32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // BYTE_TYPE ::= Res_Byte16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // BYTE_TYPE ::= Res_Byte8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // BYTE_TYPE ::= Res_Byte4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // BYTE_TYPE ::= Res_Byte2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BYTE_TYPE ::= Res_Byte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PRIVACY ::= Res_Private 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIVACY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PRIVACY ::= Res_Public 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIVACY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ASSIGNMENT_AUX ::= Divida 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ASSIGNMENT_AUX ::= Multiplique 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ASSIGNMENT_AUX ::= Reste 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ASSIGNMENT_AUX ::= Sume 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ASSIGNMENT_AUX ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ASSIGNMENT ::= Identificador ASSIGNMENT_AUX EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VAR_TYPE ::= Res_Ufixed 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // VAR_TYPE ::= Res_String 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // VAR_TYPE ::= UINT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // VAR_TYPE ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // VAR_TYPE ::= Res_Address 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VAR_TYPE ::= BYTE_TYPES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VAR_TYPE ::= BYTE_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VAR_TYPE ::= Res_Bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VARIABLE_AUX_AUX ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX_AUX",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VARIABLE_AUX_AUX ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX_AUX",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VARIABLE_AUX ::= AbreCorchete CierraCorchete VARIABLE_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VARIABLE_AUX ::= VARIABLE_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VARIABLE ::= VAR_TYPE VARIABLE_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RETURNS_FUNCTION_AUX ::= Res_Returns AbreParentesis VAR_TYPE IDENT CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION_AUX",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RETURNS_FUNCTION ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RETURNS_FUNCTION ::= RETURNS_FUNCTION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MOD_LIST ::= Res_Internal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MOD_LIST ::= PRIVACY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MOD_LIST ::= Res_Payable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MODS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MODS ::= MOD_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VAR_LIST_AUX_HELP ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VAR_LIST_AUX_HELP ::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VAR_LIST_AUX ::= VARIABLE PuntoYComa VAR_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VAR_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VAR_LIST ::= VAR_LIST_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARAM_LIST_AUX_HELP ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARAM_LIST_AUX_HELP ::= Coma VARIABLE PARAM_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAM_LIST_AUX ::= VARIABLE PARAM_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAM_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAM_LIST ::= PARAM_LIST_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIAF ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIAF ::= RETURN_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIAF ::= BREAK_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIAF ::= CONTINUE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIAF ::= FOR_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIAF ::= WHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIAF ::= IF_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAF",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPO_FUNCION ::= SENTENCIAF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CUERPO_FUNCION ::= SENTENCIAF CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCION ::= Res_Function Identificador AbreParentesis PARAM_LIST CierraParentesis MODS RETURNS_FUNCTION AbreLlave VAR_LIST CUERPO_FUNCION CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STRUCT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // STRUCT_AUX ::= Coma VARIABLE PuntoYComa STRUCT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STRUCT ::= Res_Struct IDENT AbreLlave VARIABLE PuntoYComa STRUCT_AUX CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LITERAL_NUMERICO_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LITERAL_NUMERICO_AUX ::= Unit_Years 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LITERAL_NUMERICO_AUX ::= Unit_Wei 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LITERAL_NUMERICO_AUX ::= Unit_Weeks 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LITERAL_NUMERICO_AUX ::= Unit_Szabo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LITERAL_NUMERICO_AUX ::= Unit_Seconds 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LITERAL_NUMERICO_AUX ::= Unit_Minutes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LITERAL_NUMERICO_AUX ::= Unit_Hours 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LITERAL_NUMERICO_AUX ::= Unit_Finney 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LITERAL_NUMERICO_AUX ::= Unit_Ether 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LITERAL_NUMERICO_AUX ::= Unit_Days 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LITERAL_NUMERICO ::= Flotante LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LITERAL_NUMERICO ::= Cientifico LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LITERAL_NUMERICO ::= Hexadecimal LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LITERAL_NUMERICO ::= Numero LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LITERAL_BOOLEANO ::= Res_False 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LITERAL_BOOLEANO ::= Res_True 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESSION_PRIMARIA ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESSION_PRIMARIA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESSION_PRIMARIA ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESSION_PRIMARIA ::= LITERAL_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARGUMENTS_EXPRESSION_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGUMENTS_EXPRESSION_AUX ::= Coma EXPRESSION ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARGUMENTS_EXPRESSION ::= EXPRESSION ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_BOOLEANO ::= OrLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_BOOLEANO ::= AndLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_BOOLEANO ::= Diferencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_BOOLEANO ::= Comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_BOOLEANO ::= MayorOIgualQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_BOOLEANO ::= MenorOIgualQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_BOOLEANO ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_BOOLEANO ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_ARITMETICO_TERCER_ORDEN ::= Resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_TERCER_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_ARITMETICO_TERCER_ORDEN ::= Suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_TERCER_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_ARITMETICO_SEGUNDO_ORDEN ::= OP_ARITMETICO_TERCER_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Porcentaje 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_ARITMETICO_PRIMER_ORDEN ::= OP_ARITMETICO_SEGUNDO_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_PRIMER_ORDEN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_ARITMETICO_PRIMER_ORDEN ::= Potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_PRIMER_ORDEN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_BIT ::= OrBits 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_BIT ::= AndBits 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_BIT ::= CorrerALaIzquierda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_BIT ::= CorrerALaDerecha 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSION_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_AUX",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSION_AUX ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_AUX",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP10 ::= ASSIGNMENT_AUX EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP10",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP9 ::= Interrogacion EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP9",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP8 ::= OP_BOOLEANO EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP8",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP7 ::= OP_BIT EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP7",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP6 ::= OP_ARITMETICO_PRIMER_ORDEN EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP6",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP5 ::= AbreParentesis ARGUMENTS_EXPRESSION CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP5",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP4 ::= Punto IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP4",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP3_2 ::= CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP3_2 ::= DosPuntos EXPRESSION_AUX CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP3 ::= AbreCorchete EXPRESSION_AUX EXP3_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP2 ::= EXP10 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP2 ::= EXP9 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP2 ::= EXP8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP2 ::= EXP7 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP2 ::= EXP6 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP2 ::= EXP5 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP2 ::= EXP4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP2 ::= EXP3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP1 ::= EXPRESSION_PRIMARIA EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP1 ::= NotBits EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP1 ::= NotLogico EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSION ::= EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSION ::= AbreParentesis EXP1 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETURN_SENTENCIA_AUX ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA_AUX",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETURN_SENTENCIA ::= Res_Return RETURN_SENTENCIA_AUX PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BREAK_SENTENCIA ::= Res_Break PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_SENTENCIA",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTINUE_SENTENCIA ::= Res_Continue PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE_SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESSION_SENTENCIA ::= EXPRESSION PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_SENTENCIA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BASE ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BASE ::= VARIABLE PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSION_FOR_DOS ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_DOS",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESSION_FOR_UNO ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_UNO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIGNMENT_FOR ::= SENTENCIA_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_FOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR_SENTENCIA ::= Res_For AbreParentesis ASSIGNMENT_FOR EXPRESSION_FOR_UNO EXPRESSION_FOR_DOS CierraParentesis BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DOWHILE_SENTENCIA ::= Res_Do BLOQUE Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE_SENTENCIA ::= Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELSE ::= Res_Else BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOLEAN_EXPRESSION ::= EXPRESSION_PRIMARIA OP_BOOLEANO EXPRESSION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_EXPRESSION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOLEAN_EXPRESSION ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_EXPRESSION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF_SENTENCIA ::= Res_If AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= RETURN_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= BREAK_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= CONTINUE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= FOR_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DOWHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= WHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_BLOQUE ::= SENTENCIA SENTENCIA_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE ::= AbreLlave SENTENCIA_BLOQUE CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_ENUM_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM_AUX",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_ENUM_AUX ::= Coma IDENT CUERPO_ENUM_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM_AUX",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_ENUM ::= IDENT CUERPO_ENUM_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ENUM ::= Res_Enum IDENT AbreLlave CUERPO_ENUM CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENUM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_CONTRATO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_CONTRATO ::= FUNCION CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_CONTRATO ::= STRUCT CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_CONTRATO ::= SENTENCIA CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_CONTRATO ::= ENUM CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRACT ::= Res_Contract IDENT AbreLlave CUERPO_CONTRATO CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRACT_INICIO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT_INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTRACT_INICIO ::= CONTRACT CONTRACT_INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT_INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Res_Pragma Res_Solidity Potencia Flotante Flotante PuntoYComa CONTRACT_INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

