
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 25 16:11:36 CST 2020
//----------------------------------------------------

package soliditycompiler;

import java_cup.runtime.Symbol;
import soliditycompiler.LexerC.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 25 16:11:36 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\310\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\002\000\002\004\007\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\002\000\002\006\004\000\002\006\004\000\002" +
    "\101\003\000\002\101\002\000\002\102\004\000\002\103" +
    "\004\000\002\103\002\000\002\104\004\000\002\007\007" +
    "\000\002\013\004\000\002\014\005\000\002\014\002\000" +
    "\002\025\005\000\002\026\004\000\002\026\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\027\010\000\002\045\003\000" +
    "\002\045\005\000\002\042\004\000\002\042\002\000\002" +
    "\030\007\000\002\031\011\000\002\032\011\000\002\033" +
    "\003\000\002\034\003\000\002\076\003\000\002\043\004" +
    "\000\002\043\003\000\002\044\004\000\002\035\004\000" +
    "\002\036\004\000\002\037\005\000\002\040\003\000\002" +
    "\015\004\000\002\077\003\000\002\077\005\000\002\100" +
    "\003\000\002\100\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\041\005\000\002\041\003" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\002\000\002\110\004\000\002\110\003\000\002" +
    "\110\004\000\002\110\004\000\002\110\004\000\002\110" +
    "\004\000\002\110\004\000\002\110\004\000\002\111\005" +
    "\000\002\112\005\000\002\112\003\000\002\113\004\000" +
    "\002\114\005\000\002\115\004\000\002\116\004\000\002" +
    "\117\004\000\002\120\004\000\002\121\004\000\002\046" +
    "\006\000\002\046\002\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\053\003\000" +
    "\002\053\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\047\004\000\002" +
    "\105\005\000\002\105\002\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\057\003" +
    "\000\002\057\003\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\002\000" +
    "\002\011\011\000\002\062\006\000\002\062\002\000\002" +
    "\012\016\000\002\063\004\000\002\064\003\000\002\064" +
    "\002\000\002\065\004\000\002\066\005\000\002\066\002" +
    "\000\002\067\003\000\002\070\005\000\002\071\006\000" +
    "\002\071\002\000\002\072\003\000\002\072\002\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\074" +
    "\003\000\002\074\002\000\002\075\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\004\056\004\001\002\000\004\063\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\144\010\001\002\000\004\141\011\001\002\000" +
    "\004\141\012\001\002\000\004\176\013\001\002\000\006" +
    "\002\ufffe\046\015\001\002\000\006\002\ufffe\046\015\001" +
    "\002\000\006\066\017\210\021\001\002\000\004\002\000" +
    "\001\002\000\004\200\024\001\002\000\004\170\032\001" +
    "\002\000\100\143\ufff4\144\ufff4\145\ufff4\146\ufff4\147\ufff4" +
    "\150\ufff4\151\ufff4\152\ufff4\153\ufff4\154\ufff4\155\ufff4\156" +
    "\ufff4\157\ufff4\161\ufff4\162\ufff4\163\ufff4\164\ufff4\165\ufff4" +
    "\167\ufff4\170\ufff4\171\ufff4\172\ufff4\173\ufff4\176\ufff4\177" +
    "\ufff4\200\024\201\ufff4\202\ufff4\203\ufff4\204\ufff4\205\ufff4" +
    "\001\002\000\076\143\ufff5\144\ufff5\145\ufff5\146\ufff5\147" +
    "\ufff5\150\ufff5\151\ufff5\152\ufff5\153\ufff5\154\ufff5\155\ufff5" +
    "\156\ufff5\157\ufff5\161\ufff5\162\ufff5\163\ufff5\164\ufff5\165" +
    "\ufff5\167\ufff5\170\ufff5\171\ufff5\172\ufff5\173\ufff5\176\ufff5" +
    "\177\ufff5\201\ufff5\202\ufff5\203\ufff5\204\ufff5\205\ufff5\001" +
    "\002\000\076\143\ufff7\144\ufff7\145\ufff7\146\ufff7\147\ufff7" +
    "\150\ufff7\151\ufff7\152\ufff7\153\ufff7\154\ufff7\155\ufff7\156" +
    "\ufff7\157\ufff7\161\ufff7\162\ufff7\163\ufff7\164\ufff7\165\ufff7" +
    "\167\ufff7\170\ufff7\171\ufff7\172\ufff7\173\ufff7\176\ufff7\177" +
    "\ufff7\201\ufff7\202\ufff7\203\ufff7\204\ufff7\205\ufff7\001\002" +
    "\000\004\210\025\001\002\000\100\143\ufff1\144\ufff1\145" +
    "\ufff1\146\ufff1\147\ufff1\150\ufff1\151\ufff1\152\ufff1\153\ufff1" +
    "\154\ufff1\155\ufff1\156\ufff1\157\ufff1\161\ufff1\162\ufff1\163" +
    "\ufff1\164\ufff1\165\ufff1\166\027\167\ufff1\170\ufff1\171\ufff1" +
    "\172\ufff1\173\ufff1\176\ufff1\177\ufff1\201\ufff1\202\ufff1\203" +
    "\ufff1\204\ufff1\205\ufff1\001\002\000\076\143\ufff0\144\ufff0" +
    "\145\ufff0\146\ufff0\147\ufff0\150\ufff0\151\ufff0\152\ufff0\153" +
    "\ufff0\154\ufff0\155\ufff0\156\ufff0\157\ufff0\161\ufff0\162\ufff0" +
    "\163\ufff0\164\ufff0\165\ufff0\167\ufff0\170\ufff0\171\ufff0\172" +
    "\ufff0\173\ufff0\176\ufff0\177\ufff0\201\ufff0\202\ufff0\203\ufff0" +
    "\204\ufff0\205\ufff0\001\002\000\004\167\031\001\002\000" +
    "\076\143\ufff3\144\ufff3\145\ufff3\146\ufff3\147\ufff3\150\ufff3" +
    "\151\ufff3\152\ufff3\153\ufff3\154\ufff3\155\ufff3\156\ufff3\157" +
    "\ufff3\161\ufff3\162\ufff3\163\ufff3\164\ufff3\165\ufff3\167\ufff3" +
    "\170\ufff3\171\ufff3\172\ufff3\173\ufff3\176\ufff3\177\ufff3\201" +
    "\ufff3\202\ufff3\203\ufff3\204\ufff3\205\ufff3\001\002\000\076" +
    "\143\ufff2\144\ufff2\145\ufff2\146\ufff2\147\ufff2\150\ufff2\151" +
    "\ufff2\152\ufff2\153\ufff2\154\ufff2\155\ufff2\156\ufff2\157\ufff2" +
    "\161\ufff2\162\ufff2\163\ufff2\164\ufff2\165\ufff2\167\ufff2\170" +
    "\ufff2\171\ufff2\172\ufff2\173\ufff2\176\ufff2\177\ufff2\201\ufff2" +
    "\202\ufff2\203\ufff2\204\ufff2\205\ufff2\001\002\000\200\005" +
    "\055\006\132\007\130\010\125\011\053\012\147\013\074" +
    "\014\051\015\122\016\076\020\135\021\157\022\156\023" +
    "\160\024\146\025\145\026\137\027\035\030\134\031\063" +
    "\032\045\033\120\034\154\035\073\036\071\037\067\040" +
    "\110\041\060\042\133\043\155\044\104\045\077\047\052" +
    "\050\047\051\126\052\044\053\066\061\106\064\140\065" +
    "\050\067\103\070\111\071\141\072\043\073\041\074\037" +
    "\075\152\076\117\077\040\100\114\101\034\102\153\140" +
    "\056\141\123\142\075\160\116\166\143\171\ufff8\176\uff90" +
    "\206\127\207\072\210\150\211\131\001\002\000\200\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061\uffe4\064\uffe4\065" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\140" +
    "\uffe4\141\uffe4\142\uffe4\160\uffe4\166\uffe4\171\uffe4\176\uffe4" +
    "\206\uffe4\207\uffe4\210\uffe4\211\uffe4\001\002\000\010\066" +
    "\uff9f\173\uff9f\210\uff9f\001\002\000\010\066\uff9a\173\uff9a" +
    "\210\uff9a\001\002\000\200\005\055\006\132\007\130\010" +
    "\125\011\053\012\147\013\074\014\051\015\122\016\076" +
    "\020\135\021\157\022\156\023\160\024\146\025\145\026" +
    "\137\027\035\030\134\031\063\032\045\033\120\034\154" +
    "\035\073\036\071\037\067\040\110\041\060\042\133\043" +
    "\155\044\104\045\077\047\052\050\047\051\126\052\044" +
    "\053\066\061\106\064\140\065\050\067\103\070\111\071" +
    "\141\072\043\073\041\074\037\075\152\076\117\077\040" +
    "\100\114\101\034\102\153\140\056\141\123\142\075\160" +
    "\116\166\143\171\ufff8\176\uff90\206\127\207\072\210\150" +
    "\211\131\001\002\000\010\066\uffa4\173\uffa4\210\uffa4\001" +
    "\002\000\010\066\uffa1\173\uffa1\210\uffa1\001\002\000\010" +
    "\066\uffa5\173\uffa5\210\uffa5\001\002\000\072\143\uff63\144" +
    "\uff63\145\uff63\146\uff63\147\uff63\150\uff63\151\uff63\152\uff63" +
    "\153\uff63\154\uff63\155\uff63\156\uff63\157\uff63\161\uff63\162" +
    "\uff63\163\uff63\164\uff63\165\uff63\166\uff63\167\uff63\172\uff63" +
    "\173\uff63\200\uff63\201\uff63\202\uff63\203\uff63\204\uff63\205" +
    "\uff63\001\002\000\010\066\uffa6\173\uffa6\210\uffa6\001\002" +
    "\000\004\166\u0135\001\002\000\010\066\uff97\173\uff97\210" +
    "\uff97\001\002\000\200\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\061\uffe1\064\uffe1\065\uffe1\067\uffe1\070\uffe1\071\uffe1" +
    "\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100" +
    "\uffe1\101\uffe1\102\uffe1\140\uffe1\141\uffe1\142\uffe1\160\uffe1" +
    "\166\uffe1\171\uffe1\176\uffe1\206\uffe1\207\uffe1\210\uffe1\211" +
    "\uffe1\001\002\000\006\066\017\210\021\001\002\000\006" +
    "\066\017\210\021\001\002\000\010\066\uffa9\173\uffa9\210" +
    "\uffa9\001\002\000\004\170\203\001\002\000\010\066\uffac" +
    "\173\uffac\210\uffac\001\002\000\200\005\055\006\132\007" +
    "\130\010\125\011\053\012\147\013\074\014\051\015\122" +
    "\016\076\020\135\021\157\022\156\023\160\024\146\025" +
    "\145\026\137\027\035\030\134\031\063\032\045\033\120" +
    "\034\154\035\073\036\071\037\067\040\110\041\060\042" +
    "\133\043\155\044\104\045\077\047\052\050\047\051\126" +
    "\052\044\053\066\061\106\064\140\065\050\067\103\070" +
    "\111\071\141\072\043\073\041\074\037\075\152\076\117" +
    "\077\040\100\114\101\034\102\153\140\056\141\123\142" +
    "\075\160\116\166\143\171\ufff8\176\uff90\206\127\207\072" +
    "\210\150\211\131\001\002\000\010\066\uffb0\173\uffb0\210" +
    "\uffb0\001\002\000\116\103\220\104\213\130\214\131\217" +
    "\132\223\133\216\134\225\135\221\136\224\137\215\143" +
    "\uff50\144\uff50\145\uff50\146\uff50\147\uff50\150\uff50\151\uff50" +
    "\152\uff50\153\uff50\154\uff50\155\uff50\156\uff50\157\uff50\161" +
    "\uff50\162\uff50\163\uff50\164\uff50\165\uff50\166\uff50\167\uff50" +
    "\172\uff50\173\uff50\200\uff50\201\uff50\202\uff50\203\uff50\204" +
    "\uff50\205\uff50\001\002\000\200\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\061\uffe3\064\uffe3\065\uffe3\067\uffe3\070\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077" +
    "\uffe3\100\uffe3\101\uffe3\102\uffe3\140\uffe3\141\uffe3\142\uffe3" +
    "\160\uffe3\166\uffe3\171\uffe3\176\uffe3\206\uffe3\207\uffe3\210" +
    "\uffe3\211\uffe3\001\002\000\010\066\uffb4\173\uffb4\210\uffb4" +
    "\001\002\000\010\066\uffc4\173\uffc4\210\uffc4\001\002\000" +
    "\004\176\u0119\001\002\000\010\066\uff98\173\uff98\210\uff98" +
    "\001\002\000\200\005\055\006\132\007\130\010\125\011" +
    "\053\012\147\013\074\014\051\015\122\016\076\020\135" +
    "\021\157\022\156\023\160\024\146\025\145\026\137\027" +
    "\035\030\134\031\063\032\045\033\120\034\154\035\073" +
    "\036\071\037\067\040\110\041\060\042\133\043\155\044" +
    "\104\045\077\047\052\050\047\051\126\052\044\053\066" +
    "\061\106\064\140\065\050\067\103\070\111\071\141\072" +
    "\043\073\041\074\037\075\152\076\117\077\040\100\114" +
    "\101\034\102\153\140\056\141\123\142\075\160\116\166" +
    "\143\171\ufff8\176\uff90\206\127\207\072\210\150\211\131" +
    "\001\002\000\200\005\055\006\132\007\130\010\125\011" +
    "\053\012\147\013\074\014\051\015\122\016\076\020\135" +
    "\021\157\022\156\023\160\024\146\025\145\026\137\027" +
    "\035\030\134\031\063\032\045\033\120\034\154\035\073" +
    "\036\071\037\067\040\110\041\060\042\133\043\155\044" +
    "\104\045\077\047\052\050\047\051\126\052\044\053\066" +
    "\061\106\064\140\065\050\067\103\070\111\071\141\072" +
    "\043\073\041\074\037\075\152\076\117\077\040\100\114" +
    "\101\034\102\153\140\056\141\123\142\075\160\116\166" +
    "\143\171\ufff8\176\uff90\206\127\207\072\210\150\211\131" +
    "\001\002\000\004\210\360\001\002\000\010\066\uffb6\173" +
    "\uffb6\210\uffb6\001\002\000\070\143\176\144\231\145\177" +
    "\146\171\147\167\150\173\151\232\152\230\153\175\154" +
    "\172\155\170\156\244\157\245\161\263\162\266\163\261" +
    "\164\234\165\271\166\242\172\256\173\264\200\235\201" +
    "\233\202\267\203\262\204\265\205\240\001\002\000\010" +
    "\066\uffb7\173\uffb7\210\uffb7\001\002\000\072\143\uff62\144" +
    "\uff62\145\uff62\146\uff62\147\uff62\150\uff62\151\uff62\152\uff62" +
    "\153\uff62\154\uff62\155\uff62\156\uff62\157\uff62\161\uff62\162" +
    "\uff62\163\uff62\164\uff62\165\uff62\166\uff62\167\uff62\172\uff62" +
    "\173\uff62\200\uff62\201\uff62\202\uff62\203\uff62\204\uff62\205" +
    "\uff62\001\002\000\010\066\uffb8\173\uffb8\210\uffb8\001\002" +
    "\000\010\066\uffaa\173\uffaa\210\uffaa\001\002\000\070\143" +
    "\176\144\231\145\177\146\171\147\167\150\173\151\232" +
    "\152\230\153\175\154\172\155\170\156\244\157\245\161" +
    "\263\162\266\163\261\164\234\165\271\166\242\172\256" +
    "\173\264\200\235\201\233\202\267\203\262\204\265\205" +
    "\240\001\002\000\004\166\347\001\002\000\004\176\346" +
    "\001\002\000\200\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\061\uffe8\064\uffe8\065\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\102\uffe8\140\uffe8\141\uffe8\142\uffe8\160\uffe8\166" +
    "\uffe8\171\uffe8\176\uffe8\206\uffe8\207\uffe8\210\uffe8\211\uffe8" +
    "\001\002\000\010\066\uffc8\173\uffc8\210\uffc8\001\002\000" +
    "\200\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\061\uffd4\064" +
    "\uffd4\065\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\140\uffd4\141\uffd4\142\uffd4\160\uffd4\166\uffd4\171\uffd4" +
    "\176\uffd4\206\uffd4\207\uffd4\210\uffd4\211\uffd4\001\002\000" +
    "\072\143\uff60\144\uff60\145\uff60\146\uff60\147\uff60\150\uff60" +
    "\151\uff60\152\uff60\153\uff60\154\uff60\155\uff60\156\uff60\157" +
    "\uff60\161\uff60\162\uff60\163\uff60\164\uff60\165\uff60\166\uff60" +
    "\167\uff60\172\uff60\173\uff60\200\uff60\201\uff60\202\uff60\203" +
    "\uff60\204\uff60\205\uff60\001\002\000\010\066\uffb1\173\uffb1" +
    "\210\uffb1\001\002\000\010\066\uffc5\173\uffc5\210\uffc5\001" +
    "\002\000\032\051\126\067\103\140\056\141\123\142\075" +
    "\160\116\166\143\176\uff90\206\127\207\072\210\150\211" +
    "\131\001\002\000\200\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\061\uffe5\064\uffe5\065\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100" +
    "\uffe5\101\uffe5\102\uffe5\140\uffe5\141\uffe5\142\uffe5\160\uffe5" +
    "\166\uffe5\171\uffe5\176\uffe5\206\uffe5\207\uffe5\210\uffe5\211" +
    "\uffe5\001\002\000\010\066\uffb5\173\uffb5\210\uffb5\001\002" +
    "\000\010\066\uffc2\173\uffc2\210\uffc2\001\002\000\010\066" +
    "\017\173\331\210\336\001\002\000\200\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\061\uffe2\064\uffe2\065\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\140\uffe2\141\uffe2" +
    "\142\uffe2\160\uffe2\166\uffe2\171\uffe2\176\uffe2\206\uffe2\207" +
    "\uffe2\210\uffe2\211\uffe2\001\002\000\010\066\uffa0\173\uffa0" +
    "\210\uffa0\001\002\000\004\176\330\001\002\000\070\143" +
    "\176\144\231\145\177\146\171\147\167\150\173\151\232" +
    "\152\230\153\175\154\172\155\170\156\244\157\245\161" +
    "\263\162\266\163\261\164\234\165\271\166\242\172\256" +
    "\173\264\200\235\201\233\202\267\203\262\204\265\205" +
    "\240\001\002\000\010\066\uffa2\173\uffa2\210\uffa2\001\002" +
    "\000\010\066\uff96\173\uff96\210\uff96\001\002\000\200\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7\064\uffe7\065" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\140" +
    "\uffe7\141\uffe7\142\uffe7\160\uffe7\166\uffe7\171\uffe7\176\uffe7" +
    "\206\uffe7\207\uffe7\210\uffe7\211\uffe7\001\002\000\010\066" +
    "\uffa8\173\uffa8\210\uffa8\001\002\000\116\103\220\104\213" +
    "\130\214\131\217\132\223\133\216\134\225\135\221\136" +
    "\224\137\215\143\uff50\144\uff50\145\uff50\146\uff50\147\uff50" +
    "\150\uff50\151\uff50\152\uff50\153\uff50\154\uff50\155\uff50\156" +
    "\uff50\157\uff50\161\uff50\162\uff50\163\uff50\164\uff50\165\uff50" +
    "\166\uff50\167\uff50\172\uff50\173\uff50\200\uff50\201\uff50\202" +
    "\uff50\203\uff50\204\uff50\205\uff50\001\002\000\010\066\uffc7" +
    "\173\uffc7\210\uffc7\001\002\000\010\066\uffad\173\uffad\210" +
    "\uffad\001\002\000\072\143\uff5f\144\uff5f\145\uff5f\146\uff5f" +
    "\147\uff5f\150\uff5f\151\uff5f\152\uff5f\153\uff5f\154\uff5f\155" +
    "\uff5f\156\uff5f\157\uff5f\161\uff5f\162\uff5f\163\uff5f\164\uff5f" +
    "\165\uff5f\166\uff5f\167\uff5f\172\uff5f\173\uff5f\200\uff5f\201" +
    "\uff5f\202\uff5f\203\uff5f\204\uff5f\205\uff5f\001\002\000\116" +
    "\103\220\104\213\130\214\131\217\132\223\133\216\134" +
    "\225\135\221\136\224\137\215\143\uff50\144\uff50\145\uff50" +
    "\146\uff50\147\uff50\150\uff50\151\uff50\152\uff50\153\uff50\154" +
    "\uff50\155\uff50\156\uff50\157\uff50\161\uff50\162\uff50\163\uff50" +
    "\164\uff50\165\uff50\166\uff50\167\uff50\172\uff50\173\uff50\200" +
    "\uff50\201\uff50\202\uff50\203\uff50\204\uff50\205\uff50\001\002" +
    "\000\010\066\uffae\173\uffae\210\uffae\001\002\000\116\103" +
    "\220\104\213\130\214\131\217\132\223\133\216\134\225" +
    "\135\221\136\224\137\215\143\uff50\144\uff50\145\uff50\146" +
    "\uff50\147\uff50\150\uff50\151\uff50\152\uff50\153\uff50\154\uff50" +
    "\155\uff50\156\uff50\157\uff50\161\uff50\162\uff50\163\uff50\164" +
    "\uff50\165\uff50\166\uff50\167\uff50\172\uff50\173\uff50\200\uff50" +
    "\201\uff50\202\uff50\203\uff50\204\uff50\205\uff50\001\002\000" +
    "\010\066\uffaf\173\uffaf\210\uffaf\001\002\000\010\066\uffb3" +
    "\173\uffb3\210\uffb3\001\002\000\010\066\uff99\173\uff99\210" +
    "\uff99\001\002\000\010\066\uffc6\173\uffc6\210\uffc6\001\002" +
    "\000\072\143\uff64\144\uff64\145\uff64\146\uff64\147\uff64\150" +
    "\uff64\151\uff64\152\uff64\153\uff64\154\uff64\155\uff64\156\uff64" +
    "\157\uff64\161\uff64\162\uff64\163\uff64\164\uff64\165\uff64\166" +
    "\uff64\167\uff64\172\uff64\173\uff64\200\uff64\201\uff64\202\uff64" +
    "\203\uff64\204\uff64\205\uff64\001\002\000\010\066\uff9b\173" +
    "\uff9b\210\uff9b\001\002\000\010\066\uffc3\173\uffc3\210\uffc3" +
    "\001\002\000\010\066\uffa7\173\uffa7\210\uffa7\001\002\000" +
    "\004\171\212\001\002\000\030\051\126\067\103\140\056" +
    "\141\123\142\075\160\116\167\uff90\206\127\207\072\210" +
    "\150\211\131\001\002\000\012\167\uff94\173\uff94\176\uff94" +
    "\177\uff94\001\002\000\010\066\uff9c\173\uff9c\210\uff9c\001" +
    "\002\000\010\066\uff9d\173\uff9d\210\uff9d\001\002\000\010" +
    "\066\uffab\173\uffab\210\uffab\001\002\000\072\143\uff61\144" +
    "\uff61\145\uff61\146\uff61\147\uff61\150\uff61\151\uff61\152\uff61" +
    "\153\uff61\154\uff61\155\uff61\156\uff61\157\uff61\161\uff61\162" +
    "\uff61\163\uff61\164\uff61\165\uff61\166\uff61\167\uff61\172\uff61" +
    "\173\uff61\200\uff61\201\uff61\202\uff61\203\uff61\204\uff61\205" +
    "\uff61\001\002\000\200\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\061\uffe6\064\uffe6\065\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\101\uffe6\102\uffe6\140\uffe6\141\uffe6\142\uffe6\160\uffe6" +
    "\166\uffe6\171\uffe6\176\uffe6\206\uffe6\207\uffe6\210\uffe6\211" +
    "\uffe6\001\002\000\010\066\uffa3\173\uffa3\210\uffa3\001\002" +
    "\000\004\166\162\001\002\000\010\066\uffb9\173\uffb9\210" +
    "\uffb9\001\002\000\010\066\uffb2\173\uffb2\210\uffb2\001\002" +
    "\000\004\176\161\001\002\000\010\066\uffc9\173\uffc9\210" +
    "\uffc9\001\002\000\010\066\uff9e\173\uff9e\210\uff9e\001\002" +
    "\000\200\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\061\uffd1" +
    "\064\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\140\uffd1\141\uffd1\142\uffd1\160\uffd1\166\uffd1\171" +
    "\uffd1\176\uffd1\206\uffd1\207\uffd1\210\uffd1\211\uffd1\001\002" +
    "\000\024\051\126\066\017\067\103\140\056\141\123\206" +
    "\127\207\072\210\165\211\131\001\002\000\004\167\201" +
    "\001\002\000\004\167\uffdf\001\002\000\026\143\uff61\145" +
    "\uff61\146\uff61\147\uff61\150\uff61\153\uff61\154\uff61\155\uff61" +
    "\167\ufff4\200\024\001\002\000\022\143\176\145\177\146" +
    "\171\147\167\150\173\153\175\154\172\155\170\001\002" +
    "\000\116\051\uff68\067\uff68\140\uff68\141\uff68\142\uff68\143" +
    "\uff68\144\uff68\145\uff68\146\uff68\147\uff68\150\uff68\151\uff68" +
    "\152\uff68\153\uff68\154\uff68\155\uff68\156\uff68\157\uff68\160" +
    "\uff68\161\uff68\162\uff68\163\uff68\164\uff68\165\uff68\167\uff68" +
    "\172\uff68\173\uff68\176\uff68\177\uff68\201\uff68\202\uff68\203" +
    "\uff68\204\uff68\205\uff68\206\uff68\207\uff68\210\uff68\211\uff68" +
    "\001\002\000\116\051\uff6e\067\uff6e\140\uff6e\141\uff6e\142" +
    "\uff6e\143\uff6e\144\uff6e\145\uff6e\146\uff6e\147\uff6e\150\uff6e" +
    "\151\uff6e\152\uff6e\153\uff6e\154\uff6e\155\uff6e\156\uff6e\157" +
    "\uff6e\160\uff6e\161\uff6e\162\uff6e\163\uff6e\164\uff6e\165\uff6e" +
    "\167\uff6e\172\uff6e\173\uff6e\176\uff6e\177\uff6e\201\uff6e\202" +
    "\uff6e\203\uff6e\204\uff6e\205\uff6e\206\uff6e\207\uff6e\210\uff6e" +
    "\211\uff6e\001\002\000\116\051\uff6a\067\uff6a\140\uff6a\141" +
    "\uff6a\142\uff6a\143\uff6a\144\uff6a\145\uff6a\146\uff6a\147\uff6a" +
    "\150\uff6a\151\uff6a\152\uff6a\153\uff6a\154\uff6a\155\uff6a\156" +
    "\uff6a\157\uff6a\160\uff6a\161\uff6a\162\uff6a\163\uff6a\164\uff6a" +
    "\165\uff6a\167\uff6a\172\uff6a\173\uff6a\176\uff6a\177\uff6a\201" +
    "\uff6a\202\uff6a\203\uff6a\204\uff6a\205\uff6a\206\uff6a\207\uff6a" +
    "\210\uff6a\211\uff6a\001\002\000\116\051\uff6c\067\uff6c\140" +
    "\uff6c\141\uff6c\142\uff6c\143\uff6c\144\uff6c\145\uff6c\146\uff6c" +
    "\147\uff6c\150\uff6c\151\uff6c\152\uff6c\153\uff6c\154\uff6c\155" +
    "\uff6c\156\uff6c\157\uff6c\160\uff6c\161\uff6c\162\uff6c\163\uff6c" +
    "\164\uff6c\165\uff6c\167\uff6c\172\uff6c\173\uff6c\176\uff6c\177" +
    "\uff6c\201\uff6c\202\uff6c\203\uff6c\204\uff6c\205\uff6c\206\uff6c" +
    "\207\uff6c\210\uff6c\211\uff6c\001\002\000\116\051\uff6d\067" +
    "\uff6d\140\uff6d\141\uff6d\142\uff6d\143\uff6d\144\uff6d\145\uff6d" +
    "\146\uff6d\147\uff6d\150\uff6d\151\uff6d\152\uff6d\153\uff6d\154" +
    "\uff6d\155\uff6d\156\uff6d\157\uff6d\160\uff6d\161\uff6d\162\uff6d" +
    "\163\uff6d\164\uff6d\165\uff6d\167\uff6d\172\uff6d\173\uff6d\176" +
    "\uff6d\177\uff6d\201\uff6d\202\uff6d\203\uff6d\204\uff6d\205\uff6d" +
    "\206\uff6d\207\uff6d\210\uff6d\211\uff6d\001\002\000\022\051" +
    "\126\067\103\140\056\141\123\206\127\207\072\210\150" +
    "\211\131\001\002\000\116\051\uff6f\067\uff6f\140\uff6f\141" +
    "\uff6f\142\uff6f\143\uff6f\144\uff6f\145\uff6f\146\uff6f\147\uff6f" +
    "\150\uff6f\151\uff6f\152\uff6f\153\uff6f\154\uff6f\155\uff6f\156" +
    "\uff6f\157\uff6f\160\uff6f\161\uff6f\162\uff6f\163\uff6f\164\uff6f" +
    "\165\uff6f\167\uff6f\172\uff6f\173\uff6f\176\uff6f\177\uff6f\201" +
    "\uff6f\202\uff6f\203\uff6f\204\uff6f\205\uff6f\206\uff6f\207\uff6f" +
    "\210\uff6f\211\uff6f\001\002\000\116\051\uff69\067\uff69\140" +
    "\uff69\141\uff69\142\uff69\143\uff69\144\uff69\145\uff69\146\uff69" +
    "\147\uff69\150\uff69\151\uff69\152\uff69\153\uff69\154\uff69\155" +
    "\uff69\156\uff69\157\uff69\160\uff69\161\uff69\162\uff69\163\uff69" +
    "\164\uff69\165\uff69\167\uff69\172\uff69\173\uff69\176\uff69\177" +
    "\uff69\201\uff69\202\uff69\203\uff69\204\uff69\205\uff69\206\uff69" +
    "\207\uff69\210\uff69\211\uff69\001\002\000\116\051\uff6b\067" +
    "\uff6b\140\uff6b\141\uff6b\142\uff6b\143\uff6b\144\uff6b\145\uff6b" +
    "\146\uff6b\147\uff6b\150\uff6b\151\uff6b\152\uff6b\153\uff6b\154" +
    "\uff6b\155\uff6b\156\uff6b\157\uff6b\160\uff6b\161\uff6b\162\uff6b" +
    "\163\uff6b\164\uff6b\165\uff6b\167\uff6b\172\uff6b\173\uff6b\176" +
    "\uff6b\177\uff6b\201\uff6b\202\uff6b\203\uff6b\204\uff6b\205\uff6b" +
    "\206\uff6b\207\uff6b\210\uff6b\211\uff6b\001\002\000\004\167" +
    "\uffde\001\002\000\004\170\203\001\002\000\200\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\061\uffdb\064\uffdb\065\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\140\uffdb" +
    "\141\uffdb\142\uffdb\160\uffdb\166\uffdb\171\uffdb\176\uffdb\206" +
    "\uffdb\207\uffdb\210\uffdb\211\uffdb\001\002\000\170\005\055" +
    "\006\132\007\130\010\125\011\053\012\147\013\074\014" +
    "\051\015\122\016\076\020\135\021\157\022\156\023\160" +
    "\024\146\025\145\026\137\027\035\030\134\031\063\032" +
    "\045\033\120\034\154\035\073\036\071\037\067\040\110" +
    "\041\060\042\133\043\155\044\104\045\077\047\052\051" +
    "\126\052\044\061\106\064\140\067\103\070\111\071\141" +
    "\072\043\073\041\074\037\075\152\076\117\077\040\100" +
    "\114\101\034\102\153\140\056\141\123\142\075\160\116" +
    "\166\143\176\uff90\206\127\207\072\210\150\211\131\001" +
    "\002\000\004\171\207\001\002\000\172\005\055\006\132" +
    "\007\130\010\125\011\053\012\147\013\074\014\051\015" +
    "\122\016\076\020\135\021\157\022\156\023\160\024\146" +
    "\025\145\026\137\027\035\030\134\031\063\032\045\033" +
    "\120\034\154\035\073\036\071\037\067\040\110\041\060" +
    "\042\133\043\155\044\104\045\077\047\052\051\126\052" +
    "\044\061\106\064\140\067\103\070\111\071\141\072\043" +
    "\073\041\074\037\075\152\076\117\077\040\100\114\101" +
    "\034\102\153\140\056\141\123\142\075\160\116\166\143" +
    "\171\uffe9\176\uff90\206\127\207\072\210\150\211\131\001" +
    "\002\000\004\171\uffea\001\002\000\202\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\061\uffeb\064\uffeb\065\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\140\uffeb" +
    "\141\uffeb\142\uffeb\160\uffeb\166\uffeb\171\uffeb\176\uffeb\206" +
    "\uffeb\207\uffeb\210\uffeb\211\uffeb\001\002\000\004\167\211" +
    "\001\002\000\012\167\uff95\173\uff95\176\uff95\177\uff95\001" +
    "\002\000\006\002\ufffd\046\ufffd\001\002\000\072\143\uff59" +
    "\144\uff59\145\uff59\146\uff59\147\uff59\150\uff59\151\uff59\152" +
    "\uff59\153\uff59\154\uff59\155\uff59\156\uff59\157\uff59\161\uff59" +
    "\162\uff59\163\uff59\164\uff59\165\uff59\166\uff59\167\uff59\172" +
    "\uff59\173\uff59\200\uff59\201\uff59\202\uff59\203\uff59\204\uff59" +
    "\205\uff59\001\002\000\072\143\uff58\144\uff58\145\uff58\146" +
    "\uff58\147\uff58\150\uff58\151\uff58\152\uff58\153\uff58\154\uff58" +
    "\155\uff58\156\uff58\157\uff58\161\uff58\162\uff58\163\uff58\164" +
    "\uff58\165\uff58\166\uff58\167\uff58\172\uff58\173\uff58\200\uff58" +
    "\201\uff58\202\uff58\203\uff58\204\uff58\205\uff58\001\002\000" +
    "\072\143\uff51\144\uff51\145\uff51\146\uff51\147\uff51\150\uff51" +
    "\151\uff51\152\uff51\153\uff51\154\uff51\155\uff51\156\uff51\157" +
    "\uff51\161\uff51\162\uff51\163\uff51\164\uff51\165\uff51\166\uff51" +
    "\167\uff51\172\uff51\173\uff51\200\uff51\201\uff51\202\uff51\203" +
    "\uff51\204\uff51\205\uff51\001\002\000\072\143\uff55\144\uff55" +
    "\145\uff55\146\uff55\147\uff55\150\uff55\151\uff55\152\uff55\153" +
    "\uff55\154\uff55\155\uff55\156\uff55\157\uff55\161\uff55\162\uff55" +
    "\163\uff55\164\uff55\165\uff55\166\uff55\167\uff55\172\uff55\173" +
    "\uff55\200\uff55\201\uff55\202\uff55\203\uff55\204\uff55\205\uff55" +
    "\001\002\000\072\143\uff57\144\uff57\145\uff57\146\uff57\147" +
    "\uff57\150\uff57\151\uff57\152\uff57\153\uff57\154\uff57\155\uff57" +
    "\156\uff57\157\uff57\161\uff57\162\uff57\163\uff57\164\uff57\165" +
    "\uff57\166\uff57\167\uff57\172\uff57\173\uff57\200\uff57\201\uff57" +
    "\202\uff57\203\uff57\204\uff57\205\uff57\001\002\000\072\143" +
    "\uff5a\144\uff5a\145\uff5a\146\uff5a\147\uff5a\150\uff5a\151\uff5a" +
    "\152\uff5a\153\uff5a\154\uff5a\155\uff5a\156\uff5a\157\uff5a\161" +
    "\uff5a\162\uff5a\163\uff5a\164\uff5a\165\uff5a\166\uff5a\167\uff5a" +
    "\172\uff5a\173\uff5a\200\uff5a\201\uff5a\202\uff5a\203\uff5a\204" +
    "\uff5a\205\uff5a\001\002\000\072\143\uff53\144\uff53\145\uff53" +
    "\146\uff53\147\uff53\150\uff53\151\uff53\152\uff53\153\uff53\154" +
    "\uff53\155\uff53\156\uff53\157\uff53\161\uff53\162\uff53\163\uff53" +
    "\164\uff53\165\uff53\166\uff53\167\uff53\172\uff53\173\uff53\200" +
    "\uff53\201\uff53\202\uff53\203\uff53\204\uff53\205\uff53\001\002" +
    "\000\072\143\uff5e\144\uff5e\145\uff5e\146\uff5e\147\uff5e\150" +
    "\uff5e\151\uff5e\152\uff5e\153\uff5e\154\uff5e\155\uff5e\156\uff5e" +
    "\157\uff5e\161\uff5e\162\uff5e\163\uff5e\164\uff5e\165\uff5e\166" +
    "\uff5e\167\uff5e\172\uff5e\173\uff5e\200\uff5e\201\uff5e\202\uff5e" +
    "\203\uff5e\204\uff5e\205\uff5e\001\002\000\072\143\uff56\144" +
    "\uff56\145\uff56\146\uff56\147\uff56\150\uff56\151\uff56\152\uff56" +
    "\153\uff56\154\uff56\155\uff56\156\uff56\157\uff56\161\uff56\162" +
    "\uff56\163\uff56\164\uff56\165\uff56\166\uff56\167\uff56\172\uff56" +
    "\173\uff56\200\uff56\201\uff56\202\uff56\203\uff56\204\uff56\205" +
    "\uff56\001\002\000\072\143\uff52\144\uff52\145\uff52\146\uff52" +
    "\147\uff52\150\uff52\151\uff52\152\uff52\153\uff52\154\uff52\155" +
    "\uff52\156\uff52\157\uff52\161\uff52\162\uff52\163\uff52\164\uff52" +
    "\165\uff52\166\uff52\167\uff52\172\uff52\173\uff52\200\uff52\201" +
    "\uff52\202\uff52\203\uff52\204\uff52\205\uff52\001\002\000\072" +
    "\143\uff54\144\uff54\145\uff54\146\uff54\147\uff54\150\uff54\151" +
    "\uff54\152\uff54\153\uff54\154\uff54\155\uff54\156\uff54\157\uff54" +
    "\161\uff54\162\uff54\163\uff54\164\uff54\165\uff54\166\uff54\167" +
    "\uff54\172\uff54\173\uff54\200\uff54\201\uff54\202\uff54\203\uff54" +
    "\204\uff54\205\uff54\001\002\000\072\143\uff5d\144\uff5d\145" +
    "\uff5d\146\uff5d\147\uff5d\150\uff5d\151\uff5d\152\uff5d\153\uff5d" +
    "\154\uff5d\155\uff5d\156\uff5d\157\uff5d\161\uff5d\162\uff5d\163" +
    "\uff5d\164\uff5d\165\uff5d\166\uff5d\167\uff5d\172\uff5d\173\uff5d" +
    "\200\uff5d\201\uff5d\202\uff5d\203\uff5d\204\uff5d\205\uff5d\001" +
    "\002\000\072\143\uff5b\144\uff5b\145\uff5b\146\uff5b\147\uff5b" +
    "\150\uff5b\151\uff5b\152\uff5b\153\uff5b\154\uff5b\155\uff5b\156" +
    "\uff5b\157\uff5b\161\uff5b\162\uff5b\163\uff5b\164\uff5b\165\uff5b" +
    "\166\uff5b\167\uff5b\172\uff5b\173\uff5b\200\uff5b\201\uff5b\202" +
    "\uff5b\203\uff5b\204\uff5b\205\uff5b\001\002\000\116\051\uff7b" +
    "\067\uff7b\140\uff7b\141\uff7b\142\uff7b\143\uff7b\144\uff7b\145" +
    "\uff7b\146\uff7b\147\uff7b\150\uff7b\151\uff7b\152\uff7b\153\uff7b" +
    "\154\uff7b\155\uff7b\156\uff7b\157\uff7b\160\uff7b\161\uff7b\162" +
    "\uff7b\163\uff7b\164\uff7b\165\uff7b\167\uff7b\172\uff7b\173\uff7b" +
    "\176\uff7b\177\uff7b\201\uff7b\202\uff7b\203\uff7b\204\uff7b\205" +
    "\uff7b\206\uff7b\207\uff7b\210\uff7b\211\uff7b\001\002\000\116" +
    "\051\uff77\067\uff77\140\uff77\141\uff77\142\uff77\143\uff77\144" +
    "\uff77\145\uff77\146\uff77\147\uff77\150\uff77\151\uff77\152\uff77" +
    "\153\uff77\154\uff77\155\uff77\156\uff77\157\uff77\160\uff77\161" +
    "\uff77\162\uff77\163\uff77\164\uff77\165\uff77\167\uff77\172\uff77" +
    "\173\uff77\176\uff77\177\uff77\201\uff77\202\uff77\203\uff77\204" +
    "\uff77\205\uff77\206\uff77\207\uff77\210\uff77\211\uff77\001\002" +
    "\000\116\051\uff7a\067\uff7a\140\uff7a\141\uff7a\142\uff7a\143" +
    "\uff7a\144\uff7a\145\uff7a\146\uff7a\147\uff7a\150\uff7a\151\uff7a" +
    "\152\uff7a\153\uff7a\154\uff7a\155\uff7a\156\uff7a\157\uff7a\160" +
    "\uff7a\161\uff7a\162\uff7a\163\uff7a\164\uff7a\165\uff7a\167\uff7a" +
    "\172\uff7a\173\uff7a\176\uff7a\177\uff7a\201\uff7a\202\uff7a\203" +
    "\uff7a\204\uff7a\205\uff7a\206\uff7a\207\uff7a\210\uff7a\211\uff7a" +
    "\001\002\000\120\051\uffc0\067\uffc0\140\uffc0\141\uffc0\142" +
    "\uffc0\143\uffc0\144\uffc0\145\uffc0\146\uffc0\147\uffc0\150\uffc0" +
    "\151\uffc0\152\uffc0\153\uffc0\154\uffc0\155\uffc0\156\uffc0\157" +
    "\uffc0\160\uffc0\161\uffc0\162\uffc0\163\uffc0\164\uffc0\165\uffc0" +
    "\166\uffc0\167\uffc0\172\uffc0\173\uffc0\176\uffc0\177\uffc0\201" +
    "\uffc0\202\uffc0\203\uffc0\204\uffc0\205\uffc0\206\uffc0\207\uffc0" +
    "\210\uffc0\211\uffc0\001\002\000\120\051\uffbd\067\uffbd\140" +
    "\uffbd\141\uffbd\142\uffbd\143\uffbd\144\uffbd\145\uffbd\146\uffbd" +
    "\147\uffbd\150\uffbd\151\uffbd\152\uffbd\153\uffbd\154\uffbd\155" +
    "\uffbd\156\uffbd\157\uffbd\160\uffbd\161\uffbd\162\uffbd\163\uffbd" +
    "\164\uffbd\165\uffbd\166\uffbd\167\uffbd\172\uffbd\173\uffbd\176" +
    "\uffbd\177\uffbd\201\uffbd\202\uffbd\203\uffbd\204\uffbd\205\uffbd" +
    "\206\uffbd\207\uffbd\210\uffbd\211\uffbd\001\002\000\006\066" +
    "\017\210\021\001\002\000\046\051\126\067\103\140\056" +
    "\141\123\142\075\143\uff90\145\uff90\146\uff90\147\uff90\150" +
    "\uff90\153\uff90\154\uff90\155\uff90\160\116\206\127\207\072" +
    "\210\150\211\131\001\002\000\004\172\325\001\002\000" +
    "\116\051\uff74\067\uff74\140\uff74\141\uff74\142\uff74\143\uff74" +
    "\144\uff74\145\uff74\146\uff74\147\uff74\150\uff74\151\uff74\152" +
    "\uff74\153\uff74\154\uff74\155\uff74\156\uff74\157\uff74\160\uff74" +
    "\161\uff74\162\uff74\163\uff74\164\uff74\165\uff74\167\uff74\172" +
    "\uff74\173\uff74\176\uff74\177\uff74\201\uff74\202\uff74\203\uff74" +
    "\204\uff74\205\uff74\206\uff74\207\uff74\210\uff74\211\uff74\001" +
    "\002\000\040\051\126\067\103\140\056\141\123\142\075" +
    "\160\116\162\uff90\163\uff90\164\uff90\165\uff90\201\uff90\206" +
    "\127\207\072\210\150\211\131\001\002\000\034\051\126" +
    "\067\103\140\056\141\123\142\075\160\116\166\143\167" +
    "\uff90\177\uff90\206\127\207\072\210\150\211\131\001\002" +
    "\000\022\143\176\145\177\146\171\147\167\150\173\153" +
    "\175\154\172\155\170\001\002\000\116\051\uff79\067\uff79" +
    "\140\uff79\141\uff79\142\uff79\143\uff79\144\uff79\145\uff79\146" +
    "\uff79\147\uff79\150\uff79\151\uff79\152\uff79\153\uff79\154\uff79" +
    "\155\uff79\156\uff79\157\uff79\160\uff79\161\uff79\162\uff79\163" +
    "\uff79\164\uff79\165\uff79\167\uff79\172\uff79\173\uff79\176\uff79" +
    "\177\uff79\201\uff79\202\uff79\203\uff79\204\uff79\205\uff79\206" +
    "\uff79\207\uff79\210\uff79\211\uff79\001\002\000\116\051\uff78" +
    "\067\uff78\140\uff78\141\uff78\142\uff78\143\uff78\144\uff78\145" +
    "\uff78\146\uff78\147\uff78\150\uff78\151\uff78\152\uff78\153\uff78" +
    "\154\uff78\155\uff78\156\uff78\157\uff78\160\uff78\161\uff78\162" +
    "\uff78\163\uff78\164\uff78\165\uff78\167\uff78\172\uff78\173\uff78" +
    "\176\uff78\177\uff78\201\uff78\202\uff78\203\uff78\204\uff78\205" +
    "\uff78\206\uff78\207\uff78\210\uff78\211\uff78\001\002\000\012" +
    "\151\232\152\230\156\244\157\245\001\002\000\016\144" +
    "\231\161\263\202\267\203\262\204\265\205\240\001\002" +
    "\000\004\166\311\001\002\000\014\162\266\163\261\164" +
    "\234\165\271\201\233\001\002\000\072\143\uff8e\144\uff8e" +
    "\145\uff8e\146\uff8e\147\uff8e\150\uff8e\151\uff8e\152\uff8e\153" +
    "\uff8e\154\uff8e\155\uff8e\156\uff8e\157\uff8e\161\uff8e\162\uff8e" +
    "\163\uff8e\164\uff8e\165\uff8e\167\uff8e\172\uff8e\173\uff8e\176" +
    "\uff8e\177\uff8e\201\uff8e\202\uff8e\203\uff8e\204\uff8e\205\uff8e" +
    "\001\002\000\004\173\307\001\002\000\072\143\uff92\144" +
    "\uff92\145\uff92\146\uff92\147\uff92\150\uff92\151\uff92\152\uff92" +
    "\153\uff92\154\uff92\155\uff92\156\uff92\157\uff92\161\uff92\162" +
    "\uff92\163\uff92\164\uff92\165\uff92\167\uff92\172\uff92\173\uff92" +
    "\176\uff92\177\uff92\201\uff92\202\uff92\203\uff92\204\uff92\205" +
    "\uff92\001\002\000\036\051\126\067\103\140\056\141\123" +
    "\142\075\151\uff90\152\uff90\156\uff90\157\uff90\160\116\206" +
    "\127\207\072\210\150\211\131\001\002\000\030\051\126" +
    "\067\103\140\056\141\123\142\075\160\116\172\uff90\206" +
    "\127\207\072\210\150\211\131\001\002\000\042\051\126" +
    "\067\103\140\056\141\123\142\075\144\uff90\160\116\161" +
    "\uff90\202\uff90\203\uff90\204\uff90\205\uff90\206\127\207\072" +
    "\210\150\211\131\001\002\000\116\051\uff72\067\uff72\140" +
    "\uff72\141\uff72\142\uff72\143\uff72\144\uff72\145\uff72\146\uff72" +
    "\147\uff72\150\uff72\151\uff72\152\uff72\153\uff72\154\uff72\155" +
    "\uff72\156\uff72\157\uff72\160\uff72\161\uff72\162\uff72\163\uff72" +
    "\164\uff72\165\uff72\167\uff72\172\uff72\173\uff72\176\uff72\177" +
    "\uff72\201\uff72\202\uff72\203\uff72\204\uff72\205\uff72\206\uff72" +
    "\207\uff72\210\uff72\211\uff72\001\002\000\120\051\uffbe\067" +
    "\uffbe\140\uffbe\141\uffbe\142\uffbe\143\uffbe\144\uffbe\145\uffbe" +
    "\146\uffbe\147\uffbe\150\uffbe\151\uffbe\152\uffbe\153\uffbe\154" +
    "\uffbe\155\uffbe\156\uffbe\157\uffbe\160\uffbe\161\uffbe\162\uffbe" +
    "\163\uffbe\164\uffbe\165\uffbe\166\uffbe\167\uffbe\172\uffbe\173" +
    "\uffbe\176\uffbe\177\uffbe\201\uffbe\202\uffbe\203\uffbe\204\uffbe" +
    "\205\uffbe\206\uffbe\207\uffbe\210\uffbe\211\uffbe\001\002\000" +
    "\116\051\uff70\067\uff70\140\uff70\141\uff70\142\uff70\143\uff70" +
    "\144\uff70\145\uff70\146\uff70\147\uff70\150\uff70\151\uff70\152" +
    "\uff70\153\uff70\154\uff70\155\uff70\156\uff70\157\uff70\160\uff70" +
    "\161\uff70\162\uff70\163\uff70\164\uff70\165\uff70\167\uff70\172" +
    "\uff70\173\uff70\176\uff70\177\uff70\201\uff70\202\uff70\203\uff70" +
    "\204\uff70\205\uff70\206\uff70\207\uff70\210\uff70\211\uff70\001" +
    "\002\000\116\051\uff73\067\uff73\140\uff73\141\uff73\142\uff73" +
    "\143\uff73\144\uff73\145\uff73\146\uff73\147\uff73\150\uff73\151" +
    "\uff73\152\uff73\153\uff73\154\uff73\155\uff73\156\uff73\157\uff73" +
    "\160\uff73\161\uff73\162\uff73\163\uff73\164\uff73\165\uff73\167" +
    "\uff73\172\uff73\173\uff73\176\uff73\177\uff73\201\uff73\202\uff73" +
    "\203\uff73\204\uff73\205\uff73\206\uff73\207\uff73\210\uff73\211" +
    "\uff73\001\002\000\036\051\126\067\103\140\056\141\123" +
    "\142\075\160\116\166\143\173\uff90\174\uff7c\175\uff7c\206" +
    "\127\207\072\210\150\211\131\001\002\000\116\051\uff75" +
    "\067\uff75\140\uff75\141\uff75\142\uff75\143\uff75\144\uff75\145" +
    "\uff75\146\uff75\147\uff75\150\uff75\151\uff75\152\uff75\153\uff75" +
    "\154\uff75\155\uff75\156\uff75\157\uff75\160\uff75\161\uff75\162" +
    "\uff75\163\uff75\164\uff75\165\uff75\167\uff75\172\uff75\173\uff75" +
    "\176\uff75\177\uff75\201\uff75\202\uff75\203\uff75\204\uff75\205" +
    "\uff75\206\uff75\207\uff75\210\uff75\211\uff75\001\002\000\120" +
    "\051\uffbf\067\uffbf\140\uffbf\141\uffbf\142\uffbf\143\uffbf\144" +
    "\uffbf\145\uffbf\146\uffbf\147\uffbf\150\uffbf\151\uffbf\152\uffbf" +
    "\153\uffbf\154\uffbf\155\uffbf\156\uffbf\157\uffbf\160\uffbf\161" +
    "\uffbf\162\uffbf\163\uffbf\164\uffbf\165\uffbf\166\uffbf\167\uffbf" +
    "\172\uffbf\173\uffbf\176\uffbf\177\uffbf\201\uffbf\202\uffbf\203" +
    "\uffbf\204\uffbf\205\uffbf\206\uffbf\207\uffbf\210\uffbf\211\uffbf" +
    "\001\002\000\116\051\uff71\067\uff71\140\uff71\141\uff71\142" +
    "\uff71\143\uff71\144\uff71\145\uff71\146\uff71\147\uff71\150\uff71" +
    "\151\uff71\152\uff71\153\uff71\154\uff71\155\uff71\156\uff71\157" +
    "\uff71\160\uff71\161\uff71\162\uff71\163\uff71\164\uff71\165\uff71" +
    "\167\uff71\172\uff71\173\uff71\176\uff71\177\uff71\201\uff71\202" +
    "\uff71\203\uff71\204\uff71\205\uff71\206\uff71\207\uff71\210\uff71" +
    "\211\uff71\001\002\000\116\051\uff76\067\uff76\140\uff76\141" +
    "\uff76\142\uff76\143\uff76\144\uff76\145\uff76\146\uff76\147\uff76" +
    "\150\uff76\151\uff76\152\uff76\153\uff76\154\uff76\155\uff76\156" +
    "\uff76\157\uff76\160\uff76\161\uff76\162\uff76\163\uff76\164\uff76" +
    "\165\uff76\167\uff76\172\uff76\173\uff76\176\uff76\177\uff76\201" +
    "\uff76\202\uff76\203\uff76\204\uff76\205\uff76\206\uff76\207\uff76" +
    "\210\uff76\211\uff76\001\002\000\120\051\uffbc\067\uffbc\140" +
    "\uffbc\141\uffbc\142\uffbc\143\uffbc\144\uffbc\145\uffbc\146\uffbc" +
    "\147\uffbc\150\uffbc\151\uffbc\152\uffbc\153\uffbc\154\uffbc\155" +
    "\uffbc\156\uffbc\157\uffbc\160\uffbc\161\uffbc\162\uffbc\163\uffbc" +
    "\164\uffbc\165\uffbc\166\uffbc\167\uffbc\172\uffbc\173\uffbc\176" +
    "\uffbc\177\uffbc\201\uffbc\202\uffbc\203\uffbc\204\uffbc\205\uffbc" +
    "\206\uffbc\207\uffbc\210\uffbc\211\uffbc\001\002\000\006\174" +
    "\301\175\300\001\002\000\004\173\274\001\002\000\034" +
    "\051\126\067\103\140\056\141\123\142\075\160\116\166" +
    "\143\173\uff90\174\uff7c\206\127\207\072\210\150\211\131" +
    "\001\002\000\004\174\276\001\002\000\006\174\uff7d\175" +
    "\uff7d\001\002\000\004\173\uff87\001\002\000\034\051\126" +
    "\067\103\140\056\141\123\142\075\160\116\166\143\173" +
    "\uff90\174\uff7c\206\127\207\072\210\150\211\131\001\002" +
    "\000\004\173\uff85\001\002\000\004\174\303\001\002\000" +
    "\004\173\uff86\001\002\000\016\144\uff82\161\uff82\202\uff82" +
    "\203\uff82\204\uff82\205\uff82\001\002\000\004\172\uff7f\001" +
    "\002\000\012\151\uff81\152\uff81\156\uff81\157\uff81\001\002" +
    "\000\072\143\uff8f\144\uff8f\145\uff8f\146\uff8f\147\uff8f\150" +
    "\uff8f\151\uff8f\152\uff8f\153\uff8f\154\uff8f\155\uff8f\156\uff8f" +
    "\157\uff8f\161\uff8f\162\uff8f\163\uff8f\164\uff8f\165\uff8f\167" +
    "\uff8f\172\uff8f\173\uff8f\176\uff8f\177\uff8f\201\uff8f\202\uff8f" +
    "\203\uff8f\204\uff8f\205\uff8f\001\002\000\072\143\uff88\144" +
    "\uff88\145\uff88\146\uff88\147\uff88\150\uff88\151\uff88\152\uff88" +
    "\153\uff88\154\uff88\155\uff88\156\uff88\157\uff88\161\uff88\162" +
    "\uff88\163\uff88\164\uff88\165\uff88\167\uff88\172\uff88\173\uff88" +
    "\176\uff88\177\uff88\201\uff88\202\uff88\203\uff88\204\uff88\205" +
    "\uff88\001\002\000\072\143\uff8d\144\uff8d\145\uff8d\146\uff8d" +
    "\147\uff8d\150\uff8d\151\uff8d\152\uff8d\153\uff8d\154\uff8d\155" +
    "\uff8d\156\uff8d\157\uff8d\161\uff8d\162\uff8d\163\uff8d\164\uff8d" +
    "\165\uff8d\167\uff8d\172\uff8d\173\uff8d\176\uff8d\177\uff8d\201" +
    "\uff8d\202\uff8d\203\uff8d\204\uff8d\205\uff8d\001\002\000\072" +
    "\143\uff8c\144\uff8c\145\uff8c\146\uff8c\147\uff8c\150\uff8c\151" +
    "\uff8c\152\uff8c\153\uff8c\154\uff8c\155\uff8c\156\uff8c\157\uff8c" +
    "\161\uff8c\162\uff8c\163\uff8c\164\uff8c\165\uff8c\167\uff8c\172" +
    "\uff8c\173\uff8c\176\uff8c\177\uff8c\201\uff8c\202\uff8c\203\uff8c" +
    "\204\uff8c\205\uff8c\001\002\000\072\143\uff8b\144\uff8b\145" +
    "\uff8b\146\uff8b\147\uff8b\150\uff8b\151\uff8b\152\uff8b\153\uff8b" +
    "\154\uff8b\155\uff8b\156\uff8b\157\uff8b\161\uff8b\162\uff8b\163" +
    "\uff8b\164\uff8b\165\uff8b\167\uff8b\172\uff8b\173\uff8b\176\uff8b" +
    "\177\uff8b\201\uff8b\202\uff8b\203\uff8b\204\uff8b\205\uff8b\001" +
    "\002\000\072\143\uff8a\144\uff8a\145\uff8a\146\uff8a\147\uff8a" +
    "\150\uff8a\151\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a\156" +
    "\uff8a\157\uff8a\161\uff8a\162\uff8a\163\uff8a\164\uff8a\165\uff8a" +
    "\167\uff8a\172\uff8a\173\uff8a\176\uff8a\177\uff8a\201\uff8a\202" +
    "\uff8a\203\uff8a\204\uff8a\205\uff8a\001\002\000\004\167\323" +
    "\001\002\000\006\167\uff65\177\317\001\002\000\034\051" +
    "\126\067\103\140\056\141\123\142\075\160\116\166\143" +
    "\167\uff90\177\uff90\206\127\207\072\210\150\211\131\001" +
    "\002\000\004\167\uff67\001\002\000\006\167\uff65\177\317" +
    "\001\002\000\004\167\uff66\001\002\000\004\166\uff83\001" +
    "\002\000\014\162\uff7e\163\uff7e\164\uff7e\165\uff7e\201\uff7e" +
    "\001\002\000\072\143\uff89\144\uff89\145\uff89\146\uff89\147" +
    "\uff89\150\uff89\151\uff89\152\uff89\153\uff89\154\uff89\155\uff89" +
    "\156\uff89\157\uff89\161\uff89\162\uff89\163\uff89\164\uff89\165" +
    "\uff89\167\uff89\172\uff89\173\uff89\176\uff89\177\uff89\201\uff89" +
    "\202\uff89\203\uff89\204\uff89\205\uff89\001\002\000\022\143" +
    "\uff80\145\uff80\146\uff80\147\uff80\150\uff80\153\uff80\154\uff80" +
    "\155\uff80\001\002\000\072\143\uff84\144\uff84\145\uff84\146" +
    "\uff84\147\uff84\150\uff84\151\uff84\152\uff84\153\uff84\154\uff84" +
    "\155\uff84\156\uff84\157\uff84\161\uff84\162\uff84\163\uff84\164" +
    "\uff84\165\uff84\167\uff84\172\uff84\173\uff84\176\uff84\177\uff84" +
    "\201\uff84\202\uff84\203\uff84\204\uff84\205\uff84\001\002\000" +
    "\200\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\061\uffd5\064" +
    "\uffd5\065\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5" +
    "\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102" +
    "\uffd5\140\uffd5\141\uffd5\142\uffd5\160\uffd5\166\uffd5\171\uffd5" +
    "\176\uffd5\206\uffd5\207\uffd5\210\uffd5\211\uffd5\001\002\000" +
    "\004\174\341\001\002\000\010\167\uffca\176\uffca\177\uffca" +
    "\001\002\000\010\167\uffcb\176\uffcb\177\uffcb\001\002\000" +
    "\010\167\uffcd\176\uffcd\177\uffcd\001\002\000\010\167\uffce" +
    "\176\uffce\177\uffce\001\002\000\024\162\266\163\261\164" +
    "\234\165\271\167\ufff4\176\ufff4\177\ufff4\200\024\201\233" +
    "\001\002\000\036\051\126\067\103\140\056\141\123\142" +
    "\075\160\116\166\143\167\uff90\176\uff90\177\uff90\206\127" +
    "\207\072\210\150\211\131\001\002\000\010\167\uffc1\176" +
    "\uffc1\177\uffc1\001\002\000\006\066\017\210\336\001\002" +
    "\000\010\167\uffcc\176\uffcc\177\uffcc\001\002\000\004\176" +
    "\345\001\002\000\004\176\uffcf\001\002\000\200\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\061\uffd0\064\uffd0\065\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\140\uffd0" +
    "\141\uffd0\142\uffd0\160\uffd0\166\uffd0\171\uffd0\176\uffd0\206" +
    "\uffd0\207\uffd0\210\uffd0\211\uffd0\001\002\000\200\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\061\uffd2\064\uffd2\065\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\140\uffd2" +
    "\141\uffd2\142\uffd2\160\uffd2\166\uffd2\171\uffd2\176\uffd2\206" +
    "\uffd2\207\uffd2\210\uffd2\211\uffd2\001\002\000\024\051\126" +
    "\066\017\067\103\140\056\141\123\206\127\207\072\210" +
    "\165\211\131\001\002\000\004\167\351\001\002\000\004" +
    "\170\203\001\002\000\202\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\353\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\061\uffdc\064\uffdc\065\uffdc\067\uffdc\070" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\101\uffdc\102\uffdc\140\uffdc\141\uffdc\142" +
    "\uffdc\160\uffdc\166\uffdc\171\uffdc\176\uffdc\206\uffdc\207\uffdc" +
    "\210\uffdc\211\uffdc\001\002\000\004\170\203\001\002\000" +
    "\200\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\061\uffe0\064" +
    "\uffe0\065\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102" +
    "\uffe0\140\uffe0\141\uffe0\142\uffe0\160\uffe0\166\uffe0\171\uffe0" +
    "\176\uffe0\206\uffe0\207\uffe0\210\uffe0\211\uffe0\001\002\000" +
    "\200\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\061\uffdd\064" +
    "\uffdd\065\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102" +
    "\uffdd\140\uffdd\141\uffdd\142\uffdd\160\uffdd\166\uffdd\171\uffdd" +
    "\176\uffdd\206\uffdd\207\uffdd\210\uffdd\211\uffdd\001\002\000" +
    "\072\143\uff93\144\uff93\145\uff93\146\uff93\147\uff93\150\uff93" +
    "\151\uff93\152\uff93\153\uff93\154\uff93\155\uff93\156\uff93\157" +
    "\uff93\161\uff93\162\uff93\163\uff93\164\uff93\165\uff93\167\uff93" +
    "\172\uff93\173\uff93\176\uff93\177\uff93\201\uff93\202\uff93\203" +
    "\uff93\204\uff93\205\uff93\001\002\000\072\143\uff91\144\uff91" +
    "\145\uff91\146\uff91\147\uff91\150\uff91\151\uff91\152\uff91\153" +
    "\uff91\154\uff91\155\uff91\156\uff91\157\uff91\161\uff91\162\uff91" +
    "\163\uff91\164\uff91\165\uff91\167\uff91\172\uff91\173\uff91\176" +
    "\uff91\177\uff91\201\uff91\202\uff91\203\uff91\204\uff91\205\uff91" +
    "\001\002\000\004\166\361\001\002\000\124\005\055\006" +
    "\132\007\130\010\125\011\053\012\147\013\074\014\051" +
    "\015\122\020\135\021\157\023\160\024\146\025\145\026" +
    "\137\027\035\030\134\031\063\032\045\033\120\034\154" +
    "\035\073\036\071\037\067\040\110\041\060\042\133\043" +
    "\155\044\104\064\140\070\111\071\141\072\043\073\041" +
    "\074\037\075\152\076\117\077\040\100\114\101\034\167" +
    "\uff49\001\002\000\004\167\371\001\002\000\004\167\uff4a" +
    "\001\002\000\006\167\uff46\177\365\001\002\000\122\005" +
    "\055\006\132\007\130\010\125\011\053\012\147\013\074" +
    "\014\051\015\122\020\135\021\157\023\160\024\146\025" +
    "\145\026\137\027\035\030\134\031\063\032\045\033\120" +
    "\034\154\035\073\036\071\037\067\040\110\041\060\042" +
    "\133\043\155\044\104\064\140\070\111\071\141\072\043" +
    "\073\041\074\037\075\152\076\117\077\040\100\114\101" +
    "\034\001\002\000\004\167\uff48\001\002\000\006\167\uff46" +
    "\177\365\001\002\000\004\167\uff47\001\002\000\016\054" +
    "\377\055\374\057\375\060\373\062\uff40\170\uff40\001\002" +
    "\000\006\062\u0103\170\uff3b\001\002\000\006\062\uffbb\170" +
    "\uffbb\001\002\000\006\062\uff3f\170\uff3f\001\002\000\006" +
    "\062\uffba\170\uffba\001\002\000\006\062\uff3e\170\uff3e\001" +
    "\002\000\006\062\uff3d\170\uff3d\001\002\000\006\062\uff41" +
    "\170\uff41\001\002\000\004\170\u0108\001\002\000\004\170" +
    "\uff3c\001\002\000\004\166\u0104\001\002\000\122\005\055" +
    "\006\132\007\130\010\125\011\053\012\147\013\074\014" +
    "\051\015\122\020\135\021\157\023\160\024\146\025\145" +
    "\026\137\027\035\030\134\031\063\032\045\033\120\034" +
    "\154\035\073\036\071\037\067\040\110\041\060\042\133" +
    "\043\155\044\104\064\140\070\111\071\141\072\043\073" +
    "\041\074\037\075\152\076\117\077\040\100\114\101\034" +
    "\001\002\000\006\066\017\210\021\001\002\000\004\167" +
    "\u0107\001\002\000\004\170\uff3a\001\002\000\122\005\055" +
    "\006\132\007\130\010\125\011\053\012\147\013\074\014" +
    "\051\015\122\020\135\021\157\023\160\024\146\025\145" +
    "\026\137\027\035\030\134\031\063\032\045\033\120\034" +
    "\154\035\073\036\071\037\067\040\110\041\060\042\133" +
    "\043\155\044\104\064\140\070\111\071\141\072\043\073" +
    "\041\074\037\075\152\076\117\077\040\100\114\101\034" +
    "\001\002\000\170\005\uff45\006\uff45\007\uff45\010\uff45\011" +
    "\uff45\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\020\uff45" +
    "\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45\026\uff45\027" +
    "\uff45\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45" +
    "\036\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45\044" +
    "\uff45\045\uff45\047\uff45\051\uff45\052\uff45\061\uff45\064\uff45" +
    "\067\uff45\070\uff45\071\uff45\072\uff45\073\uff45\074\uff45\075" +
    "\uff45\076\uff45\077\uff45\100\uff45\101\uff45\102\uff45\140\uff45" +
    "\141\uff45\142\uff45\160\uff45\166\uff45\176\uff45\206\uff45\207" +
    "\uff45\210\uff45\211\uff45\001\002\000\004\176\u0111\001\002" +
    "\000\170\005\055\006\132\007\130\010\125\011\053\012" +
    "\147\013\074\014\051\015\122\016\076\020\135\021\157" +
    "\022\156\023\160\024\146\025\145\026\137\027\035\030" +
    "\134\031\063\032\045\033\120\034\154\035\073\036\071" +
    "\037\067\040\110\041\060\042\133\043\155\044\104\045" +
    "\077\047\052\051\126\052\044\061\106\064\140\067\103" +
    "\070\111\071\141\072\043\073\041\074\037\075\152\076" +
    "\117\077\040\100\114\101\034\102\153\140\056\141\123" +
    "\142\075\160\116\166\143\176\uff90\206\127\207\072\210" +
    "\150\211\131\001\002\000\170\005\055\006\132\007\130" +
    "\010\125\011\053\012\147\013\074\014\051\015\122\016" +
    "\076\020\135\021\157\022\156\023\160\024\146\025\145" +
    "\026\137\027\035\030\134\031\063\032\045\033\120\034" +
    "\154\035\073\036\071\037\067\040\110\041\060\042\133" +
    "\043\155\044\104\045\077\047\052\051\126\052\044\061" +
    "\106\064\140\067\103\070\111\071\141\072\043\073\041" +
    "\074\037\075\152\076\117\077\040\100\114\101\034\102" +
    "\153\140\056\141\123\142\075\160\116\166\143\176\uff90" +
    "\206\127\207\072\210\150\211\131\001\002\000\004\061" +
    "\106\001\002\000\004\171\u010f\001\002\000\200\005\uff4c" +
    "\006\uff4c\007\uff4c\010\uff4c\011\uff4c\012\uff4c\013\uff4c\014" +
    "\uff4c\015\uff4c\016\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c" +
    "\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032" +
    "\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\047\uff4c\050" +
    "\uff4c\051\uff4c\052\uff4c\053\uff4c\061\uff4c\064\uff4c\065\uff4c" +
    "\067\uff4c\070\uff4c\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075" +
    "\uff4c\076\uff4c\077\uff4c\100\uff4c\101\uff4c\102\uff4c\140\uff4c" +
    "\141\uff4c\142\uff4c\160\uff4c\166\uff4c\171\uff4c\176\uff4c\206" +
    "\uff4c\207\uff4c\210\uff4c\211\uff4c\001\002\000\004\061\uff4b" +
    "\001\002\000\172\005\uff42\006\uff42\007\uff42\010\uff42\011" +
    "\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42\020\uff42" +
    "\021\uff42\022\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027" +
    "\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42" +
    "\036\uff42\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044" +
    "\uff42\045\uff42\047\uff42\051\uff42\052\uff42\061\uff42\064\uff42" +
    "\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42\075" +
    "\uff42\076\uff42\077\uff42\100\uff42\101\uff42\102\uff42\140\uff42" +
    "\141\uff42\142\uff42\160\uff42\166\uff42\176\uff42\177\u0112\206" +
    "\uff42\207\uff42\210\uff42\211\uff42\001\002\000\122\005\055" +
    "\006\132\007\130\010\125\011\053\012\147\013\074\014" +
    "\051\015\122\020\135\021\157\023\160\024\146\025\145" +
    "\026\137\027\035\030\134\031\063\032\045\033\120\034" +
    "\154\035\073\036\071\037\067\040\110\041\060\042\133" +
    "\043\155\044\104\064\140\070\111\071\141\072\043\073" +
    "\041\074\037\075\152\076\117\077\040\100\114\101\034" +
    "\001\002\000\170\005\uff44\006\uff44\007\uff44\010\uff44\011" +
    "\uff44\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\020\uff44" +
    "\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026\uff44\027" +
    "\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44\035\uff44" +
    "\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44\044" +
    "\uff44\045\uff44\047\uff44\051\uff44\052\uff44\061\uff44\064\uff44" +
    "\067\uff44\070\uff44\071\uff44\072\uff44\073\uff44\074\uff44\075" +
    "\uff44\076\uff44\077\uff44\100\uff44\101\uff44\102\uff44\140\uff44" +
    "\141\uff44\142\uff44\160\uff44\166\uff44\176\uff44\206\uff44\207" +
    "\uff44\210\uff44\211\uff44\001\002\000\004\176\u0115\001\002" +
    "\000\172\005\uff42\006\uff42\007\uff42\010\uff42\011\uff42\012" +
    "\uff42\013\uff42\014\uff42\015\uff42\016\uff42\020\uff42\021\uff42" +
    "\022\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030" +
    "\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42" +
    "\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045" +
    "\uff42\047\uff42\051\uff42\052\uff42\061\uff42\064\uff42\067\uff42" +
    "\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42\075\uff42\076" +
    "\uff42\077\uff42\100\uff42\101\uff42\102\uff42\140\uff42\141\uff42" +
    "\142\uff42\160\uff42\166\uff42\176\uff42\177\u0112\206\uff42\207" +
    "\uff42\210\uff42\211\uff42\001\002\000\170\005\uff43\006\uff43" +
    "\007\uff43\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43\015" +
    "\uff43\016\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024\uff43" +
    "\025\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032\uff43\033" +
    "\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041\uff43" +
    "\042\uff43\043\uff43\044\uff43\045\uff43\047\uff43\051\uff43\052" +
    "\uff43\061\uff43\064\uff43\067\uff43\070\uff43\071\uff43\072\uff43" +
    "\073\uff43\074\uff43\075\uff43\076\uff43\077\uff43\100\uff43\101" +
    "\uff43\102\uff43\140\uff43\141\uff43\142\uff43\160\uff43\166\uff43" +
    "\176\uff43\206\uff43\207\uff43\210\uff43\211\uff43\001\002\000" +
    "\004\171\ufff9\001\002\000\004\171\ufffa\001\002\000\202" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\061\uffd3\064\uffd3" +
    "\065\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3" +
    "\140\uffd3\141\uffd3\142\uffd3\160\uffd3\166\uffd3\167\uffd3\171" +
    "\uffd3\176\uffd3\206\uffd3\207\uffd3\210\uffd3\211\uffd3\001\002" +
    "\000\072\143\uff5c\144\uff5c\145\uff5c\146\uff5c\147\uff5c\150" +
    "\uff5c\151\uff5c\152\uff5c\153\uff5c\154\uff5c\155\uff5c\156\uff5c" +
    "\157\uff5c\161\uff5c\162\uff5c\163\uff5c\164\uff5c\165\uff5c\166" +
    "\uff5c\167\uff5c\172\uff5c\173\uff5c\200\uff5c\201\uff5c\202\uff5c" +
    "\203\uff5c\204\uff5c\205\uff5c\001\002\000\004\171\ufffc\001" +
    "\002\000\004\102\u011d\001\002\000\004\166\u011e\001\002" +
    "\000\024\051\126\066\017\067\103\140\056\141\123\206" +
    "\127\207\072\210\165\211\131\001\002\000\004\167\u0120" +
    "\001\002\000\004\176\u0121\001\002\000\200\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\061\uffda\064\uffda\065\uffda\067" +
    "\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda" +
    "\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\140\uffda\141" +
    "\uffda\142\uffda\160\uffda\166\uffda\171\uffda\176\uffda\206\uffda" +
    "\207\uffda\210\uffda\211\uffda\001\002\000\004\170\u0123\001" +
    "\002\000\122\005\055\006\132\007\130\010\125\011\053" +
    "\012\147\013\074\014\051\015\122\020\135\021\157\023" +
    "\160\024\146\025\145\026\137\027\035\030\134\031\063" +
    "\032\045\033\120\034\154\035\073\036\071\037\067\040" +
    "\110\041\060\042\133\043\155\044\104\064\140\070\111" +
    "\071\141\072\043\073\041\074\037\075\152\076\117\077" +
    "\040\100\114\101\034\001\002\000\004\176\u0125\001\002" +
    "\000\006\171\uff4d\177\u0126\001\002\000\122\005\055\006" +
    "\132\007\130\010\125\011\053\012\147\013\074\014\051" +
    "\015\122\020\135\021\157\023\160\024\146\025\145\026" +
    "\137\027\035\030\134\031\063\032\045\033\120\034\154" +
    "\035\073\036\071\037\067\040\110\041\060\042\133\043" +
    "\155\044\104\064\140\070\111\071\141\072\043\073\041" +
    "\074\037\075\152\076\117\077\040\100\114\101\034\001" +
    "\002\000\004\171\u0128\001\002\000\200\005\uff4f\006\uff4f" +
    "\007\uff4f\010\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015" +
    "\uff4f\016\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f" +
    "\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033" +
    "\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f" +
    "\042\uff4f\043\uff4f\044\uff4f\045\uff4f\047\uff4f\050\uff4f\051" +
    "\uff4f\052\uff4f\053\uff4f\061\uff4f\064\uff4f\065\uff4f\067\uff4f" +
    "\070\uff4f\071\uff4f\072\uff4f\073\uff4f\074\uff4f\075\uff4f\076" +
    "\uff4f\077\uff4f\100\uff4f\101\uff4f\102\uff4f\140\uff4f\141\uff4f" +
    "\142\uff4f\160\uff4f\166\uff4f\171\uff4f\176\uff4f\206\uff4f\207" +
    "\uff4f\210\uff4f\211\uff4f\001\002\000\004\176\u012a\001\002" +
    "\000\006\171\uff4d\177\u0126\001\002\000\004\171\uff4e\001" +
    "\002\000\004\170\u012d\001\002\000\006\066\017\210\021" +
    "\001\002\000\006\171\uffec\177\u0131\001\002\000\004\171" +
    "\u0130\001\002\000\200\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053" +
    "\uffef\061\uffef\064\uffef\065\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100" +
    "\uffef\101\uffef\102\uffef\140\uffef\141\uffef\142\uffef\160\uffef" +
    "\166\uffef\171\uffef\176\uffef\206\uffef\207\uffef\210\uffef\211" +
    "\uffef\001\002\000\006\066\017\210\021\001\002\000\004" +
    "\171\uffee\001\002\000\006\171\uffec\177\u0131\001\002\000" +
    "\004\171\uffed\001\002\000\152\005\055\006\132\007\130" +
    "\010\125\011\053\012\147\013\074\014\051\015\122\020" +
    "\135\021\157\023\160\024\146\025\145\026\137\027\035" +
    "\030\134\031\063\032\045\033\120\034\154\035\073\036" +
    "\071\037\067\040\110\041\060\042\133\043\155\044\104" +
    "\051\126\064\140\067\103\070\111\071\141\072\043\073" +
    "\041\074\037\075\152\076\117\077\040\100\114\101\034" +
    "\140\056\141\123\142\075\160\116\166\143\176\uff90\206" +
    "\127\207\072\210\150\211\131\001\002\000\032\051\126" +
    "\067\103\140\056\141\123\142\075\160\116\166\143\176" +
    "\uff90\206\127\207\072\210\150\211\131\001\002\000\032" +
    "\051\uffd8\067\uffd8\140\uffd8\141\uffd8\142\uffd8\160\uffd8\166" +
    "\uffd8\176\uffd8\206\uffd8\207\uffd8\210\uffd8\211\uffd8\001\002" +
    "\000\032\051\uffd7\067\uffd7\140\uffd7\141\uffd7\142\uffd7\160" +
    "\uffd7\166\uffd7\167\uffd7\206\uffd7\207\uffd7\210\uffd7\211\uffd7" +
    "\001\002\000\032\051\126\067\103\140\056\141\123\142" +
    "\075\160\116\166\143\167\uff90\206\127\207\072\210\150" +
    "\211\131\001\002\000\004\167\uffd6\001\002\000\004\167" +
    "\u013c\001\002\000\004\170\203\001\002\000\200\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\061\uffd9\064\uffd9\065\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\140\uffd9" +
    "\141\uffd9\142\uffd9\160\uffd9\166\uffd9\171\uffd9\176\uffd9\206" +
    "\uffd9\207\uffd9\210\uffd9\211\uffd9\001\002\000\004\171\ufffb" +
    "\001\002\000\076\143\ufff6\144\ufff6\145\ufff6\146\ufff6\147" +
    "\ufff6\150\ufff6\151\ufff6\152\ufff6\153\ufff6\154\ufff6\155\ufff6" +
    "\156\ufff6\157\ufff6\161\ufff6\162\ufff6\163\ufff6\164\ufff6\165" +
    "\ufff6\167\ufff6\170\ufff6\171\ufff6\172\ufff6\173\ufff6\176\ufff6" +
    "\177\ufff6\201\ufff6\202\ufff6\203\ufff6\204\ufff6\205\ufff6\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\015\004\013\001\001\000\006\003\u013f\004\013\001\001" +
    "\000\004\006\017\001\001\000\002\001\001\000\004\104" +
    "\u013e\001\001\000\002\001\001\000\006\101\022\104\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\025\001\001\000\004\103\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\005\141\007\053\010\035\011\063\012\064\015\114" +
    "\016\111\021\100\022\104\023\060\024\123\027\077\030" +
    "\120\031\150\032\106\035\032\036\056\037\112\041\061" +
    "\043\045\044\101\051\067\057\135\060\041\107\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\005\u013d\007\053\010\035\011\063\012\064\015" +
    "\114\016\111\021\100\022\104\023\060\024\123\027\077" +
    "\030\120\031\150\032\106\035\032\036\056\037\112\041" +
    "\061\043\045\044\101\051\067\057\135\060\041\107\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u012b\001" +
    "\001\000\004\006\u0121\001\001\000\002\001\001\000\004" +
    "\025\u011b\001\001\000\002\001\001\000\064\005\u011a\007" +
    "\053\010\035\011\063\012\064\015\114\016\111\021\100" +
    "\022\104\023\060\024\123\027\077\030\120\031\150\032" +
    "\106\035\032\036\056\037\112\041\061\043\045\044\101" +
    "\051\067\057\135\060\041\107\143\001\001\000\002\001" +
    "\001\000\004\061\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\005\u0117\007\053\010\035\011\063\012\064" +
    "\015\114\016\111\021\100\022\104\023\060\024\123\027" +
    "\077\030\120\031\150\032\106\035\032\036\056\037\112" +
    "\041\061\043\045\044\101\051\067\057\135\060\041\107" +
    "\143\001\001\000\064\005\u0116\007\053\010\035\011\063" +
    "\012\064\015\114\016\111\021\100\022\104\023\060\024" +
    "\123\027\077\030\120\031\150\032\106\035\032\036\056" +
    "\037\112\041\061\043\045\044\101\051\067\057\135\060" +
    "\041\107\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\050\240\053\256\054\267\055\257\056\235\106" +
    "\254\110\356\111\252\113\251\114\247\115\246\116\245" +
    "\117\242\120\236\121\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\050\240\053\256\054\267\055\257\056\235\106\254\110" +
    "\355\111\252\113\251\114\247\115\246\116\245\117\242" +
    "\120\236\121\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\342\041\343\051\067\057\135\060\041\107\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\332\017\331\077\334\100\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\050\240\053\256\054\267\055\257\056\235\106\254" +
    "\110\253\111\252\113\251\114\247\115\246\116\245\117" +
    "\242\120\236\121\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\225\001\001\000\002\001\001\000" +
    "\004\061\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\051\067\057\135\060\041\107\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\163\045\162\051\165" +
    "\057\135\060\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\022\104\021\001\001\000\004\056\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\051\177" +
    "\057\135\060\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\201" +
    "\001\001\000\002\001\001\000\056\010\204\015\114\016" +
    "\111\021\100\022\104\023\060\024\123\026\203\027\077" +
    "\030\120\031\150\032\106\035\032\036\056\037\112\041" +
    "\061\043\045\044\101\051\067\057\135\060\041\107\143" +
    "\001\001\000\002\001\001\000\056\010\204\015\114\016" +
    "\111\021\100\022\104\023\060\024\123\026\205\027\077" +
    "\030\120\031\150\032\106\035\032\036\056\037\112\041" +
    "\061\043\045\044\101\051\067\057\135\060\041\107\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\326\001\001\000\012\051\067" +
    "\057\135\060\041\107\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\051\067\057\135\060\041\107\323" +
    "\001\001\000\016\041\315\047\314\051\067\057\135\060" +
    "\041\107\143\001\001\000\004\056\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\312\001\001\000" +
    "\010\053\311\054\267\055\257\001\001\000\002\001\001" +
    "\000\004\050\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\051\067\057\135\060\041" +
    "\107\305\001\001\000\012\051\067\057\135\060\041\107" +
    "\304\001\001\000\012\051\067\057\135\060\041\107\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\041\272\046\271\051\067" +
    "\057\135\060\041\107\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\112\276\001\001\000\002\001\001\000" +
    "\016\041\272\046\274\051\067\057\135\060\041\107\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\041\272\046\301\051\067\057\135\060\041" +
    "\107\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\317\001\001\000\014\041" +
    "\320\051\067\057\135\060\041\107\143\001\001\000\002" +
    "\001\001\000\004\105\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\336\101\022\104\021\001" +
    "\001\000\014\041\337\051\067\057\135\060\041\107\143" +
    "\001\001\000\002\001\001\000\010\006\332\017\331\100" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\163\045\347\051\165\057\135\060\041\001\001\000\002" +
    "\001\001\000\004\025\351\001\001\000\004\042\353\001" +
    "\001\000\004\025\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\363\016\111\021\100\022\104\023\060" +
    "\024\123\064\361\065\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\365\001\001\000\016\015\366" +
    "\016\111\021\100\022\104\023\060\024\123\001\001\000" +
    "\002\001\001\000\004\066\367\001\001\000\002\001\001" +
    "\000\010\020\375\072\371\073\377\001\001\000\006\074" +
    "\u0100\075\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\u0104\021\100\022\104\023\060\024" +
    "\123\001\001\000\004\006\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0109\016\111\021\100\022" +
    "\104\023\060\024\123\067\u010a\070\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\010\u010b\015\114\016" +
    "\111\021\100\022\104\023\060\024\123\027\077\030\120" +
    "\031\150\032\106\035\032\036\056\037\112\041\061\043" +
    "\045\044\101\051\067\057\135\060\041\063\u010c\107\143" +
    "\001\001\000\056\010\u010b\015\114\016\111\021\100\022" +
    "\104\023\060\024\123\027\077\030\120\031\150\032\106" +
    "\035\032\036\056\037\112\041\061\043\045\044\101\051" +
    "\067\057\135\060\041\063\u010f\107\143\001\001\000\004" +
    "\037\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u0112\001\001\000\016\015\u0113" +
    "\016\111\021\100\022\104\023\060\024\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\163\045\u011e\051" +
    "\165\057\135\060\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\u0123\016\111\021\100\022\104\023\060\024\123\001\001" +
    "\000\002\001\001\000\004\062\u0126\001\001\000\016\015" +
    "\u0128\016\111\021\100\022\104\023\060\024\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u012a\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u012d\013\u012e\001\001\000\004\014\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0132" +
    "\001\001\000\002\001\001\000\004\014\u0133\001\001\000" +
    "\002\001\001\000\036\015\114\016\111\021\100\022\104" +
    "\023\060\024\123\033\u0135\041\061\043\u0136\044\101\051" +
    "\067\057\135\060\041\107\143\001\001\000\020\034\u0138" +
    "\041\061\044\u0137\051\067\057\135\060\041\107\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\041\u0139" +
    "\051\067\057\135\060\041\076\u013a\107\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u013c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<SError> SEList = new LinkedList<SError>(); //SYNTAX ERROR LIST
    //public static String ultimoToken;
    private Symbol s;

    public Parser (LexerC scanner) {
        super(scanner);
    }

    //metodo de llamado automatico al error que es recuperable
    public void syntax_error(Symbol s){
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;

        if((column - lexeme.length())<=0){
            column = 0;
        }

        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token inválido");
        SEList.add(dato);
    }

    //metodo que se llama cuando ya no es recuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token no esperado"); 
        SEList.add(dato);
    }
    
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // RETURNS_FUNCTION_AUX ::= Res_Returns AbreParentesis VAR_TYPE IDENT CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION_AUX",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // RETURNS_FUNCTION ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // RETURNS_FUNCTION ::= RETURNS_FUNCTION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // MOD_LIST ::= Res_Internal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // MOD_LIST ::= PRIVACY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // MOD_LIST ::= Res_Payable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // MODS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // MODS ::= MOD_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VAR_LIST_AUX_HELP ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VAR_LIST_AUX_HELP ::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VAR_LIST_AUX ::= VARIABLE PuntoYComa VAR_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VAR_LIST ::= VAR_LIST_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // PARAM_LIST_AUX_HELP ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // PARAM_LIST_AUX_HELP ::= Coma VARIABLE PARAM_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // PARAM_LIST_AUX ::= VARIABLE PARAM_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PARAM_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // PARAM_LIST ::= PARAM_LIST_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CUERPO_FUNCION ::= SENTENCIA CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FUNCION ::= Res_Function Identificador AbreParentesis PARAM_LIST CierraParentesis MODS RETURNS_FUNCTION AbreLlave VAR_LIST CUERPO_FUNCION RETURN_SENTENCIA CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // STRUCT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // STRUCT_AUX ::= Coma VARIABLE PuntoYComa STRUCT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // STRUCT ::= Res_Struct IDENT AbreLlave VARIABLE PuntoYComa STRUCT_AUX CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LITERAL_NUMERICO_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // LITERAL_NUMERICO_AUX ::= Unit_Years 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LITERAL_NUMERICO_AUX ::= Unit_Wei 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LITERAL_NUMERICO_AUX ::= Unit_Weeks 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LITERAL_NUMERICO_AUX ::= Unit_Szabo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // LITERAL_NUMERICO_AUX ::= Unit_Seconds 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // LITERAL_NUMERICO_AUX ::= Unit_Minutes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LITERAL_NUMERICO_AUX ::= Unit_Hours 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LITERAL_NUMERICO_AUX ::= Unit_Finney 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LITERAL_NUMERICO_AUX ::= Unit_Ether 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LITERAL_NUMERICO_AUX ::= Unit_Days 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LITERAL_NUMERICO ::= Flotante LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LITERAL_NUMERICO ::= Cientifico LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LITERAL_NUMERICO ::= Hexadecimal LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LITERAL_NUMERICO ::= Numero LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LITERAL_BOOLEANO ::= Res_False 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LITERAL_BOOLEANO ::= Res_True 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESSION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESSION_PRIMARIA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESSION_PRIMARIA ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESSION_PRIMARIA ::= LITERAL_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ARGUMENTS_EXPRESSION_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ARGUMENTS_EXPRESSION_AUX ::= Coma EXPRESSION ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ARGUMENTS_EXPRESSION ::= EXPRESSION ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_BOOLEANO ::= OrLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_BOOLEANO ::= AndLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_BOOLEANO ::= Diferencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_BOOLEANO ::= Comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_BOOLEANO ::= MayorOIgualQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_BOOLEANO ::= MenorOIgualQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_BOOLEANO ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_BOOLEANO ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_ARITMETICO_TERCER_ORDEN ::= Resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_TERCER_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_ARITMETICO_TERCER_ORDEN ::= Suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_TERCER_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_ARITMETICO_SEGUNDO_ORDEN ::= OP_ARITMETICO_TERCER_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Porcentaje 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_ARITMETICO_PRIMER_ORDEN ::= OP_ARITMETICO_SEGUNDO_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_PRIMER_ORDEN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_ARITMETICO_PRIMER_ORDEN ::= Potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_PRIMER_ORDEN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_BIT ::= OrBits 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_BIT ::= AndBits 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_BIT ::= CorrerALaIzquierda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_BIT ::= CorrerALaDerecha 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESSION_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_AUX",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESSION_AUX ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_AUX",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP10 ::= ASSIGNMENT_AUX EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP10",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP9 ::= Interrogacion EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP9",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP8 ::= OP_BOOLEANO EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP8",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP7 ::= OP_BIT EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP7",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP6 ::= OP_ARITMETICO_PRIMER_ORDEN EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP6",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP5 ::= AbreParentesis ARGUMENTS_EXPRESSION CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP5",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP4 ::= Punto IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP4",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP3_2 ::= CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP3_2 ::= DosPuntos EXPRESSION_AUX CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP3 ::= AbreCorchete EXPRESSION_AUX EXP3_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP2 ::= EXP10 ASSIGNMENT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP2 ::= EXP9 Interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP2 ::= EXP8 OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP2 ::= EXP7 OP_BIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP2 ::= EXP6 OP_ARITMETICO_PRIMER_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP2 ::= EXP5 AbreParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP2 ::= EXP4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP2 ::= EXP3 AbreCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP1 ::= EXPRESSION_PRIMARIA EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP1 ::= NotBits EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP1 ::= NotLogico EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESSION ::= EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESSION ::= AbreParentesis EXP1 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BYTE_TYPES ::= Res_Bytes256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BYTE_TYPES ::= Res_Bytes128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BYTE_TYPES ::= Res_Bytes64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BYTE_TYPES ::= Res_Bytes32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BYTE_TYPES ::= Res_Bytes16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BYTE_TYPES ::= Res_Bytes8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BYTE_TYPES ::= Res_Bytes4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BYTE_TYPES ::= Res_Bytes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BYTE_TYPES ::= Res_Bytes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // UINT_TYPE ::= Res_Uint256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // UINT_TYPE ::= Res_Uint128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // UINT_TYPE ::= Res_Uint64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // UINT_TYPE ::= Res_Uint32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UINT_TYPE ::= Res_Uint16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // UINT_TYPE ::= Res_Uint8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // UINT_TYPE ::= Res_Uint4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // UINT_TYPE ::= Res_Uint2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // UINT_TYPE ::= Res_Uint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INT_TYPE ::= Res_Int256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INT_TYPE ::= Res_Int128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INT_TYPE ::= Res_Int64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INT_TYPE ::= Res_Int32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INT_TYPE ::= Res_Int16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INT_TYPE ::= Res_Int8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INT_TYPE ::= Res_Int4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INT_TYPE ::= Res_Int2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INT_TYPE ::= Res_Int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BYTE_TYPE ::= Res_Byte256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BYTE_TYPE ::= Res_Byte128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BYTE_TYPE ::= Res_Byte64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BYTE_TYPE ::= Res_Byte32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BYTE_TYPE ::= Res_Byte16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BYTE_TYPE ::= Res_Byte8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BYTE_TYPE ::= Res_Byte4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BYTE_TYPE ::= Res_Byte2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BYTE_TYPE ::= Res_Byte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRIVACY ::= Res_Private 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIVACY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRIVACY ::= Res_Public 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIVACY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASSIGNMENT_AUX ::= Divida 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASSIGNMENT_AUX ::= Multiplique 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASSIGNMENT_AUX ::= Reste 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIGNMENT_AUX ::= Sume 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASSIGNMENT_AUX ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASSIGNMENT ::= Identificador ASSIGNMENT_AUX EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAR_TYPE ::= Res_Ufixed 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR_TYPE ::= Res_String 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAR_TYPE ::= UINT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAR_TYPE ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR_TYPE ::= Res_Address 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR_TYPE ::= BYTE_TYPES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR_TYPE ::= BYTE_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAR_TYPE ::= Res_Bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLE_AUX_AUX ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX_AUX",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLE_AUX_AUX ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX_AUX",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLE_AUX ::= AbreCorchete CierraCorchete VARIABLE_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLE_AUX ::= VARIABLE_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLE ::= VAR_TYPE VARIABLE_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETURN_SENTENCIA_AUX ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA_AUX",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURN_SENTENCIA ::= Res_Return RETURN_SENTENCIA_AUX PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BREAK_SENTENCIA ::= Res_Break PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_SENTENCIA",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTINUE_SENTENCIA ::= Res_Continue PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE_SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESSION_SENTENCIA ::= EXPRESSION PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_SENTENCIA",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BASE ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BASE ::= VARIABLE PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSION_FOR_DOS ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_DOS",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSION_FOR_UNO ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_UNO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASSIGNMENT_FOR ::= SENTENCIA_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_FOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR_SENTENCIA ::= Res_For AbreParentesis ASSIGNMENT_FOR EXPRESSION_FOR_UNO EXPRESSION_FOR_DOS CierraParentesis BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DOWHILE_SENTENCIA ::= Res_Do BLOQUE Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WHILE_SENTENCIA ::= Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= Res_Else BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOOLEAN_EXPRESSION ::= EXPRESSION_PRIMARIA OP_BOOLEANO EXPRESSION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_EXPRESSION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOLEAN_EXPRESSION ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_EXPRESSION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_SENTENCIA ::= Res_If AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= RETURN_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= BREAK_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= CONTINUE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DOWHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= WHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BLOQUE ::= SENTENCIA SENTENCIA_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE ::= AbreLlave SENTENCIA_BLOQUE CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_ENUM_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM_AUX",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_ENUM_AUX ::= Coma IDENT CUERPO_ENUM_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM_AUX",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_ENUM ::= IDENT CUERPO_ENUM_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENUM ::= Res_Enum IDENT AbreLlave CUERPO_ENUM CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENUM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDENT_AUX_THIS ::= Punto IDENT_AUX2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX_THIS",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDENT_AUX3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX3",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDENT_AUX3 ::= AbreParentesis CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX3",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENT_AUX2 ::= Identificador IDENT_AUX3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDENT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENT_AUX ::= IDENT_AUX_THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENT ::= Res_This IDENT_AUX_THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENT ::= Identificador IDENT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_CONTRATO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_CONTRATO ::= FUNCION CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_CONTRATO ::= STRUCT CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_CONTRATO ::= SENTENCIA CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_CONTRATO ::= ENUM CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRACT ::= Res_Contract IDENT AbreLlave CUERPO_CONTRATO CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRACT_INICIO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT_INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTRACT_INICIO ::= CONTRACT CONTRACT_INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT_INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Res_Pragma Res_Solidity Potencia Flotante Flotante PuntoYComa CONTRACT_INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

