
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package soliditycompiler;

import java_cup.runtime.Symbol;
import soliditycompiler.LexerC.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\327\000\002\002\004\000\002\003\011\000\002\004" +
    "\004\000\002\004\003\000\002\005\007\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\004\000\002" +
    "\103\003\000\002\103\003\000\002\104\004\000\002\105" +
    "\004\000\002\105\003\000\002\106\004\000\002\010\007" +
    "\000\002\014\004\000\002\015\005\000\002\015\003\000" +
    "\002\026\005\000\002\027\004\000\002\027\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\030\010\000\002\043\004\000" +
    "\002\043\003\000\002\031\007\000\002\032\011\000\002" +
    "\033\011\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\100\003\000\002\100\003" +
    "\000\002\044\004\000\002\044\003\000\002\045\004\000" +
    "\002\036\004\000\002\037\004\000\002\040\005\000\002" +
    "\041\003\000\002\041\003\000\002\016\004\000\002\101" +
    "\004\000\002\101\005\000\002\102\003\000\002\102\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\042\005\000\002\042\003\000\002\111\004\000" +
    "\002\111\004\000\002\111\004\000\002\112\004\000\002" +
    "\112\004\000\002\112\004\000\002\112\004\000\002\112" +
    "\004\000\002\112\004\000\002\112\004\000\002\112\004" +
    "\000\002\112\003\000\002\113\005\000\002\114\005\000" +
    "\002\114\003\000\002\115\004\000\002\116\005\000\002" +
    "\117\004\000\002\120\004\000\002\121\004\000\002\122" +
    "\004\000\002\123\004\000\002\047\006\000\002\047\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\054\003\000\002\054\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\107\005\000\002\107\005\000\002\107\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\004\000\002" +
    "\053\004\000\002\053\003\000\002\060\003\000\002\060" +
    "\003\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\061\004\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\012\011" +
    "\000\002\063\006\000\002\063\003\000\002\013\016\000" +
    "\002\064\004\000\002\064\003\000\002\065\003\000\002" +
    "\065\003\000\002\066\003\000\002\066\003\000\002\067" +
    "\005\000\002\124\005\000\002\124\003\000\002\070\003" +
    "\000\002\070\003\000\002\071\004\000\002\071\003\000" +
    "\002\072\006\000\002\073\006\000\002\073\003\000\002" +
    "\074\003\000\002\074\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\004\055\004\001\002\000\004\062\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\143\010\001\002\000\004\140\011\001\002\000" +
    "\004\140\012\001\002\000\004\175\013\001\002\000\004" +
    "\045\015\001\002\000\004\045\015\001\002\000\006\065" +
    "\020\207\022\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\000\001\002\000\004\177\025\001\002\000\004\167" +
    "\035\001\002\000\004\177\025\001\002\000\020\165\ufff5" +
    "\166\ufff5\167\ufff5\172\ufff5\175\ufff5\176\ufff5\177\ufff5\001" +
    "\002\000\020\165\ufff7\166\ufff7\167\ufff7\172\ufff7\175\ufff7" +
    "\176\ufff7\177\ufff7\001\002\000\004\207\027\001\002\000" +
    "\020\165\ufff4\166\ufff4\167\ufff4\172\ufff4\175\ufff4\176\ufff4" +
    "\177\ufff4\001\002\000\004\165\031\001\002\000\020\165" +
    "\ufff0\166\ufff0\167\ufff0\172\ufff0\175\ufff0\176\ufff0\177\ufff0" +
    "\001\002\000\004\166\034\001\002\000\020\165\ufff1\166" +
    "\ufff1\167\ufff1\172\ufff1\175\ufff1\176\ufff1\177\ufff1\001\002" +
    "\000\020\165\ufff3\166\ufff3\167\ufff3\172\ufff3\175\ufff3\176" +
    "\ufff3\177\ufff3\001\002\000\020\165\ufff2\166\ufff2\167\ufff2" +
    "\172\ufff2\175\ufff2\176\ufff2\177\ufff2\001\002\000\176\004" +
    "\060\005\135\006\132\007\130\010\056\011\154\012\077" +
    "\013\054\014\125\015\101\017\140\020\163\021\162\022" +
    "\164\023\152\024\150\025\143\026\040\027\137\030\066" +
    "\031\050\032\123\033\160\034\076\035\074\036\072\037" +
    "\113\040\063\041\136\042\161\043\107\044\102\046\055" +
    "\047\052\050\131\051\047\052\071\060\111\063\144\064" +
    "\053\065\020\066\106\067\114\070\145\071\046\072\044" +
    "\073\042\074\156\075\122\076\043\077\117\100\037\101" +
    "\157\137\061\140\126\141\100\157\121\165\147\205\133" +
    "\206\075\207\022\210\134\001\002\000\176\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\060\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\137" +
    "\uffe4\140\uffe4\141\uffe4\157\uffe4\165\uffe4\205\uffe4\206\uffe4" +
    "\207\uffe4\210\uffe4\001\002\000\014\056\uff9d\057\uff9d\065" +
    "\uff9d\172\uff9d\207\uff9d\001\002\000\014\056\uff98\057\uff98" +
    "\065\uff98\172\uff98\207\uff98\001\002\000\176\004\060\005" +
    "\135\006\132\007\130\010\056\011\154\012\077\013\054" +
    "\014\125\015\101\017\140\020\163\021\162\022\164\023" +
    "\152\024\150\025\143\026\040\027\137\030\066\031\050" +
    "\032\123\033\160\034\076\035\074\036\072\037\113\040" +
    "\063\041\136\042\161\043\107\044\102\046\055\047\052" +
    "\050\131\051\047\052\071\060\111\063\144\064\053\065" +
    "\020\066\106\067\114\070\145\071\046\072\044\073\042" +
    "\074\156\075\122\076\043\077\117\100\037\101\157\137" +
    "\061\140\126\141\100\157\121\165\147\205\133\206\075" +
    "\207\022\210\134\001\002\000\014\056\uffa2\057\uffa2\065" +
    "\uffa2\172\uffa2\207\uffa2\001\002\000\014\056\uff9f\057\uff9f" +
    "\065\uff9f\172\uff9f\207\uff9f\001\002\000\014\056\uffa3\057" +
    "\uffa3\065\uffa3\172\uffa3\207\uffa3\001\002\000\070\142\uff5e" +
    "\143\uff5e\144\uff5e\145\uff5e\146\uff5e\147\uff5e\150\uff5e\151" +
    "\uff5e\152\uff5e\153\uff5e\154\uff5e\155\uff5e\156\uff5e\160\uff5e" +
    "\161\uff5e\162\uff5e\163\uff5e\164\uff5e\165\uff5e\171\uff5e\172" +
    "\uff5e\177\uff5e\200\uff5e\201\uff5e\202\uff5e\203\uff5e\204\uff5e" +
    "\001\002\000\014\056\uffa4\057\uffa4\065\uffa4\172\uffa4\207" +
    "\uffa4\001\002\000\004\165\u0158\001\002\000\014\056\uff95" +
    "\057\uff95\065\uff95\172\uff95\207\uff95\001\002\000\176\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\060\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101" +
    "\uffe1\137\uffe1\140\uffe1\141\uffe1\157\uffe1\165\uffe1\205\uffe1" +
    "\206\uffe1\207\uffe1\210\uffe1\001\002\000\006\065\020\207" +
    "\022\001\002\000\006\065\020\207\022\001\002\000\014" +
    "\056\uffa7\057\uffa7\065\uffa7\172\uffa7\207\uffa7\001\002\000" +
    "\004\167\172\001\002\000\014\056\uffaa\057\uffaa\065\uffaa" +
    "\172\uffaa\207\uffaa\001\002\000\176\004\060\005\135\006" +
    "\132\007\130\010\056\011\154\012\077\013\054\014\125" +
    "\015\101\017\140\020\163\021\162\022\164\023\152\024" +
    "\150\025\143\026\040\027\137\030\066\031\050\032\123" +
    "\033\160\034\076\035\074\036\072\037\113\040\063\041" +
    "\136\042\161\043\107\044\102\046\055\047\052\050\131" +
    "\051\047\052\071\060\111\063\144\064\053\065\020\066" +
    "\106\067\114\070\145\071\046\072\044\073\042\074\156" +
    "\075\122\076\043\077\117\100\037\101\157\137\061\140" +
    "\126\141\100\157\121\165\147\205\133\206\075\207\022" +
    "\210\134\001\002\000\014\056\uffae\057\uffae\065\uffae\172" +
    "\uffae\207\uffae\001\002\000\114\102\214\103\207\127\210" +
    "\130\213\131\220\132\212\133\222\134\216\135\221\136" +
    "\211\142\uff5d\143\uff5d\144\uff5d\145\uff5d\146\uff5d\147\uff5d" +
    "\150\uff5d\151\uff5d\152\uff5d\153\uff5d\154\uff5d\155\uff5d\156" +
    "\uff5d\160\uff5d\161\uff5d\162\uff5d\163\uff5d\164\uff5d\165\uff5d" +
    "\171\uff5d\172\uff5d\177\uff5d\200\uff5d\201\uff5d\202\uff5d\203" +
    "\uff5d\204\uff5d\001\002\000\176\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\060\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075" +
    "\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\137\uffe3\140\uffe3" +
    "\141\uffe3\157\uffe3\165\uffe3\205\uffe3\206\uffe3\207\uffe3\210" +
    "\uffe3\001\002\000\014\056\uffb2\057\uffb2\065\uffb2\172\uffb2" +
    "\207\uffb2\001\002\000\014\056\uffc2\057\uffc2\065\uffc2\172" +
    "\uffc2\207\uffc2\001\002\000\004\175\u013a\001\002\000\014" +
    "\056\uff96\057\uff96\065\uff96\172\uff96\207\uff96\001\002\000" +
    "\176\004\060\005\135\006\132\007\130\010\056\011\154" +
    "\012\077\013\054\014\125\015\101\017\140\020\163\021" +
    "\162\022\164\023\152\024\150\025\143\026\040\027\137" +
    "\030\066\031\050\032\123\033\160\034\076\035\074\036" +
    "\072\037\113\040\063\041\136\042\161\043\107\044\102" +
    "\046\055\047\052\050\131\051\047\052\071\060\111\063" +
    "\144\064\053\065\020\066\106\067\114\070\145\071\046" +
    "\072\044\073\042\074\156\075\122\076\043\077\117\100" +
    "\037\101\157\137\061\140\126\141\100\157\121\165\147" +
    "\205\133\206\075\207\022\210\134\001\002\000\176\004" +
    "\060\005\135\006\132\007\130\010\056\011\154\012\077" +
    "\013\054\014\125\015\101\017\140\020\163\021\162\022" +
    "\164\023\152\024\150\025\143\026\040\027\137\030\066" +
    "\031\050\032\123\033\160\034\076\035\074\036\072\037" +
    "\113\040\063\041\136\042\161\043\107\044\102\046\055" +
    "\047\052\050\131\051\047\052\071\060\111\063\144\064" +
    "\053\065\020\066\106\067\114\070\145\071\046\072\044" +
    "\073\042\074\156\075\122\076\043\077\117\100\037\101" +
    "\157\137\061\140\126\141\100\157\121\165\147\205\133" +
    "\206\075\207\022\210\134\001\002\000\006\065\020\207" +
    "\022\001\002\000\014\056\uffb4\057\uffb4\065\uffb4\172\uffb4" +
    "\207\uffb4\001\002\000\070\142\226\143\231\144\230\145" +
    "\263\146\276\147\260\150\232\151\227\152\270\153\262" +
    "\154\255\155\244\156\245\160\267\161\273\162\265\163" +
    "\234\164\277\165\242\171\257\172\271\177\235\200\233" +
    "\201\274\202\266\203\272\204\240\001\002\000\014\056" +
    "\uffb5\057\uffb5\065\uffb5\172\uffb5\207\uffb5\001\002\000\070" +
    "\142\uff5b\143\uff5b\144\uff5b\145\uff5b\146\uff5b\147\uff5b\150" +
    "\uff5b\151\uff5b\152\uff5b\153\uff5b\154\uff5b\155\uff5b\156\uff5b" +
    "\160\uff5b\161\uff5b\162\uff5b\163\uff5b\164\uff5b\165\uff5b\171" +
    "\uff5b\172\uff5b\177\uff5b\200\uff5b\201\uff5b\202\uff5b\203\uff5b" +
    "\204\uff5b\001\002\000\014\056\uffb6\057\uffb6\065\uffb6\172" +
    "\uffb6\207\uffb6\001\002\000\014\056\uffa8\057\uffa8\065\uffa8" +
    "\172\uffa8\207\uffa8\001\002\000\070\142\226\143\231\144" +
    "\230\145\263\146\276\147\260\150\232\151\227\152\270" +
    "\153\262\154\255\155\244\156\245\160\267\161\273\162" +
    "\265\163\234\164\277\165\242\171\257\172\271\177\235" +
    "\200\233\201\274\202\266\203\272\204\240\001\002\000" +
    "\004\165\373\001\002\000\004\175\372\001\002\000\176" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\060\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\137\uffe8\140\uffe8\141\uffe8\157\uffe8\165\uffe8\205" +
    "\uffe8\206\uffe8\207\uffe8\210\uffe8\001\002\000\014\056\uffc6" +
    "\057\uffc6\065\uffc6\172\uffc6\207\uffc6\001\002\000\200\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\060\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101" +
    "\uffd3\137\uffd3\140\uffd3\141\uffd3\157\uffd3\165\uffd3\175\uffd3" +
    "\205\uffd3\206\uffd3\207\uffd3\210\uffd3\001\002\000\070\142" +
    "\uff57\143\uff57\144\uff57\145\uff57\146\uff57\147\uff57\150\uff57" +
    "\151\uff57\152\uff57\153\uff57\154\uff57\155\uff57\156\uff57\160" +
    "\uff57\161\uff57\162\uff57\163\uff57\164\uff57\165\uff57\171\uff57" +
    "\172\uff57\177\uff57\200\uff57\201\uff57\202\uff57\203\uff57\204" +
    "\uff57\001\002\000\014\056\uffaf\057\uffaf\065\uffaf\172\uffaf" +
    "\207\uffaf\001\002\000\014\056\uffc3\057\uffc3\065\uffc3\172" +
    "\uffc3\207\uffc3\001\002\000\032\050\131\065\020\066\106" +
    "\137\061\140\126\141\100\157\121\165\147\205\133\206" +
    "\075\207\022\210\134\001\002\000\176\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\060\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\137\uffe5" +
    "\140\uffe5\141\uffe5\157\uffe5\165\uffe5\205\uffe5\206\uffe5\207" +
    "\uffe5\210\uffe5\001\002\000\014\056\uffb3\057\uffb3\065\uffb3" +
    "\172\uffb3\207\uffb3\001\002\000\014\056\uffc0\057\uffc0\065" +
    "\uffc0\172\uffc0\207\uffc0\001\002\000\010\056\355\057\354" +
    "\172\353\001\002\000\176\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\060\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2" +
    "\076\uffe2\077\uffe2\100\uffe2\101\uffe2\137\uffe2\140\uffe2\141" +
    "\uffe2\157\uffe2\165\uffe2\205\uffe2\206\uffe2\207\uffe2\210\uffe2" +
    "\001\002\000\014\056\uff9e\057\uff9e\065\uff9e\172\uff9e\207" +
    "\uff9e\001\002\000\004\175\352\001\002\000\070\142\226" +
    "\143\231\144\230\145\263\146\276\147\260\150\232\151" +
    "\227\152\270\153\262\154\255\155\244\156\245\160\267" +
    "\161\273\162\265\163\234\164\277\165\242\171\257\172" +
    "\271\177\235\200\233\201\274\202\266\203\272\204\240" +
    "\001\002\000\014\056\uffa0\057\uffa0\065\uffa0\172\uffa0\207" +
    "\uffa0\001\002\000\014\056\uff94\057\uff94\065\uff94\172\uff94" +
    "\207\uff94\001\002\000\176\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\060\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7" +
    "\076\uffe7\077\uffe7\100\uffe7\101\uffe7\137\uffe7\140\uffe7\141" +
    "\uffe7\157\uffe7\165\uffe7\205\uffe7\206\uffe7\207\uffe7\210\uffe7" +
    "\001\002\000\014\056\uffa6\057\uffa6\065\uffa6\172\uffa6\207" +
    "\uffa6\001\002\000\026\102\214\103\207\127\210\130\213" +
    "\131\220\132\212\133\222\134\216\135\221\136\211\001" +
    "\002\000\014\056\uffc5\057\uffc5\065\uffc5\172\uffc5\207\uffc5" +
    "\001\002\000\014\056\uffab\057\uffab\065\uffab\172\uffab\207" +
    "\uffab\001\002\000\070\142\uff56\143\uff56\144\uff56\145\uff56" +
    "\146\uff56\147\uff56\150\uff56\151\uff56\152\uff56\153\uff56\154" +
    "\uff56\155\uff56\156\uff56\160\uff56\161\uff56\162\uff56\163\uff56" +
    "\164\uff56\165\uff56\171\uff56\172\uff56\177\uff56\200\uff56\201" +
    "\uff56\202\uff56\203\uff56\204\uff56\001\002\000\014\056\uffac" +
    "\057\uffac\065\uffac\172\uffac\207\uffac\001\002\000\114\102" +
    "\214\103\207\127\210\130\213\131\220\132\212\133\222" +
    "\134\216\135\221\136\211\142\uff5c\143\uff5c\144\uff5c\145" +
    "\uff5c\146\uff5c\147\uff5c\150\uff5c\151\uff5c\152\uff5c\153\uff5c" +
    "\154\uff5c\155\uff5c\156\uff5c\160\uff5c\161\uff5c\162\uff5c\163" +
    "\uff5c\164\uff5c\165\uff5c\171\uff5c\172\uff5c\177\uff5c\200\uff5c" +
    "\201\uff5c\202\uff5c\203\uff5c\204\uff5c\001\002\000\026\102" +
    "\214\103\207\127\210\130\213\131\220\132\212\133\222" +
    "\134\216\135\221\136\211\001\002\000\014\056\uffad\057" +
    "\uffad\065\uffad\172\uffad\207\uffad\001\002\000\014\056\uffb1" +
    "\057\uffb1\065\uffb1\172\uffb1\207\uffb1\001\002\000\014\056" +
    "\uff97\057\uff97\065\uff97\172\uff97\207\uff97\001\002\000\014" +
    "\056\uffc4\057\uffc4\065\uffc4\172\uffc4\207\uffc4\001\002\000" +
    "\004\172\203\001\002\000\070\142\uff5f\143\uff5f\144\uff5f" +
    "\145\uff5f\146\uff5f\147\uff5f\150\uff5f\151\uff5f\152\uff5f\153" +
    "\uff5f\154\uff5f\155\uff5f\156\uff5f\160\uff5f\161\uff5f\162\uff5f" +
    "\163\uff5f\164\uff5f\165\uff5f\171\uff5f\172\uff5f\177\uff5f\200" +
    "\uff5f\201\uff5f\202\uff5f\203\uff5f\204\uff5f\001\002\000\014" +
    "\056\uff99\057\uff99\065\uff99\172\uff99\207\uff99\001\002\000" +
    "\014\056\uffc1\057\uffc1\065\uffc1\172\uffc1\207\uffc1\001\002" +
    "\000\014\056\uffa5\057\uffa5\065\uffa5\172\uffa5\207\uffa5\001" +
    "\002\000\004\170\202\001\002\000\030\050\131\065\020" +
    "\066\106\137\061\140\126\141\100\157\121\205\133\206" +
    "\075\207\022\210\134\001\002\000\014\056\uff9a\057\uff9a" +
    "\065\uff9a\172\uff9a\207\uff9a\001\002\000\062\142\uff92\143" +
    "\uff92\144\uff92\145\uff92\146\uff92\147\uff92\150\uff92\151\uff92" +
    "\152\uff92\153\uff92\154\uff92\155\uff92\156\uff92\160\uff92\166" +
    "\uff92\171\uff92\172\uff92\175\uff92\176\uff92\201\uff92\202\uff92" +
    "\203\uff92\204\uff92\207\uff92\001\002\000\014\056\uff9b\057" +
    "\uff9b\065\uff9b\172\uff9b\207\uff9b\001\002\000\004\170\ufff8" +
    "\001\002\000\014\056\uffa9\057\uffa9\065\uffa9\172\uffa9\207" +
    "\uffa9\001\002\000\176\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\060\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\101\uffe6\137\uffe6\140\uffe6\141\uffe6" +
    "\157\uffe6\165\uffe6\205\uffe6\206\uffe6\207\uffe6\210\uffe6\001" +
    "\002\000\014\056\uffa1\057\uffa1\065\uffa1\172\uffa1\207\uffa1" +
    "\001\002\000\004\165\166\001\002\000\014\056\uffb7\057" +
    "\uffb7\065\uffb7\172\uffb7\207\uffb7\001\002\000\014\056\uffb0" +
    "\057\uffb0\065\uffb0\172\uffb0\207\uffb0\001\002\000\004\175" +
    "\165\001\002\000\014\056\uffc7\057\uffc7\065\uffc7\172\uffc7" +
    "\207\uffc7\001\002\000\014\056\uff9c\057\uff9c\065\uff9c\172" +
    "\uff9c\207\uff9c\001\002\000\176\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\060\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\137\uffd0\140\uffd0" +
    "\141\uffd0\157\uffd0\165\uffd0\205\uffd0\206\uffd0\207\uffd0\210" +
    "\uffd0\001\002\000\002\001\002\000\004\166\170\001\002" +
    "\000\004\167\172\001\002\000\176\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\060\uffdd\063\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd" +
    "\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\137\uffdd\140" +
    "\uffdd\141\uffdd\157\uffdd\165\uffdd\205\uffdd\206\uffdd\207\uffdd" +
    "\210\uffdd\001\002\000\170\004\060\005\135\006\132\007" +
    "\130\010\056\011\154\012\077\013\054\014\125\015\101" +
    "\017\140\020\163\021\162\022\164\023\152\024\150\025" +
    "\143\026\040\027\137\030\066\031\050\032\123\033\160" +
    "\034\076\035\074\036\072\037\113\040\063\041\136\042" +
    "\161\043\107\044\102\046\055\050\131\051\047\060\111" +
    "\063\144\065\020\066\106\067\114\070\145\071\046\072" +
    "\044\073\042\074\156\075\122\076\043\077\117\100\037" +
    "\101\157\137\061\140\126\141\100\157\121\165\147\205" +
    "\133\206\075\207\022\210\134\001\002\000\004\170\177" +
    "\001\002\000\170\004\060\005\135\006\132\007\130\010" +
    "\056\011\154\012\077\013\054\014\125\015\101\017\140" +
    "\020\163\021\162\022\164\023\152\024\150\025\143\026" +
    "\040\027\137\030\066\031\050\032\123\033\160\034\076" +
    "\035\074\036\072\037\113\040\063\041\136\042\161\043" +
    "\107\044\102\046\055\050\131\051\047\060\111\063\144" +
    "\065\020\066\106\067\114\070\145\071\046\072\044\073" +
    "\042\074\156\075\122\076\043\077\117\100\037\101\157" +
    "\137\061\140\126\141\100\157\121\165\147\205\133\206" +
    "\075\207\022\210\134\001\002\000\004\170\uffe9\001\002" +
    "\000\004\170\uffea\001\002\000\200\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\060\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\137" +
    "\uffeb\140\uffeb\141\uffeb\157\uffeb\165\uffeb\205\uffeb\206\uffeb" +
    "\207\uffeb\210\uffeb\001\002\000\004\166\201\001\002\000" +
    "\062\142\uff93\143\uff93\144\uff93\145\uff93\146\uff93\147\uff93" +
    "\150\uff93\151\uff93\152\uff93\153\uff93\154\uff93\155\uff93\156" +
    "\uff93\160\uff93\166\uff93\171\uff93\172\uff93\175\uff93\176\uff93" +
    "\201\uff93\202\uff93\203\uff93\204\uff93\207\uff93\001\002\000" +
    "\004\045\ufffd\001\002\000\004\173\206\001\002\000\070" +
    "\142\uff5a\143\uff5a\144\uff5a\145\uff5a\146\uff5a\147\uff5a\150" +
    "\uff5a\151\uff5a\152\uff5a\153\uff5a\154\uff5a\155\uff5a\156\uff5a" +
    "\160\uff5a\161\uff5a\162\uff5a\163\uff5a\164\uff5a\165\uff5a\171" +
    "\uff5a\172\uff5a\177\uff5a\200\uff5a\201\uff5a\202\uff5a\203\uff5a" +
    "\204\uff5a\001\002\000\070\142\uff58\143\uff58\144\uff58\145" +
    "\uff58\146\uff58\147\uff58\150\uff58\151\uff58\152\uff58\153\uff58" +
    "\154\uff58\155\uff58\156\uff58\160\uff58\161\uff58\162\uff58\163" +
    "\uff58\164\uff58\165\uff58\171\uff58\172\uff58\177\uff58\200\uff58" +
    "\201\uff58\202\uff58\203\uff58\204\uff58\001\002\000\070\142" +
    "\uff59\143\uff59\144\uff59\145\uff59\146\uff59\147\uff59\150\uff59" +
    "\151\uff59\152\uff59\153\uff59\154\uff59\155\uff59\156\uff59\160" +
    "\uff59\161\uff59\162\uff59\163\uff59\164\uff59\165\uff59\171\uff59" +
    "\172\uff59\177\uff59\200\uff59\201\uff59\202\uff59\203\uff59\204" +
    "\uff59\001\002\000\070\142\uff50\143\uff50\144\uff50\145\uff50" +
    "\146\uff50\147\uff50\150\uff50\151\uff50\152\uff50\153\uff50\154" +
    "\uff50\155\uff50\156\uff50\160\uff50\161\uff50\162\uff50\163\uff50" +
    "\164\uff50\165\uff50\171\uff50\172\uff50\177\uff50\200\uff50\201" +
    "\uff50\202\uff50\203\uff50\204\uff50\001\002\000\070\142\uff4f" +
    "\143\uff4f\144\uff4f\145\uff4f\146\uff4f\147\uff4f\150\uff4f\151" +
    "\uff4f\152\uff4f\153\uff4f\154\uff4f\155\uff4f\156\uff4f\160\uff4f" +
    "\161\uff4f\162\uff4f\163\uff4f\164\uff4f\165\uff4f\171\uff4f\172" +
    "\uff4f\177\uff4f\200\uff4f\201\uff4f\202\uff4f\203\uff4f\204\uff4f" +
    "\001\002\000\070\142\uff48\143\uff48\144\uff48\145\uff48\146" +
    "\uff48\147\uff48\150\uff48\151\uff48\152\uff48\153\uff48\154\uff48" +
    "\155\uff48\156\uff48\160\uff48\161\uff48\162\uff48\163\uff48\164" +
    "\uff48\165\uff48\171\uff48\172\uff48\177\uff48\200\uff48\201\uff48" +
    "\202\uff48\203\uff48\204\uff48\001\002\000\070\142\uff4c\143" +
    "\uff4c\144\uff4c\145\uff4c\146\uff4c\147\uff4c\150\uff4c\151\uff4c" +
    "\152\uff4c\153\uff4c\154\uff4c\155\uff4c\156\uff4c\160\uff4c\161" +
    "\uff4c\162\uff4c\163\uff4c\164\uff4c\165\uff4c\171\uff4c\172\uff4c" +
    "\177\uff4c\200\uff4c\201\uff4c\202\uff4c\203\uff4c\204\uff4c\001" +
    "\002\000\070\142\uff4e\143\uff4e\144\uff4e\145\uff4e\146\uff4e" +
    "\147\uff4e\150\uff4e\151\uff4e\152\uff4e\153\uff4e\154\uff4e\155" +
    "\uff4e\156\uff4e\160\uff4e\161\uff4e\162\uff4e\163\uff4e\164\uff4e" +
    "\165\uff4e\171\uff4e\172\uff4e\177\uff4e\200\uff4e\201\uff4e\202" +
    "\uff4e\203\uff4e\204\uff4e\001\002\000\070\142\uff51\143\uff51" +
    "\144\uff51\145\uff51\146\uff51\147\uff51\150\uff51\151\uff51\152" +
    "\uff51\153\uff51\154\uff51\155\uff51\156\uff51\160\uff51\161\uff51" +
    "\162\uff51\163\uff51\164\uff51\165\uff51\171\uff51\172\uff51\177" +
    "\uff51\200\uff51\201\uff51\202\uff51\203\uff51\204\uff51\001\002" +
    "\000\070\142\uff47\143\uff47\144\uff47\145\uff47\146\uff47\147" +
    "\uff47\150\uff47\151\uff47\152\uff47\153\uff47\154\uff47\155\uff47" +
    "\156\uff47\160\uff47\161\uff47\162\uff47\163\uff47\164\uff47\165" +
    "\uff47\171\uff47\172\uff47\177\uff47\200\uff47\201\uff47\202\uff47" +
    "\203\uff47\204\uff47\001\002\000\070\142\uff4a\143\uff4a\144" +
    "\uff4a\145\uff4a\146\uff4a\147\uff4a\150\uff4a\151\uff4a\152\uff4a" +
    "\153\uff4a\154\uff4a\155\uff4a\156\uff4a\160\uff4a\161\uff4a\162" +
    "\uff4a\163\uff4a\164\uff4a\165\uff4a\171\uff4a\172\uff4a\177\uff4a" +
    "\200\uff4a\201\uff4a\202\uff4a\203\uff4a\204\uff4a\001\002\000" +
    "\070\142\uff55\143\uff55\144\uff55\145\uff55\146\uff55\147\uff55" +
    "\150\uff55\151\uff55\152\uff55\153\uff55\154\uff55\155\uff55\156" +
    "\uff55\160\uff55\161\uff55\162\uff55\163\uff55\164\uff55\165\uff55" +
    "\171\uff55\172\uff55\177\uff55\200\uff55\201\uff55\202\uff55\203" +
    "\uff55\204\uff55\001\002\000\070\142\uff4d\143\uff4d\144\uff4d" +
    "\145\uff4d\146\uff4d\147\uff4d\150\uff4d\151\uff4d\152\uff4d\153" +
    "\uff4d\154\uff4d\155\uff4d\156\uff4d\160\uff4d\161\uff4d\162\uff4d" +
    "\163\uff4d\164\uff4d\165\uff4d\171\uff4d\172\uff4d\177\uff4d\200" +
    "\uff4d\201\uff4d\202\uff4d\203\uff4d\204\uff4d\001\002\000\070" +
    "\142\uff49\143\uff49\144\uff49\145\uff49\146\uff49\147\uff49\150" +
    "\uff49\151\uff49\152\uff49\153\uff49\154\uff49\155\uff49\156\uff49" +
    "\160\uff49\161\uff49\162\uff49\163\uff49\164\uff49\165\uff49\171" +
    "\uff49\172\uff49\177\uff49\200\uff49\201\uff49\202\uff49\203\uff49" +
    "\204\uff49\001\002\000\070\142\uff4b\143\uff4b\144\uff4b\145" +
    "\uff4b\146\uff4b\147\uff4b\150\uff4b\151\uff4b\152\uff4b\153\uff4b" +
    "\154\uff4b\155\uff4b\156\uff4b\160\uff4b\161\uff4b\162\uff4b\163" +
    "\uff4b\164\uff4b\165\uff4b\171\uff4b\172\uff4b\177\uff4b\200\uff4b" +
    "\201\uff4b\202\uff4b\203\uff4b\204\uff4b\001\002\000\070\142" +
    "\uff54\143\uff54\144\uff54\145\uff54\146\uff54\147\uff54\150\uff54" +
    "\151\uff54\152\uff54\153\uff54\154\uff54\155\uff54\156\uff54\160" +
    "\uff54\161\uff54\162\uff54\163\uff54\164\uff54\165\uff54\171\uff54" +
    "\172\uff54\177\uff54\200\uff54\201\uff54\202\uff54\203\uff54\204" +
    "\uff54\001\002\000\070\142\uff52\143\uff52\144\uff52\145\uff52" +
    "\146\uff52\147\uff52\150\uff52\151\uff52\152\uff52\153\uff52\154" +
    "\uff52\155\uff52\156\uff52\160\uff52\161\uff52\162\uff52\163\uff52" +
    "\164\uff52\165\uff52\171\uff52\172\uff52\177\uff52\200\uff52\201" +
    "\uff52\202\uff52\203\uff52\204\uff52\001\002\000\062\142\uff86" +
    "\143\uff86\144\uff86\145\uff86\146\uff86\147\uff86\150\uff86\151" +
    "\uff86\152\uff86\153\uff86\154\uff86\155\uff86\156\uff86\160\uff86" +
    "\166\uff86\171\uff86\172\uff86\175\uff86\176\uff86\201\uff86\202" +
    "\uff86\203\uff86\204\uff86\207\uff86\001\002\000\106\050\uff67" +
    "\065\uff67\066\uff67\137\uff67\140\uff67\141\uff67\142\uff67\143" +
    "\uff67\144\uff67\145\uff67\146\uff67\147\uff67\150\uff67\151\uff67" +
    "\152\uff67\153\uff67\154\uff67\155\uff67\156\uff67\157\uff67\160" +
    "\uff67\166\uff67\171\uff67\172\uff67\175\uff67\176\uff67\201\uff67" +
    "\202\uff67\203\uff67\204\uff67\205\uff67\206\uff67\207\uff67\210" +
    "\uff67\001\002\000\106\050\uff79\065\uff79\066\uff79\137\uff79" +
    "\140\uff79\141\uff79\142\uff79\143\uff79\144\uff79\145\uff79\146" +
    "\uff79\147\uff79\150\uff79\151\uff79\152\uff79\153\uff79\154\uff79" +
    "\155\uff79\156\uff79\157\uff79\160\uff79\166\uff79\171\uff79\172" +
    "\uff79\175\uff79\176\uff79\201\uff79\202\uff79\203\uff79\204\uff79" +
    "\205\uff79\206\uff79\207\uff79\210\uff79\001\002\000\106\050" +
    "\uff69\065\uff69\066\uff69\137\uff69\140\uff69\141\uff69\142\uff69" +
    "\143\uff69\144\uff69\145\uff69\146\uff69\147\uff69\150\uff69\151" +
    "\uff69\152\uff69\153\uff69\154\uff69\155\uff69\156\uff69\157\uff69" +
    "\160\uff69\166\uff69\171\uff69\172\uff69\175\uff69\176\uff69\201" +
    "\uff69\202\uff69\203\uff69\204\uff69\205\uff69\206\uff69\207\uff69" +
    "\210\uff69\001\002\000\106\050\uff75\065\uff75\066\uff75\137" +
    "\uff75\140\uff75\141\uff75\142\uff75\143\uff75\144\uff75\145\uff75" +
    "\146\uff75\147\uff75\150\uff75\151\uff75\152\uff75\153\uff75\154" +
    "\uff75\155\uff75\156\uff75\157\uff75\160\uff75\166\uff75\171\uff75" +
    "\172\uff75\175\uff75\176\uff75\201\uff75\202\uff75\203\uff75\204" +
    "\uff75\205\uff75\206\uff75\207\uff75\210\uff75\001\002\000\106" +
    "\050\uff78\065\uff78\066\uff78\137\uff78\140\uff78\141\uff78\142" +
    "\uff78\143\uff78\144\uff78\145\uff78\146\uff78\147\uff78\150\uff78" +
    "\151\uff78\152\uff78\153\uff78\154\uff78\155\uff78\156\uff78\157" +
    "\uff78\160\uff78\166\uff78\171\uff78\172\uff78\175\uff78\176\uff78" +
    "\201\uff78\202\uff78\203\uff78\204\uff78\205\uff78\206\uff78\207" +
    "\uff78\210\uff78\001\002\000\032\050\uffbe\065\uffbe\066\uffbe" +
    "\137\uffbe\140\uffbe\141\uffbe\157\uffbe\165\uffbe\205\uffbe\206" +
    "\uffbe\207\uffbe\210\uffbe\001\002\000\032\050\uffbb\065\uffbb" +
    "\066\uffbb\137\uffbb\140\uffbb\141\uffbb\157\uffbb\165\uffbb\205" +
    "\uffbb\206\uffbb\207\uffbb\210\uffbb\001\002\000\006\065\020" +
    "\207\022\001\002\000\030\050\131\065\020\066\106\137" +
    "\061\140\126\141\100\157\121\205\133\206\075\207\022" +
    "\210\134\001\002\000\004\171\347\001\002\000\106\050" +
    "\uff72\065\uff72\066\uff72\137\uff72\140\uff72\141\uff72\142\uff72" +
    "\143\uff72\144\uff72\145\uff72\146\uff72\147\uff72\150\uff72\151" +
    "\uff72\152\uff72\153\uff72\154\uff72\155\uff72\156\uff72\157\uff72" +
    "\160\uff72\166\uff72\171\uff72\172\uff72\175\uff72\176\uff72\201" +
    "\uff72\202\uff72\203\uff72\204\uff72\205\uff72\206\uff72\207\uff72" +
    "\210\uff72\001\002\000\022\142\226\144\230\145\263\146" +
    "\276\147\260\152\270\153\262\154\255\001\002\000\032" +
    "\050\131\065\020\066\106\137\061\140\126\141\100\157" +
    "\121\165\147\205\133\206\075\207\022\210\134\001\002" +
    "\000\030\050\131\065\020\066\106\137\061\140\126\141" +
    "\100\157\121\205\133\206\075\207\022\210\134\001\002" +
    "\000\106\050\uff77\065\uff77\066\uff77\137\uff77\140\uff77\141" +
    "\uff77\142\uff77\143\uff77\144\uff77\145\uff77\146\uff77\147\uff77" +
    "\150\uff77\151\uff77\152\uff77\153\uff77\154\uff77\155\uff77\156" +
    "\uff77\157\uff77\160\uff77\166\uff77\171\uff77\172\uff77\175\uff77" +
    "\176\uff77\201\uff77\202\uff77\203\uff77\204\uff77\205\uff77\206" +
    "\uff77\207\uff77\210\uff77\001\002\000\106\050\uff76\065\uff76" +
    "\066\uff76\137\uff76\140\uff76\141\uff76\142\uff76\143\uff76\144" +
    "\uff76\145\uff76\146\uff76\147\uff76\150\uff76\151\uff76\152\uff76" +
    "\153\uff76\154\uff76\155\uff76\156\uff76\157\uff76\160\uff76\166" +
    "\uff76\171\uff76\172\uff76\175\uff76\176\uff76\201\uff76\202\uff76" +
    "\203\uff76\204\uff76\205\uff76\206\uff76\207\uff76\210\uff76\001" +
    "\002\000\012\150\232\151\227\155\244\156\245\001\002" +
    "\000\016\143\231\160\267\201\274\202\266\203\272\204" +
    "\240\001\002\000\004\165\324\001\002\000\004\207\321" +
    "\001\002\000\004\177\317\001\002\000\004\172\316\001" +
    "\002\000\062\142\uff90\143\uff90\144\uff90\145\uff90\146\uff90" +
    "\147\uff90\150\uff90\151\uff90\152\uff90\153\uff90\154\uff90\155" +
    "\uff90\156\uff90\160\uff90\166\uff90\171\uff90\172\uff90\175\uff90" +
    "\176\uff90\201\uff90\202\uff90\203\uff90\204\uff90\207\uff90\001" +
    "\002\000\106\050\uff6c\065\uff6c\066\uff6c\137\uff6c\140\uff6c" +
    "\141\uff6c\142\uff6c\143\uff6c\144\uff6c\145\uff6c\146\uff6c\147" +
    "\uff6c\150\uff6c\151\uff6c\152\uff6c\153\uff6c\154\uff6c\155\uff6c" +
    "\156\uff6c\157\uff6c\160\uff6c\166\uff6c\171\uff6c\172\uff6c\175" +
    "\uff6c\176\uff6c\201\uff6c\202\uff6c\203\uff6c\204\uff6c\205\uff6c" +
    "\206\uff6c\207\uff6c\210\uff6c\001\002\000\030\050\131\065" +
    "\020\066\106\137\061\140\126\141\100\157\121\205\133" +
    "\206\075\207\022\210\134\001\002\000\030\050\131\065" +
    "\020\066\106\137\061\140\126\141\100\157\121\205\133" +
    "\206\075\207\022\210\134\001\002\000\106\050\uff6b\065" +
    "\uff6b\066\uff6b\137\uff6b\140\uff6b\141\uff6b\142\uff6b\143\uff6b" +
    "\144\uff6b\145\uff6b\146\uff6b\147\uff6b\150\uff6b\151\uff6b\152" +
    "\uff6b\153\uff6b\154\uff6b\155\uff6b\156\uff6b\157\uff6b\160\uff6b" +
    "\166\uff6b\171\uff6b\172\uff6b\175\uff6b\176\uff6b\201\uff6b\202" +
    "\uff6b\203\uff6b\204\uff6b\205\uff6b\206\uff6b\207\uff6b\210\uff6b" +
    "\001\002\000\030\050\131\065\020\066\106\137\061\140" +
    "\126\141\100\157\121\205\133\206\075\207\022\210\134" +
    "\001\002\000\106\050\uff6a\065\uff6a\066\uff6a\137\uff6a\140" +
    "\uff6a\141\uff6a\142\uff6a\143\uff6a\144\uff6a\145\uff6a\146\uff6a" +
    "\147\uff6a\150\uff6a\151\uff6a\152\uff6a\153\uff6a\154\uff6a\155" +
    "\uff6a\156\uff6a\157\uff6a\160\uff6a\166\uff6a\171\uff6a\172\uff6a" +
    "\175\uff6a\176\uff6a\201\uff6a\202\uff6a\203\uff6a\204\uff6a\205" +
    "\uff6a\206\uff6a\207\uff6a\210\uff6a\001\002\000\106\050\uff68" +
    "\065\uff68\066\uff68\137\uff68\140\uff68\141\uff68\142\uff68\143" +
    "\uff68\144\uff68\145\uff68\146\uff68\147\uff68\150\uff68\151\uff68" +
    "\152\uff68\153\uff68\154\uff68\155\uff68\156\uff68\157\uff68\160" +
    "\uff68\166\uff68\171\uff68\172\uff68\175\uff68\176\uff68\201\uff68" +
    "\202\uff68\203\uff68\204\uff68\205\uff68\206\uff68\207\uff68\210" +
    "\uff68\001\002\000\106\050\uff70\065\uff70\066\uff70\137\uff70" +
    "\140\uff70\141\uff70\142\uff70\143\uff70\144\uff70\145\uff70\146" +
    "\uff70\147\uff70\150\uff70\151\uff70\152\uff70\153\uff70\154\uff70" +
    "\155\uff70\156\uff70\157\uff70\160\uff70\166\uff70\171\uff70\172" +
    "\uff70\175\uff70\176\uff70\201\uff70\202\uff70\203\uff70\204\uff70" +
    "\205\uff70\206\uff70\207\uff70\210\uff70\001\002\000\032\050" +
    "\uffbc\065\uffbc\066\uffbc\137\uffbc\140\uffbc\141\uffbc\157\uffbc" +
    "\165\uffbc\205\uffbc\206\uffbc\207\uffbc\210\uffbc\001\002\000" +
    "\106\050\uff6e\065\uff6e\066\uff6e\137\uff6e\140\uff6e\141\uff6e" +
    "\142\uff6e\143\uff6e\144\uff6e\145\uff6e\146\uff6e\147\uff6e\150" +
    "\uff6e\151\uff6e\152\uff6e\153\uff6e\154\uff6e\155\uff6e\156\uff6e" +
    "\157\uff6e\160\uff6e\166\uff6e\171\uff6e\172\uff6e\175\uff6e\176" +
    "\uff6e\201\uff6e\202\uff6e\203\uff6e\204\uff6e\205\uff6e\206\uff6e" +
    "\207\uff6e\210\uff6e\001\002\000\106\050\uff71\065\uff71\066" +
    "\uff71\137\uff71\140\uff71\141\uff71\142\uff71\143\uff71\144\uff71" +
    "\145\uff71\146\uff71\147\uff71\150\uff71\151\uff71\152\uff71\153" +
    "\uff71\154\uff71\155\uff71\156\uff71\157\uff71\160\uff71\166\uff71" +
    "\171\uff71\172\uff71\175\uff71\176\uff71\201\uff71\202\uff71\203" +
    "\uff71\204\uff71\205\uff71\206\uff71\207\uff71\210\uff71\001\002" +
    "\000\106\050\uff6d\065\uff6d\066\uff6d\137\uff6d\140\uff6d\141" +
    "\uff6d\142\uff6d\143\uff6d\144\uff6d\145\uff6d\146\uff6d\147\uff6d" +
    "\150\uff6d\151\uff6d\152\uff6d\153\uff6d\154\uff6d\155\uff6d\156" +
    "\uff6d\157\uff6d\160\uff6d\166\uff6d\171\uff6d\172\uff6d\175\uff6d" +
    "\176\uff6d\201\uff6d\202\uff6d\203\uff6d\204\uff6d\205\uff6d\206" +
    "\uff6d\207\uff6d\210\uff6d\001\002\000\032\050\131\065\020" +
    "\066\106\137\061\140\126\141\100\157\121\165\147\205" +
    "\133\206\075\207\022\210\134\001\002\000\106\050\uff73" +
    "\065\uff73\066\uff73\137\uff73\140\uff73\141\uff73\142\uff73\143" +
    "\uff73\144\uff73\145\uff73\146\uff73\147\uff73\150\uff73\151\uff73" +
    "\152\uff73\153\uff73\154\uff73\155\uff73\156\uff73\157\uff73\160" +
    "\uff73\166\uff73\171\uff73\172\uff73\175\uff73\176\uff73\201\uff73" +
    "\202\uff73\203\uff73\204\uff73\205\uff73\206\uff73\207\uff73\210" +
    "\uff73\001\002\000\032\050\uffbd\065\uffbd\066\uffbd\137\uffbd" +
    "\140\uffbd\141\uffbd\157\uffbd\165\uffbd\205\uffbd\206\uffbd\207" +
    "\uffbd\210\uffbd\001\002\000\106\050\uff6f\065\uff6f\066\uff6f" +
    "\137\uff6f\140\uff6f\141\uff6f\142\uff6f\143\uff6f\144\uff6f\145" +
    "\uff6f\146\uff6f\147\uff6f\150\uff6f\151\uff6f\152\uff6f\153\uff6f" +
    "\154\uff6f\155\uff6f\156\uff6f\157\uff6f\160\uff6f\166\uff6f\171" +
    "\uff6f\172\uff6f\175\uff6f\176\uff6f\201\uff6f\202\uff6f\203\uff6f" +
    "\204\uff6f\205\uff6f\206\uff6f\207\uff6f\210\uff6f\001\002\000" +
    "\106\050\uff74\065\uff74\066\uff74\137\uff74\140\uff74\141\uff74" +
    "\142\uff74\143\uff74\144\uff74\145\uff74\146\uff74\147\uff74\150" +
    "\uff74\151\uff74\152\uff74\153\uff74\154\uff74\155\uff74\156\uff74" +
    "\157\uff74\160\uff74\166\uff74\171\uff74\172\uff74\175\uff74\176" +
    "\uff74\201\uff74\202\uff74\203\uff74\204\uff74\205\uff74\206\uff74" +
    "\207\uff74\210\uff74\001\002\000\106\050\uff66\065\uff66\066" +
    "\uff66\137\uff66\140\uff66\141\uff66\142\uff66\143\uff66\144\uff66" +
    "\145\uff66\146\uff66\147\uff66\150\uff66\151\uff66\152\uff66\153" +
    "\uff66\154\uff66\155\uff66\156\uff66\157\uff66\160\uff66\166\uff66" +
    "\171\uff66\172\uff66\175\uff66\176\uff66\201\uff66\202\uff66\203" +
    "\uff66\204\uff66\205\uff66\206\uff66\207\uff66\210\uff66\001\002" +
    "\000\032\050\uffba\065\uffba\066\uffba\137\uffba\140\uffba\141" +
    "\uffba\157\uffba\165\uffba\205\uffba\206\uffba\207\uffba\210\uffba" +
    "\001\002\000\006\173\uff7a\174\uff7a\001\002\000\004\172" +
    "\310\001\002\000\006\173\305\174\304\001\002\000\004" +
    "\172\uff85\001\002\000\032\050\131\065\020\066\106\137" +
    "\061\140\126\141\100\157\121\165\147\205\133\206\075" +
    "\207\022\210\134\001\002\000\004\172\uff83\001\002\000" +
    "\004\173\307\001\002\000\004\172\uff84\001\002\000\032" +
    "\050\131\065\020\066\106\137\061\140\126\141\100\157" +
    "\121\165\147\205\133\206\075\207\022\210\134\001\002" +
    "\000\004\173\312\001\002\000\006\173\uff7b\174\uff7b\001" +
    "\002\000\016\143\uff80\160\uff80\201\uff80\202\uff80\203\uff80" +
    "\204\uff80\001\002\000\004\171\uff7d\001\002\000\012\150" +
    "\uff7f\151\uff7f\155\uff7f\156\uff7f\001\002\000\062\142\uff8e" +
    "\143\uff8e\144\uff8e\145\uff8e\146\uff8e\147\uff8e\150\uff8e\151" +
    "\uff8e\152\uff8e\153\uff8e\154\uff8e\155\uff8e\156\uff8e\160\uff8e" +
    "\166\uff8e\171\uff8e\172\uff8e\175\uff8e\176\uff8e\201\uff8e\202" +
    "\uff8e\203\uff8e\204\uff8e\207\uff8e\001\002\000\062\142\uff8d" +
    "\143\uff8d\144\uff8d\145\uff8d\146\uff8d\147\uff8d\150\uff8d\151" +
    "\uff8d\152\uff8d\153\uff8d\154\uff8d\155\uff8d\156\uff8d\160\uff8d" +
    "\166\uff8d\171\uff8d\172\uff8d\175\uff8d\176\uff8d\201\uff8d\202" +
    "\uff8d\203\uff8d\204\uff8d\207\uff8d\001\002\000\062\142\uff87" +
    "\143\uff87\144\uff87\145\uff87\146\uff87\147\uff87\150\uff87\151" +
    "\uff87\152\uff87\153\uff87\154\uff87\155\uff87\156\uff87\160\uff87" +
    "\166\uff87\171\uff87\172\uff87\175\uff87\176\uff87\201\uff87\202" +
    "\uff87\203\uff87\204\uff87\207\uff87\001\002\000\014\161\273" +
    "\162\265\163\234\164\277\200\233\001\002\000\032\050" +
    "\131\065\020\066\106\137\061\140\126\141\100\157\121" +
    "\165\147\205\133\206\075\207\022\210\134\001\002\000" +
    "\062\142\uffbf\143\uffbf\144\uffbf\145\uffbf\146\uffbf\147\uffbf" +
    "\150\uffbf\151\uffbf\152\uffbf\153\uffbf\154\uffbf\155\uffbf\156" +
    "\uffbf\160\uffbf\166\uffbf\171\uffbf\172\uffbf\175\uffbf\176\uffbf" +
    "\201\uffbf\202\uffbf\203\uffbf\204\uffbf\207\uffbf\001\002\000" +
    "\062\142\uff8c\143\uff8c\144\uff8c\145\uff8c\146\uff8c\147\uff8c" +
    "\150\uff8c\151\uff8c\152\uff8c\153\uff8c\154\uff8c\155\uff8c\156" +
    "\uff8c\160\uff8c\166\uff8c\171\uff8c\172\uff8c\175\uff8c\176\uff8c" +
    "\201\uff8c\202\uff8c\203\uff8c\204\uff8c\207\uff8c\001\002\000" +
    "\062\142\uff8b\143\uff8b\144\uff8b\145\uff8b\146\uff8b\147\uff8b" +
    "\150\uff8b\151\uff8b\152\uff8b\153\uff8b\154\uff8b\155\uff8b\156" +
    "\uff8b\160\uff8b\166\uff8b\171\uff8b\172\uff8b\175\uff8b\176\uff8b" +
    "\201\uff8b\202\uff8b\203\uff8b\204\uff8b\207\uff8b\001\002\000" +
    "\062\142\uff8a\143\uff8a\144\uff8a\145\uff8a\146\uff8a\147\uff8a" +
    "\150\uff8a\151\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a\156" +
    "\uff8a\160\uff8a\166\uff8a\171\uff8a\172\uff8a\175\uff8a\176\uff8a" +
    "\201\uff8a\202\uff8a\203\uff8a\204\uff8a\207\uff8a\001\002\000" +
    "\004\207\uff7c\001\002\000\006\172\203\176\335\001\002" +
    "\000\004\166\uff63\001\002\000\004\176\335\001\002\000" +
    "\004\166\334\001\002\000\004\165\uff81\001\002\000\032" +
    "\050\131\065\020\066\106\137\061\140\126\141\100\157" +
    "\121\165\147\205\133\206\075\207\022\210\134\001\002" +
    "\000\004\166\uff64\001\002\000\004\166\uff60\001\002\000" +
    "\006\172\203\176\335\001\002\000\004\176\335\001\002" +
    "\000\004\166\uff61\001\002\000\004\166\uff62\001\002\000" +
    "\072\142\uff58\143\uff58\144\uff58\145\uff58\146\uff58\147\uff58" +
    "\150\uff58\151\uff58\152\uff58\153\uff58\154\uff58\155\uff58\156" +
    "\uff58\160\uff58\161\uff58\162\uff58\163\uff58\164\uff58\165\uff58" +
    "\166\uff60\171\uff58\172\uff58\177\uff58\200\uff58\201\uff58\202" +
    "\uff58\203\uff58\204\uff58\001\002\000\004\166\uff65\001\002" +
    "\000\062\142\uff89\143\uff89\144\uff89\145\uff89\146\uff89\147" +
    "\uff89\150\uff89\151\uff89\152\uff89\153\uff89\154\uff89\155\uff89" +
    "\156\uff89\160\uff89\166\uff89\171\uff89\172\uff89\175\uff89\176" +
    "\uff89\201\uff89\202\uff89\203\uff89\204\uff89\207\uff89\001\002" +
    "\000\062\142\uff88\143\uff88\144\uff88\145\uff88\146\uff88\147" +
    "\uff88\150\uff88\151\uff88\152\uff88\153\uff88\154\uff88\155\uff88" +
    "\156\uff88\160\uff88\166\uff88\171\uff88\172\uff88\175\uff88\176" +
    "\uff88\201\uff88\202\uff88\203\uff88\204\uff88\207\uff88\001\002" +
    "\000\022\142\uff7e\144\uff7e\145\uff7e\146\uff7e\147\uff7e\152" +
    "\uff7e\153\uff7e\154\uff7e\001\002\000\004\177\uff82\001\002" +
    "\000\200\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\060\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\137\uffd4\140\uffd4\141\uffd4\157\uffd4\165" +
    "\uffd4\175\uffd4\205\uffd4\206\uffd4\207\uffd4\210\uffd4\001\002" +
    "\000\004\173\364\001\002\000\010\061\uffb9\065\uffb9\207" +
    "\uffb9\001\002\000\010\061\uffb8\065\uffb8\207\uffb8\001\002" +
    "\000\006\065\020\207\363\001\002\000\010\166\uffcc\175" +
    "\uffcc\176\uffcc\001\002\000\010\166\uffc8\175\uffc8\176\uffc8" +
    "\001\002\000\010\166\uffc9\175\uffc9\176\uffc9\001\002\000" +
    "\010\166\uffcb\175\uffcb\176\uffcb\001\002\000\016\161\273" +
    "\162\265\163\234\164\277\177\025\200\233\001\002\000" +
    "\006\065\020\207\363\001\002\000\010\166\uffca\175\uffca" +
    "\176\uffca\001\002\000\004\175\uffcd\001\002\000\004\175" +
    "\371\001\002\000\004\175\uffce\001\002\000\200\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\060\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\137\uffcf\140\uffcf\141\uffcf\157\uffcf\165\uffcf\170\uffcf\205" +
    "\uffcf\206\uffcf\207\uffcf\210\uffcf\001\002\000\176\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\060\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1" +
    "\137\uffd1\140\uffd1\141\uffd1\157\uffd1\165\uffd1\205\uffd1\206" +
    "\uffd1\207\uffd1\210\uffd1\001\002\000\002\001\002\000\004" +
    "\166\375\001\002\000\004\167\172\001\002\000\004\016" +
    "\377\001\002\000\004\167\172\001\002\000\176\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\060\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\137\uffe0\140\uffe0\141\uffe0\157\uffe0\165\uffe0\205\uffe0\206" +
    "\uffe0\207\uffe0\210\uffe0\001\002\000\176\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\060\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074" +
    "\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\137\uffde" +
    "\140\uffde\141\uffde\157\uffde\165\uffde\205\uffde\206\uffde\207" +
    "\uffde\210\uffde\001\002\000\176\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\060\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075" +
    "\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\137\uffdf\140\uffdf" +
    "\141\uffdf\157\uffdf\165\uffdf\205\uffdf\206\uffdf\207\uffdf\210" +
    "\uffdf\001\002\000\062\142\uff91\143\uff91\144\uff91\145\uff91" +
    "\146\uff91\147\uff91\150\uff91\151\uff91\152\uff91\153\uff91\154" +
    "\uff91\155\uff91\156\uff91\160\uff91\166\uff91\171\uff91\172\uff91" +
    "\175\uff91\176\uff91\201\uff91\202\uff91\203\uff91\204\uff91\207" +
    "\uff91\001\002\000\062\142\uff8f\143\uff8f\144\uff8f\145\uff8f" +
    "\146\uff8f\147\uff8f\150\uff8f\151\uff8f\152\uff8f\153\uff8f\154" +
    "\uff8f\155\uff8f\156\uff8f\160\uff8f\166\uff8f\171\uff8f\172\uff8f" +
    "\175\uff8f\176\uff8f\201\uff8f\202\uff8f\203\uff8f\204\uff8f\207" +
    "\uff8f\001\002\000\004\165\u0106\001\002\000\124\004\060" +
    "\005\135\006\132\007\130\010\056\011\154\012\077\013" +
    "\054\014\125\017\140\020\163\022\164\023\152\024\150" +
    "\025\143\026\040\027\137\030\066\031\050\032\123\033" +
    "\160\034\076\035\074\036\072\037\113\040\063\041\136" +
    "\042\161\043\107\063\144\067\114\070\145\071\046\072" +
    "\044\073\042\074\156\075\122\076\043\077\117\100\037" +
    "\176\u0108\001\002\000\004\166\uff3f\001\002\000\122\004" +
    "\060\005\135\006\132\007\130\010\056\011\154\012\077" +
    "\013\054\014\125\017\140\020\163\022\164\023\152\024" +
    "\150\025\143\026\040\027\137\030\066\031\050\032\123" +
    "\033\160\034\076\035\074\036\072\037\113\040\063\041" +
    "\136\042\161\043\107\063\144\067\114\070\145\071\046" +
    "\072\044\073\042\074\156\075\122\076\043\077\117\100" +
    "\037\001\002\000\004\166\u010d\001\002\000\004\166\uff3d" +
    "\001\002\000\004\166\uff40\001\002\000\004\166\uff3e\001" +
    "\002\000\012\053\u0111\054\u010e\056\355\057\354\001\002" +
    "\000\004\061\uff30\001\002\000\004\061\uff2f\001\002\000" +
    "\004\061\u0116\001\002\000\004\061\uff2e\001\002\000\004" +
    "\061\uff32\001\002\000\004\061\uff31\001\002\000\004\167" +
    "\u011c\001\002\000\004\167\uff2d\001\002\000\004\165\u0118" +
    "\001\002\000\004\167\uff2c\001\002\000\122\004\060\005" +
    "\135\006\132\007\130\010\056\011\154\012\077\013\054" +
    "\014\125\017\140\020\163\022\164\023\152\024\150\025" +
    "\143\026\040\027\137\030\066\031\050\032\123\033\160" +
    "\034\076\035\074\036\072\037\113\040\063\041\136\042" +
    "\161\043\107\063\144\067\114\070\145\071\046\072\044" +
    "\073\042\074\156\075\122\076\043\077\117\100\037\001" +
    "\002\000\006\065\020\207\022\001\002\000\004\166\u011b" +
    "\001\002\000\004\167\uff2b\001\002\000\124\004\060\005" +
    "\135\006\132\007\130\010\056\011\154\012\077\013\054" +
    "\014\125\017\140\020\163\022\164\023\152\024\150\025" +
    "\143\026\040\027\137\030\066\031\050\032\123\033\160" +
    "\034\076\035\074\036\072\037\113\040\063\041\136\042" +
    "\161\043\107\063\144\067\114\070\145\071\046\072\044" +
    "\073\042\074\156\075\122\076\043\077\117\100\037\176" +
    "\u011f\001\002\000\170\004\uff38\005\uff38\006\uff38\007\uff38" +
    "\010\uff38\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\017" +
    "\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38" +
    "\026\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034" +
    "\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38" +
    "\043\uff38\044\uff38\046\uff38\050\uff38\051\uff38\060\uff38\063" +
    "\uff38\065\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072\uff38" +
    "\073\uff38\074\uff38\075\uff38\076\uff38\077\uff38\100\uff38\101" +
    "\uff38\137\uff38\140\uff38\141\uff38\157\uff38\165\uff38\205\uff38" +
    "\206\uff38\207\uff38\210\uff38\001\002\000\170\004\uff39\005" +
    "\uff39\006\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39" +
    "\014\uff39\015\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023" +
    "\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39" +
    "\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040" +
    "\uff39\041\uff39\042\uff39\043\uff39\044\uff39\046\uff39\050\uff39" +
    "\051\uff39\060\uff39\063\uff39\065\uff39\066\uff39\067\uff39\070" +
    "\uff39\071\uff39\072\uff39\073\uff39\074\uff39\075\uff39\076\uff39" +
    "\077\uff39\100\uff39\101\uff39\137\uff39\140\uff39\141\uff39\157" +
    "\uff39\165\uff39\205\uff39\206\uff39\207\uff39\210\uff39\001\002" +
    "\000\122\004\060\005\135\006\132\007\130\010\056\011" +
    "\154\012\077\013\054\014\125\017\140\020\163\022\164" +
    "\023\152\024\150\025\143\026\040\027\137\030\066\031" +
    "\050\032\123\033\160\034\076\035\074\036\072\037\113" +
    "\040\063\041\136\042\161\043\107\063\144\067\114\070" +
    "\145\071\046\072\044\073\042\074\156\075\122\076\043" +
    "\077\117\100\037\001\002\000\170\004\uff36\005\uff36\006" +
    "\uff36\007\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36" +
    "\015\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023\uff36\024" +
    "\uff36\025\uff36\026\uff36\027\uff36\030\uff36\031\uff36\032\uff36" +
    "\033\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041" +
    "\uff36\042\uff36\043\uff36\044\uff36\046\uff36\050\uff36\051\uff36" +
    "\060\uff36\063\uff36\065\uff36\066\uff36\067\uff36\070\uff36\071" +
    "\uff36\072\uff36\073\uff36\074\uff36\075\uff36\076\uff36\077\uff36" +
    "\100\uff36\101\uff36\137\uff36\140\uff36\141\uff36\157\uff36\165" +
    "\uff36\205\uff36\206\uff36\207\uff36\210\uff36\001\002\000\004" +
    "\175\u0129\001\002\000\170\004\060\005\135\006\132\007" +
    "\130\010\056\011\154\012\077\013\054\014\125\015\101" +
    "\017\140\020\163\021\162\022\164\023\152\024\150\025" +
    "\143\026\040\027\137\030\066\031\050\032\123\033\160" +
    "\034\076\035\074\036\072\037\113\040\063\041\136\042" +
    "\161\043\107\044\102\046\055\050\131\051\047\060\111" +
    "\063\144\065\020\066\106\067\114\070\145\071\046\072" +
    "\044\073\042\074\156\075\122\076\043\077\117\100\037" +
    "\101\157\137\061\140\126\141\100\157\121\165\147\205" +
    "\133\206\075\207\022\210\134\001\002\000\170\004\060" +
    "\005\135\006\132\007\130\010\056\011\154\012\077\013" +
    "\054\014\125\015\101\017\140\020\163\021\162\022\164" +
    "\023\152\024\150\025\143\026\040\027\137\030\066\031" +
    "\050\032\123\033\160\034\076\035\074\036\072\037\113" +
    "\040\063\041\136\042\161\043\107\044\102\046\055\050" +
    "\131\051\047\060\111\063\144\065\020\066\106\067\114" +
    "\070\145\071\046\072\044\073\042\074\156\075\122\076" +
    "\043\077\117\100\037\101\157\137\061\140\126\141\100" +
    "\157\121\165\147\205\133\206\075\207\022\210\134\001" +
    "\002\000\004\060\111\001\002\000\004\060\uff41\001\002" +
    "\000\004\170\u0127\001\002\000\176\004\uff43\005\uff43\006" +
    "\uff43\007\uff43\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43" +
    "\015\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024" +
    "\uff43\025\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032\uff43" +
    "\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041" +
    "\uff43\042\uff43\043\uff43\044\uff43\046\uff43\047\uff43\050\uff43" +
    "\051\uff43\052\uff43\060\uff43\063\uff43\064\uff43\065\uff43\066" +
    "\uff43\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43\074\uff43" +
    "\075\uff43\076\uff43\077\uff43\100\uff43\101\uff43\137\uff43\140" +
    "\uff43\141\uff43\157\uff43\165\uff43\205\uff43\206\uff43\207\uff43" +
    "\210\uff43\001\002\000\004\060\uff42\001\002\000\170\004" +
    "\uff37\005\uff37\006\uff37\007\uff37\010\uff37\011\uff37\012\uff37" +
    "\013\uff37\014\uff37\015\uff37\017\uff37\020\uff37\021\uff37\022" +
    "\uff37\023\uff37\024\uff37\025\uff37\026\uff37\027\uff37\030\uff37" +
    "\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037" +
    "\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37\046\uff37" +
    "\050\uff37\051\uff37\060\uff37\063\uff37\065\uff37\066\uff37\067" +
    "\uff37\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37\075\uff37" +
    "\076\uff37\077\uff37\100\uff37\101\uff37\137\uff37\140\uff37\141" +
    "\uff37\157\uff37\165\uff37\205\uff37\206\uff37\207\uff37\210\uff37" +
    "\001\002\000\004\175\u012b\001\002\000\004\176\u012c\001" +
    "\002\000\122\004\060\005\135\006\132\007\130\010\056" +
    "\011\154\012\077\013\054\014\125\017\140\020\163\022" +
    "\164\023\152\024\150\025\143\026\040\027\137\030\066" +
    "\031\050\032\123\033\160\034\076\035\074\036\072\037" +
    "\113\040\063\041\136\042\161\043\107\063\144\067\114" +
    "\070\145\071\046\072\044\073\042\074\156\075\122\076" +
    "\043\077\117\100\037\001\002\000\170\004\uff33\005\uff33" +
    "\006\uff33\007\uff33\010\uff33\011\uff33\012\uff33\013\uff33\014" +
    "\uff33\015\uff33\017\uff33\020\uff33\021\uff33\022\uff33\023\uff33" +
    "\024\uff33\025\uff33\026\uff33\027\uff33\030\uff33\031\uff33\032" +
    "\uff33\033\uff33\034\uff33\035\uff33\036\uff33\037\uff33\040\uff33" +
    "\041\uff33\042\uff33\043\uff33\044\uff33\046\uff33\050\uff33\051" +
    "\uff33\060\uff33\063\uff33\065\uff33\066\uff33\067\uff33\070\uff33" +
    "\071\uff33\072\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077" +
    "\uff33\100\uff33\101\uff33\137\uff33\140\uff33\141\uff33\157\uff33" +
    "\165\uff33\205\uff33\206\uff33\207\uff33\210\uff33\001\002\000" +
    "\170\004\uff35\005\uff35\006\uff35\007\uff35\010\uff35\011\uff35" +
    "\012\uff35\013\uff35\014\uff35\015\uff35\017\uff35\020\uff35\021" +
    "\uff35\022\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35" +
    "\030\uff35\031\uff35\032\uff35\033\uff35\034\uff35\035\uff35\036" +
    "\uff35\037\uff35\040\uff35\041\uff35\042\uff35\043\uff35\044\uff35" +
    "\046\uff35\050\uff35\051\uff35\060\uff35\063\uff35\065\uff35\066" +
    "\uff35\067\uff35\070\uff35\071\uff35\072\uff35\073\uff35\074\uff35" +
    "\075\uff35\076\uff35\077\uff35\100\uff35\101\uff35\137\uff35\140" +
    "\uff35\141\uff35\157\uff35\165\uff35\205\uff35\206\uff35\207\uff35" +
    "\210\uff35\001\002\000\004\175\u0130\001\002\000\004\176" +
    "\u012c\001\002\000\170\004\uff34\005\uff34\006\uff34\007\uff34" +
    "\010\uff34\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34\017" +
    "\uff34\020\uff34\021\uff34\022\uff34\023\uff34\024\uff34\025\uff34" +
    "\026\uff34\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\034" +
    "\uff34\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042\uff34" +
    "\043\uff34\044\uff34\046\uff34\050\uff34\051\uff34\060\uff34\063" +
    "\uff34\065\uff34\066\uff34\067\uff34\070\uff34\071\uff34\072\uff34" +
    "\073\uff34\074\uff34\075\uff34\076\uff34\077\uff34\100\uff34\101" +
    "\uff34\137\uff34\140\uff34\141\uff34\157\uff34\165\uff34\205\uff34" +
    "\206\uff34\207\uff34\210\uff34\001\002\000\004\176\u0133\001" +
    "\002\000\122\004\060\005\135\006\132\007\130\010\056" +
    "\011\154\012\077\013\054\014\125\017\140\020\163\022" +
    "\164\023\152\024\150\025\143\026\040\027\137\030\066" +
    "\031\050\032\123\033\160\034\076\035\074\036\072\037" +
    "\113\040\063\041\136\042\161\043\107\063\144\067\114" +
    "\070\145\071\046\072\044\073\042\074\156\075\122\076" +
    "\043\077\117\100\037\001\002\000\004\166\uff3c\001\002" +
    "\000\004\166\uff3a\001\002\000\004\176\u0133\001\002\000" +
    "\004\166\uff3b\001\002\000\004\170\ufff9\001\002\000\004" +
    "\170\ufffa\001\002\000\200\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\060\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\137\uffd2\140\uffd2\141" +
    "\uffd2\157\uffd2\165\uffd2\175\uffd2\205\uffd2\206\uffd2\207\uffd2" +
    "\210\uffd2\001\002\000\070\142\uff53\143\uff53\144\uff53\145" +
    "\uff53\146\uff53\147\uff53\150\uff53\151\uff53\152\uff53\153\uff53" +
    "\154\uff53\155\uff53\156\uff53\160\uff53\161\uff53\162\uff53\163" +
    "\uff53\164\uff53\165\uff53\171\uff53\172\uff53\177\uff53\200\uff53" +
    "\201\uff53\202\uff53\203\uff53\204\uff53\001\002\000\004\170" +
    "\ufffc\001\002\000\004\101\u013e\001\002\000\004\165\u013f" +
    "\001\002\000\002\001\002\000\004\166\u0141\001\002\000" +
    "\004\175\u0142\001\002\000\176\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\060\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\137\uffdc\140\uffdc" +
    "\141\uffdc\157\uffdc\165\uffdc\205\uffdc\206\uffdc\207\uffdc\210" +
    "\uffdc\001\002\000\004\167\u0144\001\002\000\122\004\060" +
    "\005\135\006\132\007\130\010\056\011\154\012\077\013" +
    "\054\014\125\017\140\020\163\022\164\023\152\024\150" +
    "\025\143\026\040\027\137\030\066\031\050\032\123\033" +
    "\160\034\076\035\074\036\072\037\113\040\063\041\136" +
    "\042\161\043\107\063\144\067\114\070\145\071\046\072" +
    "\044\073\042\074\156\075\122\076\043\077\117\100\037" +
    "\001\002\000\004\175\u0146\001\002\000\004\176\u0147\001" +
    "\002\000\122\004\060\005\135\006\132\007\130\010\056" +
    "\011\154\012\077\013\054\014\125\017\140\020\163\022" +
    "\164\023\152\024\150\025\143\026\040\027\137\030\066" +
    "\031\050\032\123\033\160\034\076\035\074\036\072\037" +
    "\113\040\063\041\136\042\161\043\107\063\144\067\114" +
    "\070\145\071\046\072\044\073\042\074\156\075\122\076" +
    "\043\077\117\100\037\001\002\000\004\170\u014a\001\002" +
    "\000\004\170\uff44\001\002\000\176\004\uff46\005\uff46\006" +
    "\uff46\007\uff46\010\uff46\011\uff46\012\uff46\013\uff46\014\uff46" +
    "\015\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024" +
    "\uff46\025\uff46\026\uff46\027\uff46\030\uff46\031\uff46\032\uff46" +
    "\033\uff46\034\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041" +
    "\uff46\042\uff46\043\uff46\044\uff46\046\uff46\047\uff46\050\uff46" +
    "\051\uff46\052\uff46\060\uff46\063\uff46\064\uff46\065\uff46\066" +
    "\uff46\067\uff46\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46" +
    "\075\uff46\076\uff46\077\uff46\100\uff46\101\uff46\137\uff46\140" +
    "\uff46\141\uff46\157\uff46\165\uff46\205\uff46\206\uff46\207\uff46" +
    "\210\uff46\001\002\000\004\175\u014c\001\002\000\004\176" +
    "\u0147\001\002\000\004\170\uff45\001\002\000\004\167\u014f" +
    "\001\002\000\006\065\020\207\022\001\002\000\004\176" +
    "\u0153\001\002\000\004\170\u0152\001\002\000\176\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\060\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef" +
    "\137\uffef\140\uffef\141\uffef\157\uffef\165\uffef\205\uffef\206" +
    "\uffef\207\uffef\210\uffef\001\002\000\006\065\020\207\022" +
    "\001\002\000\004\170\uffee\001\002\000\004\170\uffec\001" +
    "\002\000\004\176\u0153\001\002\000\004\170\uffed\001\002" +
    "\000\154\004\060\005\135\006\132\007\130\010\056\011" +
    "\154\012\077\013\054\014\125\017\140\020\163\022\164" +
    "\023\152\024\150\025\143\026\040\027\137\030\066\031" +
    "\050\032\123\033\160\034\076\035\074\036\072\037\113" +
    "\040\063\041\136\042\161\043\107\050\131\063\144\065" +
    "\020\066\106\067\114\070\145\071\046\072\044\073\042" +
    "\074\156\075\122\076\043\077\117\100\037\137\061\140" +
    "\126\141\100\157\121\165\147\175\u0159\205\133\206\075" +
    "\207\022\210\134\001\002\000\034\050\uffd9\065\uffd9\066" +
    "\uffd9\137\uffd9\140\uffd9\141\uffd9\157\uffd9\165\uffd9\175\uffd9" +
    "\205\uffd9\206\uffd9\207\uffd9\210\uffd9\001\002\000\034\050" +
    "\uffda\065\uffda\066\uffda\137\uffda\140\uffda\141\uffda\157\uffda" +
    "\165\uffda\175\uffda\205\uffda\206\uffda\207\uffda\210\uffda\001" +
    "\002\000\034\050\131\065\020\066\106\137\061\140\126" +
    "\141\100\157\121\165\147\175\u015c\205\133\206\075\207" +
    "\022\210\134\001\002\000\032\050\uffd7\065\uffd7\066\uffd7" +
    "\137\uffd7\140\uffd7\141\uffd7\157\uffd7\165\uffd7\205\uffd7\206" +
    "\uffd7\207\uffd7\210\uffd7\001\002\000\032\050\uffd8\065\uffd8" +
    "\066\uffd8\137\uffd8\140\uffd8\141\uffd8\157\uffd8\165\uffd8\205" +
    "\uffd8\206\uffd8\207\uffd8\210\uffd8\001\002\000\032\050\131" +
    "\065\020\066\106\137\061\140\126\141\100\157\121\165" +
    "\147\205\133\206\075\207\022\210\134\001\002\000\004" +
    "\166\uffd5\001\002\000\004\166\uffd6\001\002\000\004\166" +
    "\u0162\001\002\000\004\167\172\001\002\000\176\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\060\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb" +
    "\137\uffdb\140\uffdb\141\uffdb\157\uffdb\165\uffdb\205\uffdb\206" +
    "\uffdb\207\uffdb\210\uffdb\001\002\000\004\170\ufffb\001\002" +
    "\000\020\165\ufff6\166\ufff6\167\ufff6\172\ufff6\175\ufff6\176" +
    "\ufff6\177\ufff6\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\015\004\016\005\013\001\001\000\010\002\015\004\u0165" +
    "\005\013\001\001\000\004\007\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\u0164\001\001\000\002" +
    "\001\001\000\010\002\025\103\023\106\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\027\001\001" +
    "\000\002\001\001\000\006\002\031\105\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\002\152\006\145\007" +
    "\140\010\056\011\040\012\066\013\067\016\117\017\114" +
    "\022\103\023\107\024\063\025\126\030\102\031\123\032" +
    "\154\033\111\036\035\037\061\040\115\042\064\044\050" +
    "\045\104\052\072\060\141\061\044\111\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\002\152\006\u0163\007\140\010\056\011\040\012\066\013" +
    "\067\016\117\017\114\022\103\023\107\024\063\025\126" +
    "\030\102\031\123\032\154\033\111\036\035\037\061\040" +
    "\115\042\064\044\050\045\104\052\072\060\141\061\044" +
    "\111\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u014d\001\001\000\004\007\u0142\001\001\000\002\001\001" +
    "\000\004\026\u013c\001\001\000\002\001\001\000\070\002" +
    "\152\006\u013b\007\140\010\056\011\040\012\066\013\067" +
    "\016\117\017\114\022\103\023\107\024\063\025\126\030" +
    "\102\031\123\032\154\033\111\036\035\037\061\040\115" +
    "\042\064\044\050\045\104\052\072\060\141\061\044\111" +
    "\150\001\001\000\002\001\001\000\006\002\214\062\u013a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\002\152" +
    "\006\u0138\007\140\010\056\011\040\012\066\013\067\016" +
    "\117\017\114\022\103\023\107\024\063\025\126\030\102" +
    "\031\123\032\154\033\111\036\035\037\061\040\115\042" +
    "\064\044\050\045\104\052\072\060\141\061\044\111\150" +
    "\001\001\000\070\002\152\006\u0137\007\140\010\056\011" +
    "\040\012\066\013\067\016\117\017\114\022\103\023\107" +
    "\024\063\025\126\030\102\031\123\032\154\033\111\036" +
    "\035\037\061\040\115\042\064\044\050\045\104\052\072" +
    "\060\141\061\044\111\150\001\001\000\004\007\u0104\001" +
    "\001\000\002\001\001\000\042\002\224\051\242\054\260" +
    "\055\274\056\263\057\235\110\255\112\u0103\113\252\115" +
    "\251\116\247\117\246\120\245\121\240\122\236\123\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\224\051\242\054\260" +
    "\055\274\056\263\057\235\110\255\112\u0102\113\252\115" +
    "\251\116\247\117\246\120\245\121\240\122\236\123\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\365\007" +
    "\140\041\366\042\367\052\072\060\141\061\044\111\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\355\101\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\002\224\051" +
    "\242\054\260\055\274\056\263\057\235\110\255\112\253" +
    "\113\252\115\251\116\247\117\246\120\245\121\240\122" +
    "\236\123\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\214\062" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\214\062\222\001" +
    "\001\000\006\002\214\062\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\204\053\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\140\052\072\060\141\061\044\111\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\166\001\001\000" +
    "\002\001\001\000\004\026\170\001\001\000\002\001\001" +
    "\000\062\002\174\007\140\011\173\016\117\017\114\022" +
    "\103\023\107\024\063\025\126\027\172\030\102\031\123" +
    "\032\154\033\111\036\035\037\061\040\115\042\064\044" +
    "\050\045\104\052\072\060\141\061\044\111\150\001\001" +
    "\000\002\001\001\000\062\002\174\007\140\011\173\016" +
    "\117\017\114\022\103\023\107\024\063\025\126\027\175" +
    "\030\102\031\123\032\154\033\111\036\035\037\061\040" +
    "\115\042\064\044\050\045\104\052\072\060\141\061\044" +
    "\111\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\350\001\001\000\014\007\140\052" +
    "\072\060\141\061\044\111\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\345\001\001\000\022\002" +
    "\330\007\327\042\331\050\332\052\072\060\141\061\044" +
    "\111\150\001\001\000\014\007\140\052\072\060\141\061" +
    "\044\111\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\325\001\001\000\010\054\324\055\274\056" +
    "\263\001\001\000\002\001\001\000\004\020\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\140\052\072\060\141\061\044" +
    "\111\314\001\001\000\014\007\140\052\072\060\141\061" +
    "\044\111\313\001\001\000\002\001\001\000\014\007\140" +
    "\052\072\060\141\061\044\111\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\277\007\140\042\300\047\301\052\072\060\141" +
    "\061\044\111\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\302\001\001\000\002\001\001\000\022\002\277" +
    "\007\140\042\300\047\305\052\072\060\141\061\044\111" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\277\007\140\042\300\047\310\052" +
    "\072\060\141\061\044\111\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\321\001\001\000\016\007\140\042" +
    "\322\052\072\060\141\061\044\111\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\343\053\203\107\344" +
    "\001\001\000\002\001\001\000\006\002\336\107\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\337" +
    "\042\340\052\072\060\141\061\044\111\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\343\053\203" +
    "\107\342\001\001\000\006\002\336\107\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\360\020" +
    "\357\102\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\025\051" +
    "\321\103\023\106\022\001\001\000\010\007\360\020\357" +
    "\102\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\373\001\001\000\002\001\001\000" +
    "\004\026\375\001\001\000\006\002\u0100\043\377\001\001" +
    "\000\004\026\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\u0106\016\u010b\017\114\022" +
    "\103\023\107\024\063\025\126\065\u0108\066\u010a\067\u0109" +
    "\001\001\000\002\001\001\000\016\016\u0131\017\114\022" +
    "\103\023\107\024\063\025\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\u0112\021\u010e\074\u010f\075\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\u0116\076\u0113\077" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u0118\022\103\023\107" +
    "\024\063\025\126\001\001\000\004\007\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\u011c\016\u0120" +
    "\017\114\022\103\023\107\024\063\025\126\070\u0121\071" +
    "\u011d\072\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\u0129\017\114\022\103\023\107\024\063\025" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\002\u0124\007\140\011\u0122\016\117\017\114\022\103\023" +
    "\107\024\063\025\126\030\102\031\123\032\154\033\111" +
    "\036\035\037\061\040\115\042\064\044\050\045\104\052" +
    "\072\060\141\061\044\064\u0123\111\150\001\001\000\062" +
    "\002\u0124\007\140\011\u0122\016\117\017\114\022\103\023" +
    "\107\024\063\025\126\030\102\031\123\032\154\033\111" +
    "\036\035\037\061\040\115\042\064\044\050\045\104\052" +
    "\072\060\141\061\044\064\u0127\111\150\001\001\000\004" +
    "\040\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\u012c\073\u012d\001\001\000\016\016" +
    "\u012e\017\114\022\103\023\107\024\063\025\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\u012c\073\u0130\001\001\000\002\001\001\000\006" +
    "\002\u0134\124\u0133\001\001\000\016\016\u0135\017\114\022" +
    "\103\023\107\024\063\025\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\u0134\124\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u013f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\u0144\017\114\022\103\023\107\024\063" +
    "\025\126\001\001\000\002\001\001\000\006\002\u0148\063" +
    "\u0147\001\001\000\016\016\u014a\017\114\022\103\023\107" +
    "\024\063\025\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\u0148" +
    "\063\u014c\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\u014f\014\u0150\001\001\000\006\002\u0154\015\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\u0154\015\u0156\001\001\000\002\001\001\000\040\007" +
    "\140\016\117\017\114\022\103\023\107\024\063\025\126" +
    "\034\u015a\042\064\044\u0159\045\104\052\072\060\141\061" +
    "\044\111\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\140\035\u015d\042\064\045\u015c\052\072\060" +
    "\141\061\044\111\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\u015e\007\140\042\u015f\052\072\060" +
    "\141\061\044\100\u0160\111\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<SError> SEList = new LinkedList<SError>(); //SYNTAX ERROR LIST
    //public static String ultimoToken;
    private Symbol s;

    public Parser (LexerC scanner) {
        super(scanner);
    }

    //metodo de llamado automatico al error que es recuperable
    public void syntax_error(Symbol s){
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;

        if((column - lexeme.length())<=0){
            column = 0;
        }

        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token inválido después de linea: " + line + " Columna: "+ column);
        SEList.add(dato);
    }

    //metodo que se llama cuando ya no es recuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token no esperado"); 
        SEList.add(dato);
    }
    
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Res_Pragma Res_Solidity Potencia Flotante Flotante PuntoYComa CONTRACT_INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTRACT_INICIO ::= CONTRACT CONTRACT_INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT_INICIO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRACT_INICIO ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT_INICIO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRACT ::= Res_Contract IDENT AbreLlave CUERPO_CONTRATO CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTRACT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_CONTRATO ::= ENUM CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_CONTRATO ::= SENTENCIA CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_CONTRATO ::= STRUCT CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_CONTRATO ::= FUNCION CUERPO_CONTRATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_CONTRATO ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTRATO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENT ::= Identificador IDENT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENT ::= Res_This IDENT_AUX_THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENT_AUX ::= IDENT_AUX_THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDENT_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENT_AUX2 ::= Identificador IDENT_AUX3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDENT_AUX3 ::= AbreParentesis CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX3",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDENT_AUX3 ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX3",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDENT_AUX_THIS ::= Punto IDENT_AUX2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT_AUX_THIS",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENUM ::= Res_Enum IDENT AbreLlave CUERPO_ENUM CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENUM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_ENUM ::= IDENT CUERPO_ENUM_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_ENUM_AUX ::= Coma IDENT CUERPO_ENUM_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM_AUX",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_ENUM_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_ENUM_AUX",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE ::= AbreLlave SENTENCIA_BLOQUE CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BLOQUE ::= SENTENCIA SENTENCIA_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BLOQUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BLOQUE ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BLOQUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= WHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DOWHILE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= CONTINUE_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= BREAK_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= RETURN_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_SENTENCIA ::= Res_If AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSE ::= Res_Else BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSE ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE_SENTENCIA ::= Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENTENCIA",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DOWHILE_SENTENCIA ::= Res_Do BLOQUE Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR_SENTENCIA ::= Res_For AbreParentesis ASSIGNMENT_FOR EXPRESSION_FOR_UNO EXPRESSION_FOR_DOS CierraParentesis BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASSIGNMENT_FOR ::= SENTENCIA_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_FOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGNMENT_FOR ::= PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_FOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSION_FOR_UNO ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_UNO",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSION_FOR_UNO ::= PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_UNO",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSION_FOR_DOS ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_DOS",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSION_FOR_DOS ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_FOR_DOS",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BASE ::= VARIABLE PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BASE ::= EXPRESSION_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSION_SENTENCIA ::= EXPRESSION PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_SENTENCIA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTINUE_SENTENCIA ::= Res_Continue PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE_SENTENCIA",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BREAK_SENTENCIA ::= Res_Break PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_SENTENCIA",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETURN_SENTENCIA ::= Res_Return RETURN_SENTENCIA_AUX PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RETURN_SENTENCIA_AUX ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETURN_SENTENCIA_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCIA_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLE ::= VAR_TYPE VARIABLE_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLE_AUX ::= PRIVACY VARIABLE_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLE_AUX ::= AbreCorchete CierraCorchete VARIABLE_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLE_AUX_AUX ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX_AUX",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLE_AUX_AUX ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_AUX_AUX",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR_TYPE ::= Res_Bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR_TYPE ::= BYTE_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAR_TYPE ::= BYTE_TYPES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAR_TYPE ::= Res_Address 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR_TYPE ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAR_TYPE ::= UINT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAR_TYPE ::= Res_String 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAR_TYPE ::= Res_Ufixed 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_TYPE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIGNMENT ::= Identificador ASSIGNMENT_AUX EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASSIGNMENT_AUX ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASSIGNMENT_AUX ::= Sume 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASSIGNMENT_AUX ::= Reste 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASSIGNMENT_AUX ::= Multiplique 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASSIGNMENT_AUX ::= Divida 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_AUX",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRIVACY ::= Res_Public 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIVACY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRIVACY ::= Res_Private 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIVACY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BYTE_TYPE ::= Res_Byte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BYTE_TYPE ::= Res_Byte2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BYTE_TYPE ::= Res_Byte4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BYTE_TYPE ::= Res_Byte8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BYTE_TYPE ::= Res_Byte16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BYTE_TYPE ::= Res_Byte32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BYTE_TYPE ::= Res_Byte64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BYTE_TYPE ::= Res_Byte128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BYTE_TYPE ::= Res_Byte256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INT_TYPE ::= Res_Int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INT_TYPE ::= Res_Int2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INT_TYPE ::= Res_Int4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INT_TYPE ::= Res_Int8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INT_TYPE ::= Res_Int16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INT_TYPE ::= Res_Int32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INT_TYPE ::= Res_Int64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INT_TYPE ::= Res_Int128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INT_TYPE ::= Res_Int256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // UINT_TYPE ::= Res_Uint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // UINT_TYPE ::= Res_Uint2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UINT_TYPE ::= Res_Uint4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // UINT_TYPE ::= Res_Uint8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // UINT_TYPE ::= Res_Uint16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // UINT_TYPE ::= Res_Uint32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // UINT_TYPE ::= Res_Uint64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // UINT_TYPE ::= Res_Uint128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UINT_TYPE ::= Res_Uint256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UINT_TYPE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BYTE_TYPES ::= Res_Bytes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BYTE_TYPES ::= Res_Bytes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BYTE_TYPES ::= Res_Bytes4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BYTE_TYPES ::= Res_Bytes8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BYTE_TYPES ::= Res_Bytes16 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BYTE_TYPES ::= Res_Bytes32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BYTE_TYPES ::= Res_Bytes64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BYTE_TYPES ::= Res_Bytes128 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BYTE_TYPES ::= Res_Bytes256 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BYTE_TYPES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESSION ::= AbreParentesis EXP1 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESSION ::= EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP1 ::= NotLogico EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP1 ::= NotBits EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP1 ::= EXPRESSION_PRIMARIA EXP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP1",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP2 ::= EXP3 AbreCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP2 ::= EXP4 Punto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP2 ::= EXP5 AbreParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP2 ::= EXP6 OP_ARITMETICO_PRIMER_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP2 ::= EXP7 OP_BIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP2 ::= EXP8 OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP2 ::= EXP9 Interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP2 ::= EXP10 ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP2 ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP3 ::= AbreCorchete EXPRESSION_AUX EXP3_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP3_2 ::= DosPuntos EXPRESSION_AUX CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3_2",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP3_2 ::= CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP3_2",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP4 ::= Punto IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP4",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP5 ::= AbreParentesis ARGUMENTS_EXPRESSION CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP5",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP6 ::= OP_ARITMETICO_PRIMER_ORDEN EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP6",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP7 ::= OP_BIT EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP7",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP8 ::= OP_BOOLEANO EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP8",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP9 ::= Interrogacion EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP9",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP10 ::= ASSIGNMENT_AUX EXP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP10",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESSION_AUX ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESSION_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_BIT ::= CorrerALaDerecha 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_BIT ::= CorrerALaIzquierda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_BIT ::= AndBits 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_BIT ::= OrBits 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BIT",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_ARITMETICO_PRIMER_ORDEN ::= Potencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_PRIMER_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_ARITMETICO_PRIMER_ORDEN ::= OP_ARITMETICO_SEGUNDO_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_PRIMER_ORDEN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_ARITMETICO_SEGUNDO_ORDEN ::= Porcentaje 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_ARITMETICO_SEGUNDO_ORDEN ::= OP_ARITMETICO_TERCER_ORDEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_SEGUNDO_ORDEN",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_ARITMETICO_TERCER_ORDEN ::= Suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_TERCER_ORDEN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_ARITMETICO_TERCER_ORDEN ::= Resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO_TERCER_ORDEN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_BOOLEANO ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_BOOLEANO ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_BOOLEANO ::= MenorOIgualQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_BOOLEANO ::= MayorOIgualQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_BOOLEANO ::= Comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_BOOLEANO ::= Diferencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_BOOLEANO ::= AndLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_BOOLEANO ::= OrLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_BOOLEANO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ARGUMENTS_EXPRESSION ::= IDENT ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ARGUMENTS_EXPRESSION ::= EXPRESSION ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ARGUMENTS_EXPRESSION ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ARGUMENTS_EXPRESSION_AUX ::= Coma IDENT ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ARGUMENTS_EXPRESSION_AUX ::= Coma EXPRESSION ARGUMENTS_EXPRESSION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ARGUMENTS_EXPRESSION_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_EXPRESSION_AUX",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESSION_PRIMARIA ::= LITERAL_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESSION_PRIMARIA ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESSION_PRIMARIA ::= Cientifico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESSION_PRIMARIA ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESSION_PRIMARIA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESSION_PRIMARIA ::= IDENT EXPRESSION_PRIMARIA_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESSION_PRIMARIA_AUX ::= AbreCorchete CierraCorchete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA_AUX",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESSION_PRIMARIA_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_PRIMARIA_AUX",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LITERAL_BOOLEANO ::= Res_True 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // LITERAL_BOOLEANO ::= Res_False 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // LITERAL_NUMERICO ::= Numero LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LITERAL_NUMERICO ::= Hexadecimal LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LITERAL_NUMERICO ::= Cientifico LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LITERAL_NUMERICO ::= Flotante LITERAL_NUMERICO_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // LITERAL_NUMERICO_AUX ::= Unit_Days 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LITERAL_NUMERICO_AUX ::= Unit_Ether 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LITERAL_NUMERICO_AUX ::= Unit_Finney 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LITERAL_NUMERICO_AUX ::= Unit_Hours 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LITERAL_NUMERICO_AUX ::= Unit_Minutes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // LITERAL_NUMERICO_AUX ::= Unit_Seconds 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LITERAL_NUMERICO_AUX ::= Unit_Szabo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // LITERAL_NUMERICO_AUX ::= Unit_Weeks 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // LITERAL_NUMERICO_AUX ::= Unit_Wei 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // LITERAL_NUMERICO_AUX ::= Unit_Years 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // LITERAL_NUMERICO_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO_AUX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // STRUCT ::= Res_Struct IDENT AbreLlave VARIABLE PuntoYComa STRUCT_AUX CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // STRUCT_AUX ::= Coma VARIABLE PuntoYComa STRUCT_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_AUX",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // STRUCT_AUX ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_AUX",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // FUNCION ::= Res_Function IDENT AbreParentesis PARAM_LIST CierraParentesis MODS RETURNS_FUNCTION AbreLlave VAR_LIST CUERPO_FUNCION RETURN_SENTENCIA CierraLlave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CUERPO_FUNCION ::= SENTENCIA CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CUERPO_FUNCION ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PARAM_LIST ::= PARAM_LIST_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // PARAM_LIST ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // PARAM_LIST_AUX ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // PARAM_LIST_AUX ::= PARAM_LIST_AUX_HELP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // PARAM_LIST_AUX_HELP ::= Coma VARIABLE PARAM_LIST_AUX_HELP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // PARAM_LIST_AUX_HELP2 ::= Coma VARIABLE PARAM_LIST_AUX_HELP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP2",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PARAM_LIST_AUX_HELP2 ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST_AUX_HELP2",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // VAR_LIST ::= VAR_LIST_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // VAR_LIST ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // VAR_LIST_AUX ::= VARIABLE PuntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // VAR_LIST_AUX ::= VAR_LIST_AUX_HELP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // VAR_LIST_AUX_HELP1 ::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // VAR_LIST_AUX_HELP2 ::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // VAR_LIST_AUX_HELP2 ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST_AUX_HELP2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // MODS ::= MOD_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODS",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // MODS ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODS",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // MOD_LIST ::= Res_Payable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // MOD_LIST ::= PRIVACY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // MOD_LIST ::= Res_Internal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOD_LIST",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // RETURNS_FUNCTION ::= RETURNS_FUNCTION_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // RETURNS_FUNCTION ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // RETURNS_FUNCTION_AUX ::= Res_Returns AbreParentesis VAR_TYPE IDENT CierraParentesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNS_FUNCTION_AUX",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
