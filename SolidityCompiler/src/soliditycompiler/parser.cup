/*CODIGO DE LA CLASE*/
package soliditycompiler;

import java_cup.runtime.Symbol;
import soliditycompiler.LexerC.*;
import java.util.LinkedList;

parser code
{:
    public static LinkedList<SError> SEList = new LinkedList<SError>(); //SYNTAX ERROR LIST
    //public static String ultimoToken;
    private Symbol s;

    public Parser (LexerC scanner) {
        super(scanner);
    }

    //metodo de llamado automatico al error que es recuperable
    public void syntax_error(Symbol s){
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;

        if((column - lexeme.length())<=0){
            column = 0;
        }

        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token inválido");
        SEList.add(dato);
    }

    //metodo que se llama cuando ya no es recuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token no esperado"); 
        SEList.add(dato);
    }
    
    public Symbol getS(){
        return this.s;
    }
:};


/*DEFINICION TERMINALES*/
terminal java_cup.runtime.symbol empty;


terminal Res_Int, Res_Int2, Res_Int4, Res_Int8, Res_Int16, Res_Int32, Res_Int64, Res_Int128, Res_Int256, Res_If, Res_Else, Res_Address, Res_Bool, Res_Break,
        Res_Bytes, Res_Bytes2, Res_Bytes4, Res_Bytes8, Res_Bytes16, Res_Bytes32, Res_Bytes64, Res_Bytes128, Res_Bytes256, Res_Byte, Res_Byte2, Res_Byte4, Res_Byte8,
        Res_Byte16, Res_Byte32, Res_Byte64, Res_Byte128, Res_Byte256, Res_Continue, Res_Contract, Res_Do, Res_Enum, Res_False, Res_For, Res_Function, Res_Internal, Res_Payable, Res_Pragma, Res_Private, Res_Public, Res_Return, Res_Returns,
        Res_Solidity, Res_String, Res_Struct, Res_This, Res_True, Res_Ufixed, Res_Uint, Res_Uint2, Res_Uint4, Res_Uint8, Res_Uint16, Res_Uint32, Res_Uint64, Res_Uint128,
        Res_Uint256, Res_While, Unit_Days, Unit_Ether,

        Res_Moddifier,Res_Constructor,Trans_Callcode,Trans_Call,Trans_Send,Trans_Balance, Res_View, Res_Delete, Trans_Transfer, Trans_Delgatecall, Res_Mapping, Res_Import,
        Res_As, Error, Comillas, ComentarioBloque, Res_Var, Res_From, Escape,


        Unit_Finney, Unit_Hours, Unit_Minutes, Unit_Seconds, Unit_Szabo, Unit_Weeks, Unit_Wei, Unit_Years, Cientifico, Flotante, NotLogico, AndLogico,
        Potencia, Comparacion, Diferencia, OrLogico, MenorOIgualQue, CorrerALaIzquierda, CorrerALaDerecha, MenorQue, MayorOIgualQue, MayorQue, AndBits, OrBits, NotBits,
        Porcentaje, Sume, Reste, Multiplique, Divida, AbreParentesis, CierraParentesis, AbreLlave, CierraLlave, Interrogacion, AbreCorchete, CierraCorchete, DosPuntos,
        PuntoYComa, Coma, Punto, Asignacion, Suma, Resta, Multiplicacion, Division, Hexadecimal, Cadena, Identificador, Numero; 

/*DEFINICION NO TERMINALES*/

non terminal INICIO, CONTRACT_INICIO, CONTRACT, CUERPO_CONTRATO,IDENT, ENUM, SENTENCIA, STRUCT, FUNCION, CUERPO_ENUM, CUERPO_ENUM_AUX, VARIABLE, VAR_TYPE,
             ASSIGNMENT, PRIVACY, BYTE_TYPE, INT_TYPE, UINT_TYPE, BYTE_TYPES, BLOQUE, SENTENCIA_BLOQUE, IF_SENTENCIA, WHILE_SENTENCIA, 
             DOWHILE_SENTENCIA, FOR_SENTENCIA, ASSIGNMENT_FOR, EXPRESSION_FOR_UNO, CONTINUE_SENTENCIA, BREAK_SENTENCIA, RETURN_SENTENCIA, RETURN_SENTENCIA_AUX, EXPRESSION, ELSE, SENTENCIA_BASE, EXPRESSION_SENTENCIA,
             BOOLEAN_EXPRESSION, EXPRESSION_AUX, ARGUMENTS_EXPRESSION, ASSIGNMENT_AUX, EXPRESSION_PRIMARIA, EXPRESSION_PRIMARIA_AUX, OP_ARITMETICO_PRIMER_ORDEN, 
             OP_ARITMETICO_SEGUNDO_ORDEN, OP_ARITMETICO_TERCER_ORDEN, OP_BOOLEANO, LITERAL_BOOLEANO, LITERAL_NUMERICO, LITERAL_NUMERICO_AUX, STRUCT_AUX, CUERPO_FUNCION, PARAM_LIST, PARAM_LIST_AUX, PARAM_LIST_AUX_HELP,
             VAR_LIST, VAR_LIST_AUX, VAR_LIST_AUX_HELP1, VAR_LIST_AUX_HELP2, MODS, MOD_LIST, RETURNS_FUNCTION, RETURNS_FUNCTION_AUX, EXPRESSION_FOR_DOS, VARIABLE_AUX,
             VARIABLE_AUX_AUX, IDENT_AUX, IDENT_AUX2, IDENT_AUX3, IDENT_AUX_THIS, ARGUMENTS_EXPRESSION_AUX, OP_BIT, EXP1,EXP2,EXP3,EXP3_2,EXP4,EXP5,EXP6,EXP7,EXP8,EXP9,EXP10,PARAM_LIST_AUX_HELP2
;

start with INICIO;

/*REGLAS*/

INICIO ::= Res_Pragma Res_Solidity Potencia Flotante Flotante PuntoYComa CONTRACT_INICIO
;

CONTRACT_INICIO ::= CONTRACT CONTRACT_INICIO | 
;

CONTRACT ::= Res_Contract IDENT AbreLlave IF_SENTENCIA CierraLlave 
;

CUERPO_CONTRATO ::= ENUM CUERPO_CONTRATO|
                    SENTENCIA CUERPO_CONTRATO|
                    STRUCT CUERPO_CONTRATO|
                    FUNCION CUERPO_CONTRATO |
;

IDENT::= Identificador IDENT_AUX | Res_This IDENT_AUX_THIS
;

IDENT_AUX::= IDENT_AUX_THIS | 
;

IDENT_AUX2::= Identificador IDENT_AUX3
;

IDENT_AUX3::= AbreParentesis CierraParentesis | 
;

IDENT_AUX_THIS::= Punto IDENT_AUX2
;

/*
IDENT::=  Identificador 
        | Identificador Punto Identificador 
        | Res_This Punto Identificador 
        | Identificador Punto Identificador AbreParentesis CierraParentesis 
        | Res_This Punto Identificador AbreParentesis CierraParentesis
;*/


ENUM ::= Res_Enum IDENT AbreLlave CUERPO_ENUM CierraLlave
;

CUERPO_ENUM ::= IDENT CUERPO_ENUM_AUX
;

CUERPO_ENUM_AUX ::= Coma IDENT CUERPO_ENUM_AUX | 
;

BLOQUE ::= AbreLlave SENTENCIA_BLOQUE CierraLlave
;

SENTENCIA_BLOQUE ::= SENTENCIA SENTENCIA_BLOQUE | 
;

SENTENCIA ::= IF_SENTENCIA | 
              WHILE_SENTENCIA | 
              DOWHILE_SENTENCIA | 
              FOR_SENTENCIA |
              CONTINUE_SENTENCIA |
              BREAK_SENTENCIA |
              RETURN_SENTENCIA |
              SENTENCIA_BASE
;

IF_SENTENCIA ::= Res_If AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE ELSE 
;

ELSE ::= Res_Else BLOQUE | 
;

WHILE_SENTENCIA ::= Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis BLOQUE 
;

DOWHILE_SENTENCIA ::= Res_Do BLOQUE Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis PuntoYComa
;

FOR_SENTENCIA ::= Res_For AbreParentesis ASSIGNMENT_FOR EXPRESSION_FOR_UNO EXPRESSION_FOR_DOS CierraParentesis BLOQUE
;

ASSIGNMENT_FOR ::= SENTENCIA_BASE | PuntoYComa
;

EXPRESSION_FOR_UNO ::= EXPRESSION_SENTENCIA | PuntoYComa
;

EXPRESSION_FOR_DOS ::= EXPRESSION |
;

SENTENCIA_BASE ::= VARIABLE PuntoYComa |
                   EXPRESSION_SENTENCIA
;

EXPRESSION_SENTENCIA ::=  EXPRESSION PuntoYComa
;

CONTINUE_SENTENCIA ::= Res_Continue PuntoYComa
;

BREAK_SENTENCIA ::= Res_Break PuntoYComa
;
 
RETURN_SENTENCIA ::= Res_Return RETURN_SENTENCIA_AUX PuntoYComa
;

RETURN_SENTENCIA_AUX ::= EXPRESSION | 
;

VARIABLE ::= VAR_TYPE VARIABLE_AUX
;

VARIABLE_AUX ::= PRIVACY VARIABLE_AUX_AUX | 
                AbreCorchete CierraCorchete VARIABLE_AUX_AUX
;

VARIABLE_AUX_AUX ::= IDENT | ASSIGNMENT
;

VAR_TYPE ::=  Res_Bool | 
                BYTE_TYPE | 
                BYTE_TYPES | 
                Res_Address | 
                INT_TYPE | 
                UINT_TYPE | 
                Res_String | 
                Res_Ufixed
;

ASSIGNMENT::= Identificador ASSIGNMENT_AUX EXPRESSION
;


ASSIGNMENT_AUX ::= Asignacion | 
                    Sume | 
                    Reste | 
                    Multiplique | 
                    Divida
;

PRIVACY::= Res_Public | 
            Res_Private
;

BYTE_TYPE::= Res_Byte|Res_Byte2|Res_Byte4|Res_Byte8|Res_Byte16|Res_Byte32|Res_Byte64|Res_Byte128|Res_Byte256;
INT_TYPE::= Res_Int|Res_Int2|Res_Int4|Res_Int8|Res_Int16|Res_Int32|Res_Int64|Res_Int128|Res_Int256;
UINT_TYPE::= Res_Uint|Res_Uint2|Res_Uint4|Res_Uint8|Res_Uint16|Res_Uint32|Res_Uint64|Res_Uint128|Res_Uint256;
BYTE_TYPES::=Res_Bytes|Res_Bytes2|Res_Bytes4|Res_Bytes8|Res_Bytes16|Res_Bytes32|Res_Bytes64|Res_Bytes128|Res_Bytes256;


/*
EXPRESSION ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete |
                EXPRESSION AbreCorchete EXPRESSION_AUX DosPuntos EXPRESSION_AUX CierraCorchete |
                EXPRESSION Punto IDENT |
                EXPRESSION AbreParentesis ARGUMENTS_EXPRESSION CierraParentesis |
                AbreParentesis EXPRESSION CierraParentesis |
                NotLogico EXPRESSION |
                NotBits EXPRESSION |
                EXPRESSION OP_ARITMETICO_PRIMER_ORDEN EXPRESSION |
                EXPRESSION CorrerALaIzquierda EXPRESSION |
                EXPRESSION CorrerALaDerecha EXPRESSION |
                EXPRESSION AndBits EXPRESSION |
                EXPRESSION OrBits EXPRESSION |
                EXPRESSION OP_BOOLEANO EXPRESSION |
                EXPRESSION Interrogacion EXPRESSION DosPuntos EXPRESSION |
                EXPRESSION ASSIGNMENT_AUX EXPRESSION |
                EXPRESSION_PRIMARIA
;
*/



EXPRESSION ::= AbreParentesis EXP1 CierraParentesis | EXP1
;

EXP1::= NotLogico EXP2 | NotBits EXP2 | EXPRESSION_PRIMARIA EXP2
;

EXP2 ::=    EXP3 AbreCorchete |
            EXP4 Punto |
            EXP5 AbreParentesis |
            EXP6 OP_ARITMETICO_PRIMER_ORDEN |
            EXP7 OP_BIT|
            EXP8 OP_BOOLEANO |
            EXP9 Interrogacion |
            EXP10 ASSIGNMENT|
            ;

EXP3::= AbreCorchete EXPRESSION_AUX EXP3_2
;
EXP3_2::= DosPuntos EXPRESSION_AUX CierraCorchete | CierraCorchete
;
EXP4::= Punto IDENT
;
EXP5::= AbreParentesis ARGUMENTS_EXPRESSION CierraParentesis
;
EXP6::= OP_ARITMETICO_PRIMER_ORDEN EXP1
;
EXP7::=OP_BIT EXP1
;
EXP8::=OP_BOOLEANO EXP1
;
EXP9::=Interrogacion EXP1
;
EXP10::=ASSIGNMENT_AUX EXP1
;




EXPRESSION_AUX ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete | 
;

OP_BIT ::= CorrerALaDerecha|CorrerALaIzquierda|AndBits|OrBits
;

OP_ARITMETICO_PRIMER_ORDEN ::= Potencia | 
                                OP_ARITMETICO_SEGUNDO_ORDEN
;

OP_ARITMETICO_SEGUNDO_ORDEN ::= Multiplicacion | 
                                Division | 
                                Porcentaje | 
                                OP_ARITMETICO_TERCER_ORDEN
;

OP_ARITMETICO_TERCER_ORDEN ::= Suma | Resta
;

OP_BOOLEANO ::= MenorQue | 
                MayorQue | 
                MenorOIgualQue | 
                MayorOIgualQue | 
                Comparacion | 
                Diferencia | 
                AndLogico | 
                OrLogico
;

ARGUMENTS_EXPRESSION ::= IDENT ARGUMENTS_EXPRESSION_AUX|
                        EXPRESSION ARGUMENTS_EXPRESSION_AUX | 
                        ;

ARGUMENTS_EXPRESSION_AUX ::= Coma IDENT ARGUMENTS_EXPRESSION_AUX |
                            Coma EXPRESSION ARGUMENTS_EXPRESSION_AUX |
;

EXPRESSION_PRIMARIA ::= LITERAL_BOOLEANO |
                        LITERAL_NUMERICO |
                        Cadena |
                        IDENT EXPRESSION_PRIMARIA_AUX
;

EXPRESSION_PRIMARIA_AUX ::= AbreCorchete CierraCorchete |
;

LITERAL_BOOLEANO ::= Res_True | 
                    Res_False
;

LITERAL_NUMERICO ::= Numero LITERAL_NUMERICO_AUX | 
                    Hexadecimal LITERAL_NUMERICO_AUX | 
                    Cientifico LITERAL_NUMERICO_AUX | 
                    Flotante LITERAL_NUMERICO_AUX
;

LITERAL_NUMERICO_AUX ::= Unit_Days |
                        Unit_Ether |
                        Unit_Finney |
                        Unit_Hours |
                        Unit_Minutes |
                        Unit_Seconds |
                        Unit_Szabo |
                        Unit_Weeks |
                        Unit_Wei | 
                        Unit_Years |
;
                        


STRUCT ::= Res_Struct IDENT AbreLlave VARIABLE PuntoYComa STRUCT_AUX CierraLlave
;

STRUCT_AUX ::= Coma VARIABLE PuntoYComa STRUCT_AUX | 
;

FUNCION ::= Res_Function IDENT AbreParentesis PARAM_LIST CierraParentesis MODS RETURNS_FUNCTION
            AbreLlave VAR_LIST CUERPO_FUNCION RETURN_SENTENCIA CierraLlave
;

CUERPO_FUNCION::= SENTENCIA CUERPO_FUNCION | 
;

PARAM_LIST::= PARAM_LIST_AUX | 
;

PARAM_LIST_AUX ::= VARIABLE | PARAM_LIST_AUX_HELP
;

PARAM_LIST_AUX_HELP ::= Coma VARIABLE PARAM_LIST_AUX_HELP2
;

PARAM_LIST_AUX_HELP2 ::= Coma VARIABLE PARAM_LIST_AUX_HELP2 | 
;

VAR_LIST::= VAR_LIST_AUX | 
;

VAR_LIST_AUX::= VARIABLE PuntoYComa  | VAR_LIST_AUX_HELP1
;

VAR_LIST_AUX_HELP1::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP2
;

VAR_LIST_AUX_HELP2::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP2 | 
;

MODS::= MOD_LIST | 
;

MOD_LIST ::= Res_Payable | PRIVACY | Res_Internal
;


RETURNS_FUNCTION ::= RETURNS_FUNCTION_AUX | 
;

RETURNS_FUNCTION_AUX ::= Res_Returns AbreParentesis VAR_TYPE IDENT CierraParentesis
;
