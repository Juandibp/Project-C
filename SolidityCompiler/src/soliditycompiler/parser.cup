/*CODIGO DE LA CLASE*/
package soliditycompiler;

import java_cup.runtime.Symbol;
import soliditycompiler.LexerC.*;
import java.util.LinkedList;
import TraduccionSemantica.*;


parser code
{:
    public static LinkedList<SError> SEList = new LinkedList<SError>(); //SYNTAX ERROR LIST
    
    //public static String ultimoToken;
    private Symbol s;

    public Parser (LexerC scanner) {
        super(scanner);
    }

    //metodo de llamado automatico al error que es recuperable
    public void syntax_error(Symbol s){
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;

        if((column - lexeme.length())<=0){
            column = 0;
        }

        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token inválido");
        SEList.add(dato);
    }

    //metodo que se llama cuando ya no es recuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token no esperado"); 
        SEList.add(dato);
    }
    
    public Symbol getS(){
        return this.s;
    }
:};


/*DEFINICION TERMINALES*/
terminal java_cup.runtime.symbol empty;


terminal Res_Int, Res_Int2, Res_Int4, Res_Int8, Res_Int16, Res_Int32, Res_Int64, Res_Int128, Res_Int256, Res_If, Res_Else, Res_Address, Res_Bool, Res_Break,
        Res_Bytes, Res_Bytes2, Res_Bytes4, Res_Bytes8, Res_Bytes16, Res_Bytes32, Res_Bytes64, Res_Bytes128, Res_Bytes256, Res_Byte, Res_Byte2, Res_Byte4, Res_Byte8,
        Res_Byte16, Res_Byte32, Res_Byte64, Res_Byte128, Res_Byte256, Res_Continue, Res_Contract, Res_Do, Res_Enum, Res_False, Res_For, Res_Function, Res_Internal, Res_Payable, Res_Pragma, Res_Private, Res_Public, Res_Return, Res_Returns,
        Res_Solidity, Res_String, Res_Struct, Res_This, Res_True, Res_Ufixed, Res_Uint, Res_Uint2, Res_Uint4, Res_Uint8, Res_Uint16, Res_Uint32, Res_Uint64, Res_Uint128,
        Res_Uint256, Res_While, Unit_Days, Unit_Ether,

        Res_Moddifier,Res_Constructor,Trans_Callcode,Trans_Call,Trans_Send,Trans_Balance, Res_View, Res_Delete, Trans_Transfer, Trans_Delgatecall, Res_Mapping, Res_Import,
        Res_As, Error, Comillas, ComentarioBloque, Res_Var, Res_From, Escape,


        Unit_Finney, Unit_Hours, Unit_Minutes, Unit_Seconds, Unit_Szabo, Unit_Weeks, Unit_Wei, Unit_Years, Cientifico, Flotante, NotLogico, AndLogico,
        Potencia, Comparacion, Diferencia, OrLogico, MenorOIgualQue, CorrerALaIzquierda, CorrerALaDerecha, MenorQue, MayorOIgualQue, MayorQue, AndBits, OrBits, NotBits,
        Porcentaje, Sume, Reste, Multiplique, Divida, AbreParentesis, CierraParentesis, AbreLlave, CierraLlave, Interrogacion, AbreCorchete, CierraCorchete, DosPuntos,
        PuntoYComa, Coma, Punto, Asignacion, Suma, Resta, Multiplicacion, Division, Hexadecimal, Cadena, Identificador, Numero; 

/*DEFINICION NO TERMINALES*/

non terminal String INICIO, CONTRACT_INICIO, CONTRACT, CUERPO_CONTRATO,IDENT, ENUM, SENTENCIA, STRUCT, FUNCION, CUERPO_ENUM, CUERPO_ENUM_AUX, VARIABLE, VAR_TYPE,
             ASSIGNMENT, PRIVACY, BYTE_TYPE, INT_TYPE, UINT_TYPE, BYTE_TYPES, BLOQUE, SENTENCIA_BLOQUE, IF_SENTENCIA, WHILE_SENTENCIA, 
             DOWHILE_SENTENCIA, FOR_SENTENCIA, ASSIGNMENT_FOR, EXPRESSION_FOR_UNO, CONTINUE_SENTENCIA, BREAK_SENTENCIA, RETURN_SENTENCIA, RETURN_SENTENCIA_AUX, EXPRESSION, ELSE, SENTENCIA_BASE, EXPRESSION_SENTENCIA,
             BOOLEAN_EXPRESSION, EXPRESSION_AUX, ARGUMENTS_EXPRESSION, ASSIGNMENT_AUX, EXPRESSION_PRIMARIA, EXPRESSION_PRIMARIA_AUX, OP_ARITMETICO_PRIMER_ORDEN, 
             OP_ARITMETICO_SEGUNDO_ORDEN, OP_ARITMETICO_TERCER_ORDEN, OP_BOOLEANO, LITERAL_BOOLEANO, LITERAL_NUMERICO, LITERAL_NUMERICO_AUX, STRUCT_AUX, CUERPO_FUNCION, PARAM_LIST, PARAM_LIST_AUX, PARAM_LIST_AUX_HELP,
             VAR_LIST, VAR_LIST_AUX, VAR_LIST_AUX_HELP, MODS, MOD_LIST, RETURNS_FUNCTION, RETURNS_FUNCTION_AUX, EXPRESSION_FOR_DOS, VARIABLE_AUX,
             VARIABLE_AUX_AUX, IDENT_AUX, IDENT_AUX2, IDENT_AUX3, IDENT_AUX_THIS, ARGUMENTS_EXPRESSION_AUX, OP_BIT, EXP1,EXP2,EXP3,EXP3_2,EXP4,EXP5,EXP6,EXP7,EXP8,EXP9,EXP10, SENTENCIAF, SENTENCIA_VARIABLE, SENTENCIA_VARIABLE_AUX,
             IF_AUX, WHILE_AUX
;

precedence left AbreCorchete;
precedence left Punto;
precedence left AbreParentesis;

start with INICIO;

/*REGLAS*/

INICIO ::= Res_Pragma Res_Solidity Potencia Flotante Flotante PuntoYComa CONTRACT_INICIO
;

CONTRACT_INICIO ::= CONTRACT CONTRACT_INICIO | 
;

CONTRACT ::= Res_Contract Identificador AbreLlave CUERPO_CONTRATO CierraLlave
;

CUERPO_CONTRATO ::= ENUM CUERPO_CONTRATO|
                    SENTENCIA CUERPO_CONTRATO|
                    STRUCT CUERPO_CONTRATO|
                    FUNCION CUERPO_CONTRATO |
;

ENUM ::= Res_Enum IDENT AbreLlave CUERPO_ENUM CierraLlave
;

CUERPO_ENUM ::= IDENT CUERPO_ENUM_AUX
;

CUERPO_ENUM_AUX ::= Coma IDENT CUERPO_ENUM_AUX | 
;

BLOQUE ::= AbreLlave SENTENCIA_BLOQUE CierraLlave
;

SENTENCIA_BLOQUE ::= SENTENCIA SENTENCIA_BLOQUE | SENTENCIA
;

SENTENCIA ::= IF_SENTENCIA | 
              WHILE_SENTENCIA | 
              DOWHILE_SENTENCIA | 
              FOR_SENTENCIA |
              CONTINUE_SENTENCIA |
              BREAK_SENTENCIA |
              RETURN_SENTENCIA |
              SENTENCIA_BASE
;

IF_SENTENCIA ::=    IF_AUX AbreParentesis BOOLEAN_EXPRESSION CierraParentesis:e BLOQUE ELSE {: AnalizadorSemantico.limpiarPila(eright); :}
;

IF_AUX::= Res_If:e {: RS_IF res=new RS_IF("",""); AnalizadorSemantico.pilaSemantica.push(res); :}
;

BOOLEAN_EXPRESSION ::= IDENT | EXPRESSION_PRIMARIA OP_BOOLEANO EXPRESSION_PRIMARIA
;

ELSE ::= Res_Else BLOQUE | 
;

WHILE_SENTENCIA ::= WHILE_AUX AbreParentesis BOOLEAN_EXPRESSION CierraParentesis:e BLOQUE {: AnalizadorSemantico.limpiarPila(eright); :}
;

WHILE_AUX ::= Res_While:e {: RS_WHILE res=new RS_WHILE("",""); AnalizadorSemantico.pilaSemantica.push(res); :}
;

DOWHILE_SENTENCIA ::= Res_Do BLOQUE Res_While AbreParentesis BOOLEAN_EXPRESSION CierraParentesis PuntoYComa
;

FOR_SENTENCIA ::= Res_For AbreParentesis ASSIGNMENT_FOR EXPRESSION_FOR_UNO EXPRESSION_FOR_DOS CierraParentesis BLOQUE
;

ASSIGNMENT_FOR ::= SENTENCIA_BASE
;

EXPRESSION_FOR_UNO ::= EXPRESSION_SENTENCIA
;

EXPRESSION_FOR_DOS ::= EXPRESSION
;

SENTENCIA_BASE ::= SENTENCIA_VARIABLE |
                   EXPRESSION_SENTENCIA
;

SENTENCIA_VARIABLE ::= VAR_TYPE Identificador:e ASSIGNMENT_AUX EXPRESSION PuntoYComa {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Global",eright); AnalizadorSemantico.anadirValor(e.toString()); :} 
                        | VAR_TYPE Identificador:e Coma SENTENCIA_VARIABLE_AUX {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Global",eright); :} 
                        | VAR_TYPE Identificador:e PuntoYComa {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Global",eright); :}
;

SENTENCIA_VARIABLE_AUX ::= Identificador:e PuntoYComa {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Global",eright); :} 
                            | Identificador:e Coma SENTENCIA_VARIABLE_AUX {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Global",eright); :}
;

EXPRESSION_SENTENCIA ::=  EXPRESSION PuntoYComa:e {: AnalizadorSemantico.limpiarPila(eright); :}
;

CONTINUE_SENTENCIA ::= Res_Continue:e PuntoYComa {: 
                        AnalizadorSemantico.accionContinue(e.right);
                        /*
                        RS_CONTROL res=new RS_CONTROL("continue");
                        AnalizadorSemantico.pilaSemantica.push(res);
                        AnalizadorSemantico.limpiarPila(eright);
                        */
                        :}
;

BREAK_SENTENCIA ::= Res_Break:e PuntoYComa {: RS_CONTROL res=new RS_CONTROL("break");
                        AnalizadorSemantico.pilaSemantica.push(res);
                        AnalizadorSemantico.limpiarPila(eright);
                        :}
;
 
RETURN_SENTENCIA ::= Res_Return:e RETURN_SENTENCIA_AUX PuntoYComa {:
                    RS_RETURNS res=new RS_RETURNS();
                    AnalizadorSemantico.pilaSemantica.push(res);
                    AnalizadorSemantico.limpiarPila(eright); :}
;

RETURN_SENTENCIA_AUX ::= Identificador
;
/*SE CAMBIO A IDENTIFICADOR*/



EXPRESSION ::= AbreParentesis EXP1 CierraParentesis | EXP1
;

EXP1::= NotLogico EXP2 | NotBits EXP2 | EXPRESSION_PRIMARIA EXP2
;

EXP2 ::=    EXP3 |
            EXP4 |
            EXP5 |
            EXP6 |
            EXP7 |
            EXP8 |
            EXP9  |
            EXP10 |
            ;

EXP3::= AbreCorchete EXPRESSION_AUX EXP3_2
;
EXP3_2::= DosPuntos EXPRESSION_AUX CierraCorchete | CierraCorchete
;
EXP4::= Punto IDENT
;
EXP5::= AbreParentesis ARGUMENTS_EXPRESSION CierraParentesis
;
EXP6::= OP_ARITMETICO_PRIMER_ORDEN EXP1
;
EXP7::=OP_BIT EXP1
;
EXP8::=OP_BOOLEANO EXP1
;
EXP9::=Interrogacion EXP1
;
EXP10::=ASSIGNMENT_AUX EXP1
;

EXPRESSION_AUX ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete | 
;

OP_BIT ::= CorrerALaDerecha|CorrerALaIzquierda|AndBits|OrBits
;

OP_ARITMETICO_PRIMER_ORDEN ::= Potencia:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                                OP_ARITMETICO_SEGUNDO_ORDEN
;

OP_ARITMETICO_SEGUNDO_ORDEN ::= Multiplicacion:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                                Division:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                                Porcentaje:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                                OP_ARITMETICO_TERCER_ORDEN
;

OP_ARITMETICO_TERCER_ORDEN ::= Suma:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} 
                            | Resta:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :}
;

OP_BOOLEANO ::= MenorQue:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                MayorQue:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                MenorOIgualQue:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                MayorOIgualQue:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                Comparacion:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                Diferencia:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                AndLogico | 
                OrLogico
;

ARGUMENTS_EXPRESSION ::= EXPRESSION ARGUMENTS_EXPRESSION_AUX
                        ;

ARGUMENTS_EXPRESSION_AUX ::= Coma EXPRESSION ARGUMENTS_EXPRESSION_AUX |
;

EXPRESSION_PRIMARIA ::= LITERAL_BOOLEANO |
                        LITERAL_NUMERICO |
                        Cadena:y {: RS_DO cade=new RS_DO(y.toString()); AnalizadorSemantico.pilaSemantica.push(cade); :} |
                        IDENT
;/* Cambio de IDENT a Identificador*/


LITERAL_BOOLEANO ::= Res_True | 
                    Res_False
;

LITERAL_NUMERICO ::= Numero:v LITERAL_NUMERICO_AUX {: RS_DO num=new RS_DO(v.toString()); AnalizadorSemantico.pilaSemantica.push(num); :} | 
                    Hexadecimal LITERAL_NUMERICO_AUX | 
                    Cientifico LITERAL_NUMERICO_AUX | 
                    Flotante LITERAL_NUMERICO_AUX
;

LITERAL_NUMERICO_AUX ::= Unit_Days |
                        Unit_Ether |
                        Unit_Finney |
                        Unit_Hours |
                        Unit_Minutes |
                        Unit_Seconds |
                        Unit_Szabo |
                        Unit_Weeks |
                        Unit_Wei | 
                        Unit_Years |
;
                        


STRUCT ::= Res_Struct IDENT AbreLlave VARIABLE PuntoYComa STRUCT_AUX CierraLlave
;

STRUCT_AUX ::= Coma VARIABLE PuntoYComa STRUCT_AUX | 
;

FUNCION ::= Res_Function Identificador AbreParentesis PARAM_LIST CierraParentesis MODS RETURNS_FUNCTION
            AbreLlave VAR_LIST CUERPO_FUNCION CierraLlave
;
/* Cambio IDENT a identificador*/ 

CUERPO_FUNCION::= SENTENCIAF CUERPO_FUNCION | SENTENCIAF
;

SENTENCIAF::=   IF_SENTENCIA |
                WHILE_SENTENCIA |
                FOR_SENTENCIA |
                CONTINUE_SENTENCIA |
                BREAK_SENTENCIA |
                RETURN_SENTENCIA |
                EXPRESSION_SENTENCIA
;

PARAM_LIST::= PARAM_LIST_AUX | 
;

PARAM_LIST_AUX ::= VAR_TYPE Identificador:e PARAM_LIST_AUX_HELP {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Parametro",eright); :}
;

PARAM_LIST_AUX_HELP ::= Coma VAR_TYPE Identificador:e PARAM_LIST_AUX_HELP {: AnalizadorSemantico.anadirSimbolo(e.toString(),"Parametro",eright); :} |
;


VAR_LIST::= VAR_LIST_AUX | 
;

VAR_LIST_AUX::= VARIABLE PuntoYComa VAR_LIST_AUX_HELP
;

VAR_LIST_AUX_HELP::= Coma VARIABLE PuntoYComa VAR_LIST_AUX_HELP | 
;


MODS::= MOD_LIST | 
;

MOD_LIST ::= Res_Payable | PRIVACY | Res_Internal
;


RETURNS_FUNCTION ::= RETURNS_FUNCTION_AUX | 
;

RETURNS_FUNCTION_AUX ::= Res_Returns AbreParentesis VAR_TYPE Identificador:e CierraParentesis{: 
                                RS_RETURNS res=new RS_RETURNS();
                                 AnalizadorSemantico.pilaSemantica.push(res);:}
;

VARIABLE ::= VAR_TYPE VARIABLE_AUX
;

VARIABLE_AUX ::= VARIABLE_AUX_AUX | 
                AbreCorchete CierraCorchete VARIABLE_AUX_AUX
;

VARIABLE_AUX_AUX ::= IDENT | ASSIGNMENT
;

VAR_TYPE ::=  Res_Bool:e{: AnalizadorSemantico.type=e.toString();  :} | 
                BYTE_TYPE | 
                BYTE_TYPES | 
                Res_Address:e{: AnalizadorSemantico.type=e.toString();  :} | 
                INT_TYPE | 
                UINT_TYPE | 
                Res_String:e{: AnalizadorSemantico.type=e.toString(); :} | 
                Res_Ufixed:e{: AnalizadorSemantico.type=e.toString();  :}
;

ASSIGNMENT::= Identificador ASSIGNMENT_AUX EXPRESSION
;


ASSIGNMENT_AUX ::= Asignacion:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :} | 
                    Sume:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :}| 
                    Reste:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :}| 
                    Multiplique:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :}| 
                    Divida:v {: RS_OPERADOR ope=new RS_OPERADOR(v.toString()); AnalizadorSemantico.pilaSemantica.push(ope); :}
;

PRIVACY::= Res_Public | 
            Res_Private
;

BYTE_TYPE::= Res_Byte:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Byte2:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Byte4:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Byte8:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Byte16:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Byte32:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Byte64:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Byte128:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Byte256:e{: AnalizadorSemantico.type=e.toString(); :};

INT_TYPE::= Res_Int:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Int2:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Int4:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Int8:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Int16:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Int32:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Int64|Res_Int128:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Int256:e{: AnalizadorSemantico.type=e.toString(); :};

UINT_TYPE::= Res_Uint:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Uint2:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Uint4:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Uint8:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Uint16:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Uint32:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Uint64:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Uint128:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Uint256:e{: AnalizadorSemantico.type=e.toString(); :};

BYTE_TYPES::=Res_Bytes:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Bytes2:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Bytes4:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Bytes8:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Bytes16:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Bytes32:e{: AnalizadorSemantico.type=e.toString(); :}
|Res_Bytes64:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Bytes128:e{: AnalizadorSemantico.type=e.toString(); :}|Res_Bytes256:e{: AnalizadorSemantico.type=e.toString(); :};

IDENT::= Identificador:y IDENT_AUX {: RS_ID ide=new RS_ID(y.toString()); AnalizadorSemantico.pilaSemantica.push(ide); :} | Res_This IDENT_AUX_THIS 
;

IDENT_AUX::= IDENT_AUX_THIS | 
;

IDENT_AUX2::= Identificador IDENT_AUX3
;

IDENT_AUX3::= AbreParentesis CierraParentesis | 
;

IDENT_AUX_THIS::= Punto IDENT_AUX2
;