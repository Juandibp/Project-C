/*CODIGO DE LA CLASE*/
package soliditycompiler;

import java_cup.runtime.Symbol;
import soliditycompiler.LexerC.*;
import java.util.LinkedList;

parser code
{:
    public static LinkedList<SError> SEList = new LinkedList<SError>(); //SYNTAX ERROR LIST
    public static String ultimoToken;
    private Symbol s;

    public Parser (LexerC scanner) {
        super(scanner);
    }

    //metodo de llamado automatico al error que es recuperable
    public void syntax_error(Symbol s){
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token inválido después de "); //FALTA HACER EL LOOKAHEAD HACIA ATRAS
        SEList.add(dato);
    }

    //metodo que se llama cuando ya no es recuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        this.s = s;
        String lexeme = s.value.toString();
        int line = s.right;
        int column = s.left;
        SError dato = new SError(lexeme, line, column, "Error Sintáctico", "Token no esperado"); 
        SEList.add(dato);
    }
    
    public Symbol getS(){
        return this.s;
    }
:};


/*DEFINICION TERMINALES*/
terminal Res_Int, Res_Int2, Res_Int4, Res_Int8, Res_Int16, Res_Int32, Res_Int64, Res_Int128, Res_Int256, Res_If, Res_Else, Res_Address, Res_As, Res_Bool, Res_Break,
        Res_Bytes, Res_Bytes2, Res_Bytes4, Res_Bytes8, Res_Bytes16, Res_Bytes32, Res_Bytes64, Res_Bytes128, Res_Bytes256, Res_Byte, Res_Byte2, Res_Byte4, Res_Byte8,
        Res_Byte16, Res_Byte32, Res_Byte64, Res_Byte128, Res_Byte256, Res_Constructor, Res_Continue, Res_Contract, Res_Delete, Res_Do, Res_Enum, Res_False, Res_For,
        Res_From, Res_Function, Res_Import, Res_Internal, Res_Mapping, Res_Moddifier, Res_Payable, Res_Pragma, Res_Private, Res_Public, Res_Return, Res_Returns,
        Res_Solidity, Res_String, Res_Struct, Res_This, Res_True, Res_Ufixed, Res_Uint, Res_Uint2, Res_Uint4, Res_Uint8, Res_Uint16, Res_Uint32, Res_Uint64, Res_Uint128,
        Res_Uint256, Res_Var, Res_View, Res_While, Trans_Balance, Trans_Call, Trans_Callcode, Trans_Delgatecall, Trans_Send, Trans_Transfer, Unit_Days, Unit_Ether,
        Unit_Finney, Unit_Hours, Unit_Minutes, Unit_Seconds, Unit_Szabo, Unit_Weeks, Unit_Wei, Unit_Years, ComentarioBloque, Cientifico, Flotante, NotLogico, AndLogico,
        Potencia, Comparacion, Diferencia, OrLogico, MenorOIgualQue, CorrerALaIzquierda, CorrerALaDerecha, MenorQue, MayorOIgualQue, MayorQue, AndBits, OrBits, NotBits,
        Porcentaje, Sume, Reste, Multiplique, Divida, AbreParentesis, CierraParentesis, AbreLlave, CierraLlave, Interrogacion, AbreCorchete, CierraCorchete, DosPuntos,
        PuntoYComa, Coma, Punto, Asignacion, Suma, Resta, Multiplicacion, Division, Hexadecimal, Cadena, Identificador, Numero, Comillas, Escape, Error; 

/*DEFINICION NO TERMINALES*/
non terminal java_cup.runtime.symbol empty;

non terminal INICIO, CONTRACT_INICIO, CONTRACT, CUERPO_CONTRATO, ENUM, SENTENCIA, ESTRUCTURA, FUNCION, CUERPO_ENUM, CUERPO_ENUM_AUX, VARIABLE, VAR_TYPE,
             ASSIGNMENT, PRIVACY, BYTE_TYPE, INT_TYPE, UINT_TYPE, BYTE_TYPES, BLOQUE, SENTENCIA_BLOQUE, SENTENCIA, IF_SENTENCIA, WHILE_SENTENCIA, 
             DOWHILE_SENTENCIA, FOR_SENTENCIA, CONTINUE_SENTENCIA, BREAK_SENTENCIA, RETURN_SENTENCIA, EXPRESSION, ELSE, SENTENCIA_BASE, EXPRESSION_SENTENCIA,
             BOOLEAN_EXPRESSION, EXPRESSION_AUX, ARGUMENTS, 
;

start with INICIO;

/*REGLAS*/

INICIO ::= Res_Pragma Res_Solidity Potencia Flotante Flotante PuntoYComa CONTRACT_INICIO
;

CONTRACT_INICIO ::= CONTRACT CONTRACT_INICIO | 
                    empty
;

CONTRACT ::= Res_Contract Identificador AbreLlave CUERPO_CONTRATO CierraLlave 
;

CUERPO_CONTRATO ::= ENUM CUERPO_CONTRATO|
                    SENTENCIA CUERPO_CONTRATO|
                    ESTRUCTURA CUERPO_CONTRATO|
                    FUNCION CUERPO_CONTRATO |
                    empty
;

ENUM ::= Res_Enum Identificador AbreLlave CUERPO_ENUM CierraLlave
;

CUERPO_ENUM ::= Identificador CUERPO_ENUM_AUX
;

CUERPO_ENUM_AUX ::= Coma Identificador CUERPO_ENUM_AUX | empty
;

BLOQUE ::= AbreLlave SENTENCIA_BLOQUE CierraLlave PuntoYComa
;

SENTENCIA_BLOQUE ::= SENTENCIA SENTENCIA_BLOQUE | empty
;

SENTENCIA ::= IF_SENTENCIA | 
              WHILE_SENTENCIA | 
              DOWHILE_SENTENCIA | 
              FOR_SENTENCIA |
              CONTINUE_SENTENCIA |
              BREAK_SENTENCIA |
              RETURN_SENTENCIA |
              SENTENCIA_BASE
;

IF_SENTENCIA ::= Res_If AbreParentesis EXPRESSION CierraParentesis SENTENCIA ELSE
;

ELSE ::= Res_Else SENTENCIA | 
         empty
;

WHILE_SENTENCIA ::= Res_While AbreParentesis EXPRESSION CierraParentesis SENTENCIA
;

DOWHILE_SENTENCIA ::= Res_Do SENTENCIA Res_While AbreParentesis EXPRESSION CierraParentesis PuntoYComa
;

FOR_SENTENCIA ::= Res_For AbreParentesis  
;

SENTENCIA_BASE ::= VARIABLE |
                   EXPRESSION_SENTENCIA
;

EXPRESSION_SENTENCIA ::=  EXPRESSION PuntoYComa
;

VARIABLE ::= VAR_TYPE PRIVACY Identificador PuntoYComa |
             VAR_TYPE PRIVACY ASSIGNMENT PuntoYComa | 
             VAR_TYPE AbreCorchete CierraCorchete Identificador PuntoYComa | 
             VAR_TYPE AbreCorchete CierraCorchete ASSIGNMENT PuntoYComa
             ;

VAR_TYPE ::=  Res_Bool | 
                BYTE_TYPE | 
                BYTE_TYPES | 
                Res_Address | 
                INT_TYPE | 
                UINT_TYPE | 
                Res_String | 
                Res_Ufixed
;

ASSIGNMENT::= Identificador Asignacion Identificador | Identificador Asignacion EXPRESSION
;


PRIVACY::= Res_Public | 
            Res_Private;

BYTE_TYPE::= Res_Byte|Res_Byte2|Res_Byte4|Res_Byte8|Res_Byte16|Res_Byte32|Res_Byte64|Res_Byte128|Res_Byte256;
INT_TYPE::= Res_Int|Res_Int2|Res_Int4|Res_Int8|Res_Int16|Res_Int32|Res_Int64|Res_Int128|Res_Int256;
UINT_TYPE::= Res_Uint|Res_Uint2|Res_Uint4|Res_Uint8|Res_Uint16|Res_Uint32|Res_Uint64|Res_Uint128|Res_Uint256;
BYTE_TYPES::=Res_Bytes|Res_Bytes2|Res_Bytes4|Res_Bytes8|Res_Bytes16|Res_Bytes32|Res_Bytes64|Res_Bytes128|Res_Bytes256;

EXPRESSION ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete |
                EXPRESSION AbreCorchete EXPRESSION_AUX DosPuntos EXPRESSION_AUX CierraCorchete |
                EXPRESSION Punto Identificador |
                EXPRESSION AbreParentesis ARGUMENTS CierraParentesis |
                AbreParentesis EXPRESSION CierraParentesis |
                NotLogico EXPRESSION |
                NotBits EXPRESSION |
                EXPRESSION Potencia EXPRESSION |
                EXPRESSION Multiplicacion EXPRESSION |
                EXPRESSION Division EXPRESSION |
                EXPRESSION Porcentaje EXPRESSION |
                EXPRESSION Suma EXPRESSION |
                EXPRESSION Resta EXPRESSION |
                EXPRESSION CorrerALaIzquierda EXPRESSION |
                EXPRESSION CorrerALaDerecha EXPRESSION |
                EXPRESSION AndBits EXPRESSION |
                EXPRESSION OrBits EXPRESSION |
                EXPRESSION MenorQue EXPRESSION |
                EXPRESSION MayorQue EXPRESSION |
                EXPRESSION MenorOIgualQue EXPRESSION |
                EXPRESSION MayorOIgualQue EXPRESSION |
                EXPRESSION Comparacion EXPRESSION |
                EXPRESSION Diferencia EXPRESSION |
                
;

EXPRESSION_AUX ::= EXPRESSION AbreCorchete EXPRESSION_AUX CierraCorchete | 
                    empty
;